var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.514,1,2.047]],["body/controllers/AppController.html",[0,2.541,1,3.436,2,2.111,3,0.579,4,0.512,5,0.389,6,3.709,7,1.152,8,3.084,9,4.972,10,1.929,11,0.033,12,1.368,13,4.452,14,2.111,15,0.868,16,1.386,17,1.767,18,2.995,19,3.709,20,0.579,21,0.199,22,3.709,23,3.709,24,2.319,25,4.452,26,0.028,27,0.028]],["title/modules/AppModule.html",[28,1.514,29,2.047]],["body/modules/AppModule.html",[1,3.48,2,2.347,3,0.509,4,0.45,5,0.342,11,0.033,16,1.579,17,1.553,18,3.131,19,3.261,20,0.509,21,0.175,26,0.025,27,0.025,28,2.574,29,4.026,30,2.039,31,2.039,32,2.83,33,2.83,34,2.252,35,3.926,36,2.83,37,3.261,38,3.261,39,3.261,40,3.459,41,3.459,42,3.58,43,2.83,44,2.509,45,3.914,46,3.58,47,3.261,48,2.039,49,3.914,50,3.261,51,3.914,52,3.914,53,3.914,54,3.914,55,3.914]],["title/injectables/AppService.html",[18,1.663,56,1.837]],["body/injectables/AppService.html",[3,0.583,4,0.517,5,0.392,7,1.161,8,3.099,9,4.986,11,0.033,12,1.379,14,2.128,15,0.872,16,1.161,17,1.781,18,2.805,20,0.583,21,0.201,24,2.338,26,0.028,27,0.028,56,3.099,57,3.246,58,3.739,59,4.489,60,3.739,61,4.489,62,3.246,63,4.489,64,2.877,65,3.739,66,4.489,67,3.739,68,3.246,69,3.739]],["title/classes/BlogPost.html",[21,0.143,70,1.514]],["body/classes/BlogPost.html",[3,0.397,4,0.351,5,0.266,7,1.242,10,2.488,11,0.034,12,1.764,15,0.972,16,1.338,20,0.624,21,0.137,24,1.59,26,0.022,27,0.022,48,1.59,70,2.572,71,0.79,72,1.756,73,1.82,74,1.475,75,2.08,76,3.226,77,2.764,78,3.473,79,1.475,80,2.501,81,1.864,82,2.501,83,3.499,84,3.078,85,3.316,86,3.052,87,4.31,88,3.995,89,3.052,90,3.052,91,3.052,92,3.052,93,3.052,94,3.052,95,3.052,96,4.874,97,2.693,98,2.543,99,3.037,100,1.957,101,2.693,102,3.052,103,3.499,104,2.543,105,3.316,106,1.447,107,3.052,108,3.052,109,3.052,110,2.207,111,1.957,112,1.957,113,2.543,114,3.499,115,2.543,116,3.052,117,3.052,118,3.052,119,3.052,120,4.2,121,4.2,122,3.052]],["title/classes/BlogPostComment.html",[21,0.143,82,1.663]],["body/classes/BlogPostComment.html",[3,0.484,4,0.429,5,0.325,7,0.964,10,2.427,11,0.034,12,1.721,15,0.907,16,1.241,20,0.69,21,0.167,26,0.025,27,0.025,48,1.942,71,0.964,73,2.079,75,2.299,76,3.415,81,1.823,82,2.5,83,3.106,84,2.39,85,2.39,87,3.998,88,3.87,96,4.83,97,3.076,98,3.106,99,3.47,100,2.39,101,2.39,104,3.106,105,3.076,106,1.767,111,2.39,123,2.39,124,4.421,125,2.764,126,5.307,127,4.799,128,3.728,129,3.728,130,3.728,131,3.728,132,3.728,133,3.106,134,3.106,135,3.106]],["title/classes/CommentDoesntExist.html",[21,0.143,136,1.068]],["body/classes/CommentDoesntExist.html",[3,0.434,4,0.384,5,0.291,11,0.034,15,0.722,20,0.776,21,0.288,26,0.023,27,0.023,71,0.863,74,1.544,79,1.025,136,1.492,137,1.324,138,1.116,139,2.225,140,2.178,141,2.742,142,2.124,143,1.324,144,1.324,145,1.324,146,1.933,147,1.445,148,1.445,149,1.718,150,1.324,151,1.445,152,1.025,153,1.025,154,1.445,155,1.324,156,1.025,157,1.933,158,1.933,159,1.025,160,1.116,161,1.025,162,1.116,163,1.324,164,1.025]],["title/classes/CreateCommentDto.html",[21,0.143,165,1.663]],["body/classes/CreateCommentDto.html",[3,0.569,4,0.504,5,0.382,7,1.133,10,2.3,11,0.033,12,1.631,15,0.961,16,1.133,20,0.569,21,0.237,26,0.027,27,0.027,71,1.133,73,2.3,75,2.474,81,1.631,125,2.975,165,2.765,166,3.286,167,3.65,168,5.308,169,4.381,170,4.381,171,4.13,172,4.13,173,2.809]],["title/classes/CreatePostDto.html",[21,0.143,174,1.663]],["body/classes/CreatePostDto.html",[3,0.537,4,0.475,5,0.36,7,1.068,10,2.41,11,0.033,12,1.709,15,0.986,16,1.324,20,0.537,21,0.229,26,0.026,27,0.026,71,1.068,73,2.217,75,2.41,77,3.201,80,2.898,81,1.709,166,3.347,171,4.206,172,4.206,173,2.647,174,2.666,175,3.44,176,4.635,177,4.129,178,4.129,179,4.129,180,4.845,181,2.647]],["title/classes/CreateRelationshipDto.html",[21,0.143,182,2.047]],["body/classes/CreateRelationshipDto.html",[3,0.559,4,0.495,5,0.375,7,1.113,10,2.274,11,0.033,12,1.612,15,0.955,16,1.358,20,0.559,21,0.235,26,0.027,27,0.027,71,1.113,73,2.274,81,1.612,166,3.26,171,4.097,172,4.097,173,2.757,176,4.373,180,4.72,181,2.757,182,3.365,183,3.583,184,4.097,185,4.097,186,4.302,187,4.302]],["title/controllers/HealthController.html",[0,1.514,188,2.047]],["body/controllers/HealthController.html",[0,1.763,2,1.763,3,0.483,4,0.428,5,0.325,7,0.962,8,2.757,10,1.611,11,0.034,12,1.143,14,1.763,16,1.24,17,1.476,20,0.483,21,0.166,24,1.937,26,0.025,27,0.025,188,3.072,189,3.099,190,3.099,191,3.992,192,5.599,193,3.72,194,3.72,195,3.868,196,4.792,197,4.792,198,4.792,199,4.792,200,4.792,201,4.792,202,3.72,203,3.72,204,2.69,205,3.72,206,2.69,207,4.827,208,3.72,209,2.69,210,3.099,211,3.72,212,3.72,213,3.72,214,3.72,215,3.099,216,3.72,217,3.72,218,3.72,219,3.72,220,4.792,221,6.034,222,3.72,223,3.72,224,3.72,225,3.72,226,3.72]],["title/modules/HealthModule.html",[28,1.514,40,1.837]],["body/modules/HealthModule.html",[2,2.57,3,0.59,4,0.522,5,0.396,11,0.033,16,1.554,17,1.801,20,0.59,21,0.203,26,0.028,27,0.028,28,2.57,30,2.364,40,3.12,46,3.282,188,3.717,204,3.282,227,4.538,228,5.422,229,5.422,230,3.781,231,4.538]],["title/classes/PostCircularRelationship.html",[21,0.143,156,0.981]],["body/classes/PostCircularRelationship.html",[3,0.433,4,0.383,5,0.291,11,0.034,15,0.721,20,0.776,21,0.288,26,0.023,27,0.023,71,0.861,74,1.369,79,1.023,136,1.113,137,1.321,138,1.113,139,2.224,140,1.93,141,2.741,142,2.124,143,1.321,144,1.321,145,1.321,146,1.93,147,1.442,148,1.442,149,1.767,150,1.321,151,1.442,152,1.023,153,1.023,154,1.93,155,1.768,156,1.369,157,1.93,158,1.93,159,1.023,160,1.113,161,1.023,162,1.113,163,1.321,164,1.023]],["title/controllers/PostController.html",[0,1.514,232,2.047]],["body/controllers/PostController.html",[0,0.371,2,0.371,3,0.102,4,0.09,5,0.068,7,0.202,8,0.806,10,1.58,11,0.034,12,1.12,14,1.729,15,0.899,16,0.989,17,0.31,20,0.102,21,0.035,22,0.651,23,0.651,24,2.072,26,0.007,27,0.007,67,1.167,70,0.371,73,0.607,74,0.82,75,1.723,77,1.095,78,0.565,79,0.911,80,1.208,81,1.66,82,0.407,84,2.067,85,1.711,88,3.033,97,2.45,105,3.308,106,2.593,111,2.45,125,1.68,138,2.107,139,1.912,145,0.31,149,1.88,152,0.712,153,1.174,155,0.92,156,0.43,159,0.43,160,1.796,161,0.82,162,1.22,164,0.43,165,1.991,174,1.797,181,0.501,182,1.902,184,1.013,185,1.677,190,0.651,195,3.033,232,0.898,233,0.651,234,0.651,235,4.375,236,1.167,237,2.211,238,1.167,239,1.585,240,1.585,241,1.167,242,1.167,243,1.4,244,1.167,245,0.651,246,0.782,247,1.677,248,3.696,249,3.081,250,1.4,251,2.319,252,3.822,253,2.319,254,2.319,255,2.967,256,5.901,257,2.967,258,0.782,259,4.562,260,0.782,261,4.731,262,4.531,263,4.806,264,0.782,265,2.676,266,2.54,267,2.338,268,2.874,269,0.782,270,0.782,271,2.967,272,2.319,273,1.677,274,1.4,275,0.782,276,0.782,277,0.782,278,2.319,279,2.146,280,1.013,281,1.167,282,0.782,283,2.967,284,0.782,285,3.449,286,2.319,287,2.319,288,2.874,289,1.4,290,0.782,291,0.651,292,2.472,293,0.782,294,2.637,295,1.4,296,1.677,297,1.4,298,0.782,299,2.319,300,4.119,301,0.782,302,2.319,303,1.4,304,1.4,305,0.782,306,0.651,307,0.782,308,1.677,309,2.319,310,0.782,311,1.4,312,0.782,313,0.651,314,0.782,315,1.4,316,1.167,317,1.4,318,0.782,319,0.782,320,0.651,321,0.782,322,0.782,323,0.782,324,0.782,325,3.184,326,2.332,327,0.782,328,0.782,329,1.711,330,1.4,331,0.782,332,0.782,333,0.782,334,1.903,335,0.651,336,0.782,337,0.782,338,0.782,339,1.167,340,0.782,341,0.782,342,1.903,343,3.822,344,2.967,345,2.319,346,5.501,347,0.782,348,0.991,349,0.651,350,1.585,351,0.651,352,0.565,353,0.651,354,0.782,355,0.565,356,0.651,357,0.651,358,0.651,359,0.782,360,0.782,361,0.782,362,3.647,363,1.167,364,1.4,365,1.4,366,0.782,367,0.651,368,1.4,369,5.501,370,1.4,371,2.223,372,1.167,373,1.167,374,1.167,375,1.167,376,1.167,377,1.167,378,1.167,379,1.167,380,2.223,381,1.4,382,2.967,383,1.167,384,0.782,385,3.038,386,2.637,387,3.314,388,0.782,389,3.038,390,4.731,391,4.375,392,5.252,393,1.903,394,3.647,395,3.647,396,1.903,397,1.167,398,0.782,399,0.782,400,0.782,401,0.782,402,0.782,403,0.782,404,1.4,405,0.782,406,0.782,407,1.932,408,0.782,409,0.782,410,0.782,411,0.782,412,0.782,413,1.167,414,0.782,415,1.376,416,0.782,417,0.782,418,0.651,419,0.782,420,0.782,421,0.782,422,0.782,423,2.319,424,0.782,425,1.903,426,0.782,427,0.782,428,0.782,429,1.585,430,1.585,431,1.585,432,1.4,433,0.782,434,0.782,435,0.782,436,0.782,437,0.782,438,0.782,439,0.782,440,0.782]],["title/classes/PostDoesntExist.html",[21,0.143,153,0.981]],["body/classes/PostDoesntExist.html",[3,0.434,4,0.384,5,0.291,11,0.034,15,0.722,20,0.776,21,0.288,26,0.023,27,0.023,71,0.863,74,1.37,79,1.025,136,1.116,137,1.324,138,1.116,139,2.225,140,2.178,141,2.742,142,2.124,143,1.324,144,1.324,145,1.324,146,1.933,147,1.445,148,1.445,149,1.768,150,1.324,151,1.445,152,1.025,153,1.37,154,1.445,155,1.324,156,1.025,157,1.933,158,1.933,159,1.025,160,1.116,161,1.025,162,1.116,163,1.324,164,1.025]],["title/classes/PostDoesntHaveComments.html",[21,0.143,164,0.981]],["body/classes/PostDoesntHaveComments.html",[3,0.433,4,0.383,5,0.291,11,0.034,15,0.721,20,0.776,21,0.288,26,0.023,27,0.023,71,0.861,74,1.542,79,1.023,136,1.113,137,1.321,138,1.113,139,2.224,140,1.93,141,2.741,142,2.124,143,1.321,144,1.321,145,1.321,146,1.93,147,1.442,148,1.442,149,1.717,150,1.321,151,1.442,152,1.023,153,1.023,154,1.442,155,1.321,156,1.023,157,1.93,158,1.93,159,1.023,160,1.113,161,1.023,162,1.49,163,1.768,164,1.369]],["title/classes/PostError.html",[21,0.143,142,1.068]],["body/classes/PostError.html",[3,0.417,4,0.369,5,0.28,11,0.034,12,0.985,15,0.855,20,0.769,21,0.287,26,0.022,27,0.022,71,0.829,74,1.334,79,0.985,81,0.985,136,1.072,137,1.273,138,1.453,139,2.246,140,1.882,141,2.729,142,2.122,143,1.724,144,1.724,145,1.273,146,2.288,147,1.882,148,1.389,149,1.748,150,1.273,151,1.389,152,0.985,153,0.985,154,1.389,155,1.273,156,0.985,157,1.882,158,2.134,159,0.985,160,1.072,161,0.985,162,1.072,163,1.273,164,0.985,206,2.319,265,1.845,266,1.67,267,2.055,441,2.671,442,3.207,443,3.207]],["title/classes/PostIdValidationError.html",[21,0.143,161,0.981]],["body/classes/PostIdValidationError.html",[3,0.432,4,0.382,5,0.29,11,0.034,15,0.72,20,0.775,21,0.288,26,0.023,27,0.023,71,0.86,74,1.367,79,1.021,136,1.111,137,1.319,138,1.111,139,2.223,140,1.928,141,2.741,142,2.123,143,1.319,144,1.319,145,1.319,146,1.928,147,1.439,148,1.439,149,1.766,150,1.319,151,1.439,152,1.021,153,1.021,154,1.439,155,1.319,156,1.021,157,2.173,158,2.173,159,1.021,160,1.488,161,1.367,162,1.111,163,1.319,164,1.021]],["title/modules/PostModule.html",[28,1.514,41,1.837]],["body/modules/PostModule.html",[2,2.431,3,0.538,4,0.476,5,0.361,11,0.033,16,1.548,17,1.643,20,0.538,21,0.185,26,0.026,27,0.026,28,2.641,30,2.156,31,2.156,32,2.994,33,2.994,34,2.382,35,4.028,36,2.994,41,3.508,42,3.707,43,2.994,44,2.654,46,2.994,47,3.449,48,2.156,70,1.963,97,2.654,112,3.286,232,3.57,266,2.156,348,3.175,349,3.449,352,2.994,444,3.449,445,3.449,446,4.14,447,4.14,448,4.14,449,4.14]],["title/classes/PostRelationConflict.html",[21,0.143,152,0.981]],["body/classes/PostRelationConflict.html",[3,0.433,4,0.383,5,0.291,11,0.034,15,0.721,20,0.776,21,0.288,26,0.023,27,0.023,71,0.861,74,1.369,79,1.023,136,1.113,137,1.321,138,1.113,139,2.224,140,1.93,141,2.741,142,2.124,143,1.321,144,1.321,145,1.321,146,1.93,147,1.442,148,1.442,149,1.767,150,1.768,151,1.93,152,1.369,153,1.023,154,1.442,155,1.321,156,1.023,157,1.93,158,1.93,159,1.023,160,1.113,161,1.023,162,1.113,163,1.321,164,1.023]],["title/injectables/PostService.html",[56,1.837,348,1.663]],["body/injectables/PostService.html",[3,0.187,4,0.166,5,0.125,7,0.782,8,1.364,11,0.034,12,1.582,14,2.391,15,0.971,16,1.273,17,0.571,20,0.187,21,0.106,24,2.627,26,0.012,27,0.012,48,0.749,56,1.364,57,1.04,70,0.682,74,0.442,75,1.027,76,1.364,77,0.827,78,1.04,79,1.282,80,1.574,81,1.549,82,0.749,84,0.922,88,1.519,100,1.519,106,2.796,110,2.186,111,3.615,124,3.841,125,0.749,136,0.481,139,0.863,142,0.481,149,1.746,150,0.571,152,0.442,153,0.442,156,0.442,159,0.442,160,1.886,161,0.442,162,1.011,164,0.442,165,2.298,174,2.298,184,3.017,185,2.535,195,3.697,206,1.04,207,1.198,235,5.046,236,1.974,237,1.519,238,1.974,239,1.974,240,1.974,241,1.974,242,1.974,244,1.974,245,1.974,248,1.04,265,2.903,266,2.627,267,3.233,268,3.98,273,1.714,279,1.714,280,1.04,291,1.974,292,3.23,294,1.04,306,1.974,313,1.974,320,1.974,325,3.476,326,2.535,329,1.519,335,1.974,339,1.198,348,1.234,350,1.974,351,1.198,352,1.04,353,1.198,355,1.04,356,1.198,357,1.198,358,1.198,383,1.974,385,2.518,386,1.714,387,4.503,389,2.518,391,4.835,397,3.476,407,4.202,413,1.974,418,1.198,450,1.198,451,2.37,452,3.506,453,2.37,454,2.37,455,1.438,456,3.506,457,1.438,458,2.37,459,1.438,460,1.438,461,1.438,462,2.37,463,1.438,464,1.438,465,1.438,466,1.438,467,1.438,468,1.438,469,2.37,470,1.438,471,2.37,472,1.438,473,1.438,474,1.438,475,1.438,476,1.198,477,1.438,478,1.438,479,1.438,480,2.37,481,4.172,482,2.37,483,1.438,484,1.438,485,1.438,486,1.438,487,1.438,488,1.438,489,1.438,490,1.438,491,1.438,492,2.518,493,1.438,494,2.37,495,2.37,496,2.37,497,2.37,498,1.198,499,1.438,500,1.438,501,2.37,502,3.023,503,2.37,504,4.611,505,5.044,506,1.438,507,1.438,508,1.438,509,1.438,510,1.438,511,1.438,512,2.37,513,1.438,514,1.438,515,1.438,516,3.877,517,1.438,518,1.438,519,1.198,520,1.04,521,1.198,522,2.37,523,1.438,524,2.37,525,2.37,526,1.438,527,1.438,528,1.438,529,1.438,530,1.438,531,2.518,532,1.438,533,2.37,534,1.438,535,1.438,536,3.023,537,1.438,538,1.438,539,1.438,540,1.438,541,2.37,542,1.438,543,1.438,544,1.438,545,1.438,546,2.37,547,2.37,548,1.438,549,1.438,550,1.438,551,1.438]],["title/classes/PostSlugValidationError.html",[21,0.143,159,0.981]],["body/classes/PostSlugValidationError.html",[3,0.432,4,0.382,5,0.29,11,0.034,15,0.72,20,0.775,21,0.288,26,0.023,27,0.023,71,0.86,74,1.367,79,1.367,136,1.111,137,1.319,138,1.111,139,2.223,140,1.928,141,2.741,142,2.123,143,1.319,144,1.319,145,1.319,146,1.928,147,1.439,148,1.439,149,1.766,150,1.319,151,1.439,152,1.021,153,1.021,154,1.439,155,1.319,156,1.021,157,2.173,158,2.173,159,1.367,160,1.111,161,1.021,162,1.111,163,1.319,164,1.021]],["title/coverage.html",[552,3.608]],["body/coverage.html",[0,2.413,1,2.192,5,0.298,6,2.848,11,0.033,18,1.781,21,0.28,26,0.023,27,0.023,34,1.968,56,2.61,58,2.848,68,2.473,70,1.621,72,2.928,81,1.05,82,1.781,101,2.192,106,1.621,112,2.192,114,3.778,123,2.907,136,1.143,137,2.383,142,1.143,152,1.05,153,1.05,156,1.05,159,1.05,161,1.05,164,1.05,165,1.781,166,3.245,167,2.848,174,1.781,175,2.848,182,2.192,183,2.848,188,2.192,189,2.848,232,2.192,233,2.848,348,1.781,450,2.848,492,5.288,552,2.848,553,3.419,554,3.419,555,5.089,556,2.848,557,5.796,558,2.848,559,5.42,560,3.778,561,4.535,562,2.848,563,3.419,564,3.419,565,6.005,566,5.914,567,3.419,568,3.419,569,3.419,570,3.419,571,2.848,572,3.419,573,3.419]],["title/dependencies.html",[31,1.996,574,2.232]],["body/dependencies.html",[11,0.034,17,1.748,21,0.238,26,0.027,27,0.027,31,2.294,48,2.294,50,3.67,100,2.824,103,3.67,173,2.824,181,2.824,204,3.185,230,3.67,476,3.67,575,4.405,576,5.724,577,4.405,578,4.405,579,4.405,580,4.405,581,3.67,582,4.405,583,4.405,584,4.405,585,4.405,586,4.405,587,4.405,588,4.405,589,4.405,590,4.405,591,4.405,592,4.405,593,4.405,594,4.405]],["title/miscellaneous/functions.html",[595,1.395,596,3.193]],["body/miscellaneous/functions.html",[7,1.214,11,0.032,14,2.622,15,0.952,26,0.028,27,0.028,34,3.384,72,2.7,81,1.442,115,3.91,195,3.008,265,2.7,266,2.444,267,3.008,556,3.91,571,4.608,595,2.444,596,3.91,597,4.693,598,3.394,599,4.693]],["title/index.html",[7,0.693,64,1.717,600,1.937]],["body/index.html",[5,0.355,11,0.032,14,2.293,15,0.368,26,0.021,27,0.017,31,1.185,60,1.895,62,3.267,64,2.179,65,1.895,69,3.392,70,1.078,74,1.044,76,1.956,79,0.699,81,0.699,106,1.078,143,0.903,144,0.903,149,1.755,160,1.362,162,1.882,191,1.895,209,3.67,210,1.895,215,1.895,234,2.832,237,3.253,247,3.803,249,2.61,262,1.895,265,1.309,273,1.645,279,2.459,280,2.459,281,1.895,288,1.895,294,2.459,296,2.944,308,2.944,326,1.645,329,1.458,367,1.895,415,1.645,441,1.895,520,2.459,600,1.645,601,3.392,602,2.274,603,5.714,604,3.4,605,2.274,606,4.518,607,2.274,608,2.274,609,2.274,610,3.4,611,1.895,612,5.408,613,4.072,614,5.075,615,5.408,616,4.072,617,3.4,618,2.274,619,2.274,620,3.4,621,4.072,622,2.274,623,3.4,624,3.4,625,3.4,626,3.4,627,3.4,628,2.274,629,4.518,630,2.832,631,2.274,632,1.895,633,2.274,634,3.4,635,2.274,636,2.274,637,4.518,638,3.4,639,3.4,640,4.072,641,2.274,642,3.4,643,3.4,644,3.4,645,3.4,646,4.518,647,4.072,648,1.895,649,3.4,650,2.274,651,2.274,652,1.645,653,2.274,654,2.274,655,2.274,656,2.274,657,3.4,658,3.4,659,3.4,660,2.274,661,1.645,662,2.274,663,3.4,664,2.274,665,2.274,666,2.274,667,2.274,668,4.072,669,3.4,670,2.274,671,3.4,672,2.274,673,2.274,674,2.274,675,2.274,676,2.274,677,2.274,678,1.895,679,1.895,680,2.274,681,2.274,682,2.274,683,2.274,684,2.274,685,2.274,686,2.274,687,2.274,688,2.274,689,2.274,690,2.274,691,3.4,692,2.274,693,1.895,694,3.4,695,2.274,696,2.274,697,3.267,698,1.895,699,2.274,700,3.4,701,2.274,702,3.4,703,3.4,704,4.518,705,2.274,706,2.274,707,2.274,708,2.274,709,2.832,710,2.274,711,2.274,712,1.895,713,2.832,714,2.274,715,2.274,716,2.274,717,2.274,718,1.895,719,2.274,720,2.274,721,2.274,722,2.274,723,2.274,724,2.274,725,2.274,726,3.4,727,2.274,728,2.274,729,2.274,730,2.274,731,3.4,732,3.4,733,2.274,734,2.274,735,2.274,736,2.274,737,1.895,738,2.274,739,2.274,740,2.274,741,2.274,742,2.274,743,2.274,744,3.4,745,2.274,746,2.274,747,2.274,748,1.895,749,2.274,750,2.274,751,1.895,752,2.274,753,2.274,754,2.274,755,1.895,756,2.274,757,2.274,758,2.274,759,2.274,760,2.274,761,1.895,762,1.895,763,2.274,764,2.61,765,1.895,766,1.895,767,1.645,768,1.645,769,1.645,770,1.895]],["title/license.html",[64,1.717,600,1.937,764,1.717]],["body/license.html",[4,0.581,5,0.392,11,0.021,12,0.413,16,0.348,21,0.06,26,0.012,27,0.012,44,0.862,68,2.085,75,0.583,76,0.774,80,0.701,105,2.157,133,1.121,138,0.45,163,1.484,247,1.622,248,0.973,266,1.168,296,0.973,308,0.973,316,1.121,329,0.862,363,3.364,380,2.803,386,0.973,415,3.476,498,1.121,519,1.121,520,0.973,521,1.121,531,1.121,581,1.868,611,1.121,630,2.402,632,3.115,648,2.402,661,0.973,678,1.121,679,4.588,693,1.868,697,0.973,698,1.121,709,2.803,712,1.121,713,1.121,718,1.121,737,1.121,748,2.402,751,2.402,755,2.402,761,1.121,762,1.121,764,3.861,765,1.121,766,3.882,767,2.433,768,2.085,769,2.085,770,1.121,771,1.345,772,1.345,773,1.345,774,4.66,775,5.147,776,3.365,777,3.739,778,1.345,779,5.314,780,4.808,781,1.345,782,1.345,783,1.345,784,4.808,785,5.048,786,3.739,787,4.808,788,2.243,789,1.345,790,3.739,791,1.345,792,1.345,793,1.345,794,3.365,795,1.345,796,1.345,797,3.365,798,2.243,799,2.243,800,1.345,801,2.884,802,2.243,803,2.243,804,1.345,805,3.365,806,2.243,807,4.038,808,1.345,809,2.243,810,1.345,811,1.345,812,1.345,813,1.345,814,1.345,815,1.345,816,1.345,817,2.884,818,1.345,819,2.884,820,2.243,821,5.147,822,1.345,823,4.038,824,4.66,825,3.365,826,2.243,827,1.345,828,2.884,829,1.345,830,1.345,831,1.345,832,1.345,833,1.345,834,2.243,835,1.345,836,6.023,837,2.884,838,1.345,839,4.66,840,2.243,841,1.345,842,2.243,843,1.345,844,5.507,845,5.561,846,1.345,847,1.345,848,1.345,849,1.345,850,1.345,851,1.345,852,2.243,853,2.243,854,2.884,855,1.345,856,1.345,857,1.345,858,1.345,859,1.345,860,1.345,861,3.365,862,3.739,863,1.345,864,2.243,865,3.365,866,2.243,867,3.739,868,2.243,869,1.345,870,1.345,871,2.884,872,1.345,873,1.345,874,1.345,875,1.345,876,2.243,877,1.345,878,1.345,879,2.884,880,1.345,881,1.345,882,2.884,883,1.345,884,1.345,885,1.345,886,3.365,887,4.808,888,1.345,889,1.345,890,2.243,891,4.487,892,2.884,893,2.243,894,2.243,895,2.243,896,2.243,897,2.243,898,2.243,899,2.884,900,2.243,901,2.243,902,2.243,903,2.243,904,1.345,905,2.243,906,2.243,907,1.345,908,1.345,909,3.739,910,4.283,911,2.884,912,2.243,913,1.345,914,2.243,915,2.243,916,1.345,917,1.345,918,2.884,919,2.243,920,1.345,921,1.345,922,1.345,923,2.884,924,1.345,925,1.345,926,1.345,927,2.243,928,2.243,929,1.345,930,1.345,931,1.345,932,1.345,933,1.345,934,1.345,935,1.345,936,2.243,937,1.345,938,1.345,939,1.345,940,1.345,941,1.345,942,1.345,943,1.345,944,1.345,945,1.345,946,1.345,947,1.345,948,1.345,949,1.345,950,4.487,951,1.345,952,1.345,953,1.345,954,1.345,955,1.345,956,3.365,957,2.243,958,3.365,959,1.345,960,1.345,961,3.365,962,1.345,963,1.345,964,1.345,965,2.884,966,1.345,967,1.345,968,2.243,969,2.243,970,1.345,971,1.345,972,1.345,973,1.345,974,2.243,975,1.345,976,1.345,977,3.739,978,1.345,979,1.345,980,1.345,981,1.345,982,1.345,983,1.345,984,3.365,985,1.345,986,1.345,987,1.345,988,1.345,989,1.345,990,1.345,991,1.345,992,1.345,993,1.345,994,1.345,995,1.345,996,2.243,997,1.345,998,1.345,999,2.243,1000,1.345,1001,1.345,1002,1.345,1003,1.345,1004,1.345,1005,1.345,1006,1.345,1007,1.345,1008,1.345,1009,3.365,1010,2.884,1011,2.884,1012,2.884,1013,2.243,1014,2.243,1015,2.884,1016,2.243,1017,2.243,1018,2.243,1019,1.345,1020,1.345,1021,1.345,1022,1.345,1023,1.345,1024,1.345,1025,1.345,1026,2.243,1027,1.345,1028,1.345,1029,1.345,1030,3.739,1031,1.345,1032,1.345,1033,1.345,1034,1.345,1035,1.345,1036,1.345,1037,1.345,1038,1.345,1039,1.345,1040,3.739,1041,1.345,1042,1.345,1043,1.345,1044,1.345,1045,1.345,1046,1.345,1047,1.345,1048,1.345,1049,1.345,1050,1.345,1051,1.345,1052,1.345,1053,1.345,1054,1.345,1055,1.345,1056,1.345,1057,1.345,1058,2.884,1059,1.345,1060,1.345,1061,1.345,1062,2.243,1063,1.345,1064,1.345,1065,1.345,1066,1.345,1067,1.345,1068,1.345,1069,1.345,1070,1.345,1071,1.345,1072,1.345,1073,1.345,1074,1.345,1075,1.345,1076,1.345,1077,1.345,1078,2.243,1079,1.345,1080,1.345,1081,1.345,1082,2.243,1083,2.243,1084,1.345,1085,1.345,1086,1.345,1087,1.345,1088,1.345,1089,1.345,1090,1.345,1091,1.345,1092,1.345,1093,1.345,1094,1.345,1095,1.345,1096,1.345,1097,1.121,1098,1.121,1099,1.345,1100,1.345,1101,1.345,1102,1.345,1103,1.345,1104,1.345]],["title/modules.html",[30,2.256]],["body/modules.html",[11,0.029,26,0.029,27,0.029,29,3.114,30,2.531,40,2.796,41,2.796,661,3.513,697,4.081,1105,5.644,1106,5.644,1107,5.966,1108,4.859]],["title/overview.html",[1109,3.608]],["body/overview.html",[2,2.083,11,0.032,18,2.978,26,0.027,27,0.027,28,2.083,29,4.046,30,2.288,31,2.288,32,3.177,33,3.177,34,2.528,35,3.177,36,3.177,37,3.66,38,3.66,39,3.66,40,3.29,41,3.501,42,3.845,43,3.177,44,2.816,57,3.177,71,1.136,348,2.978,444,3.66,445,3.66,1109,3.66,1110,5.317,1111,4.393,1112,4.393]],["title/properties.html",[73,1.66,574,2.232]],["body/properties.html",[11,0.033,26,0.029,27,0.029,62,3.423,73,2.05,125,2.465,138,1.583,209,3.423,237,3.034,249,3.034,601,3.943,764,3.034,767,3.423,768,3.423,769,3.423,1097,3.943,1098,3.943,1113,4.733,1114,4.733,1115,4.733,1116,4.733,1117,4.733]],["title/miscellaneous/typealiases.html",[595,1.395,1118,3.833]],["body/miscellaneous/typealiases.html",[7,1.239,11,0.029,26,0.029,27,0.029,72,2.755,81,1.719,99,4.047,110,4.047,123,3.069,134,4.662,355,4.047,595,2.494,598,3.463,1119,4.788,1120,3.989,1121,4.788,1122,4.788,1123,4.788]],["title/miscellaneous/variables.html",[595,1.395,652,2.772]],["body/miscellaneous/variables.html",[7,1.082,11,0.033,26,0.027,27,0.027,72,2.406,75,2.235,77,2.406,80,2.178,85,3.745,101,3.307,106,2.446,112,3.307,113,3.484,123,2.68,125,2.178,135,3.484,149,1.585,165,2.178,166,2.969,174,2.178,249,2.68,371,4.867,372,3.484,373,3.484,374,3.484,375,3.484,376,3.484,377,3.484,378,3.484,379,3.484,429,3.484,430,3.484,431,3.484,558,4.298,560,4.867,562,4.298,595,2.178,598,3.024,652,3.024,1120,3.484,1124,5.159,1125,4.182,1126,4.182]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":492,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["0.14.1",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["0.5.11",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":531,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["1.0.0",{"_index":1113,"title":{},"body":{"properties.html":{}}}],["1.6.6",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["10.0.6",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["10.2.3",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["10.3.8",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["101",{"_index":365,"title":{},"body":{"controllers/PostController.html":{}}}],["1024",{"_index":221,"title":{},"body":{"controllers/HealthController.html":{}}}],["128",{"_index":226,"title":{},"body":{"controllers/HealthController.html":{}}}],["13",{"_index":1112,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1111,"title":{},"body":{"overview.html":{}}}],["2.0",{"_index":769,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["2/2",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":300,"title":{},"body":{"controllers/PostController.html":{}}}],["2004",{"_index":772,"title":{},"body":{"license.html":{}}}],["201",{"_index":255,"title":{},"body":{"controllers/PostController.html":{}}}],["2024",{"_index":1096,"title":{},"body":{"license.html":{}}}],["3",{"_index":1110,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":220,"title":{},"body":{"controllers/HealthController.html":{}}}],["400",{"_index":283,"title":{},"body":{"controllers/PostController.html":{}}}],["404",{"_index":259,"title":{},"body":{"controllers/PostController.html":{}}}],["409",{"_index":272,"title":{},"body":{"controllers/PostController.html":{}}}],["422",{"_index":287,"title":{},"body":{"controllers/PostController.html":{}}}],["50",{"_index":812,"title":{},"body":{"license.html":{}}}],["500",{"_index":261,"title":{},"body":{"controllers/PostController.html":{}}}],["5000",{"_index":218,"title":{},"body":{"controllers/HealthController.html":{}}}],["7.3.1",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["8.4.0",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":498,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["9]+)*$/.test(slug",{"_index":499,"title":{},"body":{"injectables/PostService.html":{}}}],["__v",{"_index":502,"title":{},"body":{"injectables/PostService.html":{}}}],["__v\").exec",{"_index":490,"title":{},"body":{"injectables/PostService.html":{}}}],["_id",{"_index":124,"title":{},"body":{"classes/BlogPostComment.html":{},"injectables/PostService.html":{}}}],["_id\").exec",{"_index":510,"title":{},"body":{"injectables/PostService.html":{}}}],["above",{"_index":988,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":1060,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":1058,"title":{},"body":{"license.html":{}}}],["accounts",{"_index":705,"title":{},"body":{"index.html":{}}}],["act",{"_index":1066,"title":{},"body":{"license.html":{}}}],["acting",{"_index":792,"title":{},"body":{"license.html":{}}}],["actions",{"_index":727,"title":{},"body":{"index.html":{}}}],["acts",{"_index":1038,"title":{},"body":{"license.html":{}}}],["add",{"_index":247,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["addcomment",{"_index":236,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["addcomment(@param(\"id",{"_index":435,"title":{},"body":{"controllers/PostController.html":{}}}],["addcomment(postid",{"_index":245,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["added",{"_index":434,"title":{},"body":{"controllers/PostController.html":{}}}],["added.'})@apiresponse({status",{"_index":258,"title":{},"body":{"controllers/PostController.html":{}}}],["addendum",{"_index":976,"title":{},"body":{"license.html":{}}}],["additional",{"_index":977,"title":{},"body":{"license.html":{}}}],["additions",{"_index":863,"title":{},"body":{"license.html":{}}}],["adipiscing",{"_index":378,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["advised",{"_index":1056,"title":{},"body":{"license.html":{}}}],["against",{"_index":928,"title":{},"body":{"license.html":{}}}],["agree",{"_index":1069,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":1012,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":993,"title":{},"body":{"license.html":{}}}],["aliases",{"_index":1119,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":933,"title":{},"body":{"license.html":{}}}],["allows",{"_index":604,"title":{},"body":{"index.html":{}}}],["alone",{"_index":924,"title":{},"body":{"license.html":{}}}],["along",{"_index":966,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":975,"title":{},"body":{"license.html":{}}}],["already",{"_index":273,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{}}}],["amet",{"_index":376,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":1063,"title":{},"body":{"license.html":{}}}],["annotations",{"_index":849,"title":{},"body":{"license.html":{}}}],["apache",{"_index":767,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":646,"title":{},"body":{"index.html":{}}}],["api.to",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["api/v1/posts",{"_index":234,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["api/v1/posts/:id",{"_index":671,"title":{},"body":{"index.html":{}}}],["api/v1/posts/:id/relations",{"_index":673,"title":{},"body":{"index.html":{}}}],["api/v1/posts/relation/?sourcepostid&relationpostid",{"_index":674,"title":{},"body":{"index.html":{}}}],["api/v1/posts?page&limit",{"_index":667,"title":{},"body":{"index.html":{}}}],["api/v1/posts?slug=:slug",{"_index":670,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":342,"title":{},"body":{"controllers/PostController.html":{}}}],["apioperation",{"_index":343,"title":{},"body":{"controllers/PostController.html":{}}}],["apiparam",{"_index":344,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{}}}],["apiquery",{"_index":345,"title":{},"body":{"controllers/PostController.html":{}}}],["apiresponse",{"_index":346,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags",{"_index":347,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags(\"post",{"_index":359,"title":{},"body":{"controllers/PostController.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appear",{"_index":971,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":842,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":1010,"title":{},"body":{"license.html":{}}}],["application",{"_index":683,"title":{},"body":{"index.html":{}}}],["applies",{"_index":917,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1078,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1087,"title":{},"body":{"license.html":{}}}],["appropriateness",{"_index":1025,"title":{},"body":{"license.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archives",{"_index":1095,"title":{},"body":{"license.html":{}}}],["arising",{"_index":1045,"title":{},"body":{"license.html":{}}}],["ascending",{"_index":688,"title":{},"body":{"index.html":{}}}],["asserted",{"_index":1075,"title":{},"body":{"license.html":{}}}],["associated",{"_index":316,"title":{},"body":{"controllers/PostController.html":{},"license.html":{}}}],["assume",{"_index":1027,"title":{},"body":{"license.html":{}}}],["async",{"_index":235,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["attach",{"_index":1079,"title":{},"body":{"license.html":{}}}],["attached",{"_index":841,"title":{},"body":{"license.html":{}}}],["attribution",{"_index":956,"title":{},"body":{"license.html":{}}}],["authentication",{"_index":695,"title":{},"body":{"index.html":{}}}],["author",{"_index":125,"title":{},"body":{"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorized",{"_index":788,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":837,"title":{},"body":{"license.html":{}}}],["auto",{"_index":127,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["available",{"_index":661,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["await",{"_index":387,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["b",{"_index":946,"title":{},"body":{"license.html":{}}}],["based",{"_index":308,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["basic",{"_index":1114,"title":{},"body":{"properties.html":{}}}],["basis",{"_index":1014,"title":{},"body":{"license.html":{}}}],["behalf",{"_index":867,"title":{},"body":{"license.html":{}}}],["below",{"_index":843,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":816,"title":{},"body":{"license.html":{}}}],["better",{"_index":744,"title":{},"body":{"index.html":{}}}],["between",{"_index":280,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{}}}],["bind",{"_index":859,"title":{},"body":{"license.html":{}}}],["blog",{"_index":249,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["blogpost",{"_index":70,"title":{"classes/BlogPost.html":{}},"body":{"classes/BlogPost.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"index.html":{}}}],["blogpost.name",{"_index":449,"title":{},"body":{"modules/PostModule.html":{}}}],["blogpostcomment",{"_index":82,"title":{"classes/BlogPostComment.html":{}},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["blogpostcommentdocument",{"_index":134,"title":{},"body":{"classes/BlogPostComment.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostcommentschema",{"_index":101,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostdocument",{"_index":110,"title":{},"body":{"classes/BlogPost.html":{},"injectables/PostService.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostmodel",{"_index":458,"title":{},"body":{"injectables/PostService.html":{}}}],["blogpostschema",{"_index":112,"title":{},"body":{"classes/BlogPost.html":{},"modules/PostModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostschema.pre(\"save",{"_index":119,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogposttitle",{"_index":599,"title":{},"body":{"miscellaneous/functions.html":{}}}],["body",{"_index":339,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["boilerplate",{"_index":1080,"title":{},"body":{"license.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brackets",{"_index":1083,"title":{},"body":{"license.html":{}}}],["browse",{"_index":1107,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1105,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":757,"title":{},"body":{"index.html":{}}}],["build",{"_index":658,"title":{},"body":{"index.html":{}}}],["built",{"_index":609,"title":{},"body":{"index.html":{}}}],["c",{"_index":953,"title":{},"body":{"license.html":{}}}],["cant",{"_index":524,"title":{},"body":{"injectables/PostService.html":{}}}],["carry",{"_index":948,"title":{},"body":{"license.html":{}}}],["catch",{"_index":389,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["cause",{"_index":803,"title":{},"body":{"license.html":{}}}],["changed",{"_index":952,"title":{},"body":{"license.html":{}}}],["character",{"_index":1044,"title":{},"body":{"license.html":{}}}],["charge",{"_index":899,"title":{},"body":{"license.html":{}}}],["check",{"_index":192,"title":{},"body":{"controllers/HealthController.html":{}}}],["choose",{"_index":611,"title":{},"body":{"index.html":{},"license.html":{}}}],["circular",{"_index":154,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["claim",{"_index":930,"title":{},"body":{"license.html":{}}}],["claims",{"_index":919,"title":{},"body":{"license.html":{}}}],["class",{"_index":21,"title":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":71,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"overview.html":{}}}],["clone",{"_index":624,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":444,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":445,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cms",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"properties.html":{}}}],["code",{"_index":748,"title":{},"body":{"index.html":{},"license.html":{}}}],["combination",{"_index":925,"title":{},"body":{"license.html":{}}}],["comment",{"_index":248,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"license.html":{}}}],["comment'})@apiresponse({status",{"_index":301,"title":{},"body":{"controllers/PostController.html":{}}}],["comment._id.tostring",{"_index":549,"title":{},"body":{"injectables/PostService.html":{}}}],["comment.dto",{"_index":357,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["comment.dto.stub.ts",{"_index":558,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":167,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:10",{"_index":170,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:6",{"_index":169,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.schema",{"_index":102,"title":{},"body":{"classes/BlogPost.html":{}}}],["commentdoesntexist",{"_index":136,"title":{"classes/CommentDoesntExist.html":{}},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["commentdoesntexist(`comment",{"_index":550,"title":{},"body":{"injectables/PostService.html":{}}}],["commentid",{"_index":292,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["commentindex",{"_index":547,"title":{},"body":{"injectables/PostService.html":{}}}],["comments",{"_index":74,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["comments'})@apiresponse({status",{"_index":318,"title":{},"body":{"controllers/PostController.html":{}}}],["commercial",{"_index":1053,"title":{},"body":{"license.html":{}}}],["common",{"_index":796,"title":{},"body":{"license.html":{}}}],["communication",{"_index":871,"title":{},"body":{"license.html":{}}}],["community",{"_index":636,"title":{},"body":{"index.html":{}}}],["compiled",{"_index":833,"title":{},"body":{"license.html":{}}}],["completed",{"_index":731,"title":{},"body":{"index.html":{}}}],["compliance",{"_index":1099,"title":{},"body":{"license.html":{}}}],["complies",{"_index":982,"title":{},"body":{"license.html":{}}}],["compose",{"_index":657,"title":{},"body":{"index.html":{}}}],["compression",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":1050,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":775,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":827,"title":{},"body":{"license.html":{}}}],["configure",{"_index":364,"title":{},"body":{"controllers/PostController.html":{}}}],["conflicts",{"_index":151,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["connection",{"_index":643,"title":{},"body":{"index.html":{}}}],["consectetur",{"_index":377,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["consequential",{"_index":1043,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":1065,"title":{},"body":{"license.html":{}}}],["conspicuously",{"_index":883,"title":{},"body":{"license.html":{}}}],["const",{"_index":111,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["constitutes",{"_index":934,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":206,"title":{},"body":{"controllers/HealthController.html":{},"classes/PostError.html":{},"injectables/PostService.html":{}}}],["constructor(@injectmodel(blogpost.name",{"_index":477,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(blogpostmodel",{"_index":455,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(message",{"_index":147,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostController.html":{}}}],["construed",{"_index":978,"title":{},"body":{"license.html":{}}}],["contained",{"_index":963,"title":{},"body":{"license.html":{}}}],["containers",{"_index":659,"title":{},"body":{"index.html":{}}}],["content",{"_index":75,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":972,"title":{},"body":{"license.html":{}}}],["contract",{"_index":806,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":754,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":862,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":923,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":755,"title":{},"body":{"index.html":{},"license.html":{}}}],["contributor",{"_index":887,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":935,"title":{},"body":{"license.html":{}}}],["control",{"_index":794,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":795,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{}},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["controller(\"/api/v1/posts",{"_index":361,"title":{},"body":{"controllers/PostController.html":{}}}],["controller(\"health",{"_index":205,"title":{},"body":{"controllers/HealthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["conversions",{"_index":835,"title":{},"body":{"license.html":{}}}],["copies",{"_index":941,"title":{},"body":{"license.html":{}}}],["copy",{"_index":648,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":785,"title":{},"body":{"license.html":{}}}],["counterclaim",{"_index":931,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":552,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":237,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{},"properties.html":{}}}],["create(@body",{"_index":384,"title":{},"body":{"controllers/PostController.html":{}}}],["create(createpostdto",{"_index":269,"title":{},"body":{"controllers/PostController.html":{}}}],["createblogpost",{"_index":451,"title":{},"body":{"injectables/PostService.html":{}}}],["createblogpost(@body",{"_index":478,"title":{},"body":{"injectables/PostService.html":{}}}],["createblogpost(createpostdto",{"_index":460,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdto",{"_index":165,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createcommentdto.author",{"_index":543,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdto.content",{"_index":544,"title":{},"body":{"injectables/PostService.html":{}}}],["created",{"_index":669,"title":{},"body":{"index.html":{}}}],["createdat\").select",{"_index":509,"title":{},"body":{"injectables/PostService.html":{}}}],["createdblogpost",{"_index":355,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/typealiases.html":{}}}],["createpostdto",{"_index":174,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createpostdtostub",{"_index":560,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createrelation",{"_index":238,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createrelation(@query",{"_index":420,"title":{},"body":{"controllers/PostController.html":{}}}],["createrelation(createrelationshipdto",{"_index":276,"title":{},"body":{"controllers/PostController.html":{}}}],["createrelation(sourcepostid",{"_index":462,"title":{},"body":{"injectables/PostService.html":{}}}],["createrelationshipdto",{"_index":182,"title":{"classes/CreateRelationshipDto.html":{}},"body":{"classes/CreateRelationshipDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["createrelationshipdto.relationpostid",{"_index":422,"title":{},"body":{"controllers/PostController.html":{}}}],["creates",{"_index":143,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["cross",{"_index":929,"title":{},"body":{"license.html":{}}}],["current",{"_index":685,"title":{},"body":{"index.html":{}}}],["custom",{"_index":441,"title":{},"body":{"classes/PostError.html":{},"index.html":{}}}],["customary",{"_index":1004,"title":{},"body":{"license.html":{}}}],["d",{"_index":959,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1040,"title":{},"body":{"license.html":{}}}],["data",{"_index":252,"title":{},"body":{"controllers/PostController.html":{}}}],["database",{"_index":654,"title":{},"body":{"index.html":{}}}],["date",{"_index":76,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{}}}],["default",{"_index":85,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":1071,"title":{},"body":{"license.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"license.html":{}}}],["definition",{"_index":798,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":778,"title":{},"body":{"license.html":{}}}],["delete",{"_index":294,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{}}}],["delete(\"/:id",{"_index":410,"title":{},"body":{"controllers/PostController.html":{}}}],["delete(\"/:postid/comments/:commentid",{"_index":437,"title":{},"body":{"controllers/PostController.html":{}}}],["delete('/:id')@apioperation({summary",{"_index":307,"title":{},"body":{"controllers/PostController.html":{}}}],["delete('/:postid/comments/:commentid')@apioperation({summary",{"_index":293,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecomment",{"_index":239,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deletecomment(postid",{"_index":291,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deleted",{"_index":299,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost",{"_index":240,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deletepost'})@apiparam({name",{"_index":310,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@param(\"id",{"_index":411,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":306,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deletes",{"_index":672,"title":{},"body":{"index.html":{}}}],["deliberate",{"_index":1035,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployment",{"_index":738,"title":{},"body":{"index.html":{}}}],["derivative",{"_index":844,"title":{},"body":{"license.html":{}}}],["derived",{"_index":846,"title":{},"body":{"license.html":{}}}],["describing",{"_index":1005,"title":{},"body":{"license.html":{}}}],["description",{"_index":138,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":885,"title":{},"body":{"license.html":{}}}],["desired",{"_index":645,"title":{},"body":{"index.html":{}}}],["details",{"_index":644,"title":{},"body":{"index.html":{}}}],["determining",{"_index":1024,"title":{},"body":{"license.html":{}}}],["different",{"_index":718,"title":{},"body":{"index.html":{},"license.html":{}}}],["direct",{"_index":801,"title":{},"body":{"license.html":{}}}],["direction",{"_index":804,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":1008,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":880,"title":{},"body":{"license.html":{}}}],["discussions",{"_index":753,"title":{},"body":{"index.html":{}}}],["disk",{"_index":211,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":201,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":906,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":909,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":965,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":777,"title":{},"body":{"license.html":{}}}],["docker",{"_index":615,"title":{},"body":{"index.html":{}}}],["document",{"_index":783,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"license.html":{}}}],["doe",{"_index":430,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["doesn't",{"_index":505,"title":{},"body":{"injectables/PostService.html":{}}}],["doesnt",{"_index":285,"title":{},"body":{"controllers/PostController.html":{}}}],["dolor",{"_index":374,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":1086,"title":{},"body":{"license.html":{}}}],["download",{"_index":635,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":350,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["each",{"_index":709,"title":{},"body":{"index.html":{},"license.html":{}}}],["easier",{"_index":1093,"title":{},"body":{"license.html":{}}}],["editorial",{"_index":847,"title":{},"body":{"license.html":{}}}],["efficient",{"_index":741,"title":{},"body":{"index.html":{}}}],["elaborations",{"_index":850,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":868,"title":{},"body":{"license.html":{}}}],["elit",{"_index":379,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":494,"title":{},"body":{"injectables/PostService.html":{}}}],["enclosed",{"_index":1082,"title":{},"body":{"license.html":{}}}],["end",{"_index":1077,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":680,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":665,"title":{},"body":{"index.html":{}}}],["engage",{"_index":752,"title":{},"body":{"index.html":{}}}],["entities",{"_index":793,"title":{},"body":{"license.html":{}}}],["entity",{"_index":787,"title":{},"body":{"license.html":{}}}],["env",{"_index":640,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":639,"title":{},"body":{"index.html":{}}}],["eq",{"_index":500,"title":{},"body":{"injectables/PostService.html":{}}}],["err",{"_index":514,"title":{},"body":{"injectables/PostService.html":{}}}],["error",{"_index":139,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{}}}],["errors",{"_index":158,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["etc",{"_index":702,"title":{},"body":{"index.html":{}}}],["even",{"_index":1055,"title":{},"body":{"license.html":{}}}],["event",{"_index":1031,"title":{},"body":{"license.html":{}}}],["example",{"_index":380,"title":{},"body":{"controllers/PostController.html":{},"license.html":{}}}],["example:example",{"_index":653,"title":{},"body":{"index.html":{}}}],["examples",{"_index":253,"title":{},"body":{"controllers/PostController.html":{}}}],["except",{"_index":911,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":882,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":898,"title":{},"body":{"license.html":{}}}],["exec",{"_index":503,"title":{},"body":{"injectables/PostService.html":{}}}],["executed",{"_index":994,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":1029,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":818,"title":{},"body":{"license.html":{}}}],["exist",{"_index":407,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["exist.'})@apiresponse({status",{"_index":286,"title":{},"body":{"controllers/PostController.html":{}}}],["existing",{"_index":140,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["existingpost",{"_index":480,"title":{},"body":{"injectables/PostService.html":{}}}],["exists",{"_index":383,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["exists.'})@apiresponse({status",{"_index":274,"title":{},"body":{"controllers/PostController.html":{}}}],["explicitly",{"_index":985,"title":{},"body":{"license.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["express",{"_index":581,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":141,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["failed",{"_index":263,"title":{},"body":{"controllers/PostController.html":{}}}],["failed.'})@apiresponse({status",{"_index":284,"title":{},"body":{"controllers/PostController.html":{}}}],["failexample",{"_index":381,"title":{},"body":{"controllers/PostController.html":{}}}],["failexample2",{"_index":433,"title":{},"body":{"controllers/PostController.html":{}}}],["failure",{"_index":1051,"title":{},"body":{"license.html":{}}}],["false",{"_index":396,"title":{},"body":{"controllers/PostController.html":{}}}],["false})@apiquery({name",{"_index":330,"title":{},"body":{"controllers/PostController.html":{}}}],["false})@apiresponse({status",{"_index":331,"title":{},"body":{"controllers/PostController.html":{}}}],["faster",{"_index":740,"title":{},"body":{"index.html":{}}}],["feature",{"_index":759,"title":{},"body":{"index.html":{}}}],["fee",{"_index":1059,"title":{},"body":{"license.html":{}}}],["fields",{"_index":1081,"title":{},"body":{"license.html":{}}}],["fifty",{"_index":810,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["filed",{"_index":939,"title":{},"body":{"license.html":{}}}],["files",{"_index":828,"title":{},"body":{"license.html":{}}}],["filtering",{"_index":717,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":1020,"title":{},"body":{"license.html":{}}}],["following",{"_index":630,"title":{},"body":{"index.html":{},"license.html":{}}}],["form",{"_index":821,"title":{},"body":{"license.html":{}}}],["format",{"_index":1089,"title":{},"body":{"license.html":{}}}],["found",{"_index":425,"title":{},"body":{"controllers/PostController.html":{}}}],["found'})@apiresponse({status",{"_index":304,"title":{},"body":{"controllers/PostController.html":{}}}],["found.'})@apiresponse({status",{"_index":260,"title":{},"body":{"controllers/PostController.html":{}}}],["framework",{"_index":747,"title":{},"body":{"index.html":{}}}],["free",{"_index":901,"title":{},"body":{"license.html":{}}}],["frontend",{"_index":710,"title":{},"body":{"index.html":{}}}],["function",{"_index":114,"title":{},"body":{"classes/BlogPost.html":{},"coverage.html":{}}}],["functions",{"_index":596,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":733,"title":{},"body":{"index.html":{}}}],["future",{"_index":690,"title":{},"body":{"index.html":{}}}],["generated",{"_index":834,"title":{},"body":{"license.html":{}}}],["generateslug",{"_index":571,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(blogposttitle",{"_index":115,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["generateslug(this.title",{"_index":122,"title":{},"body":{"classes/BlogPost.html":{}}}],["get(\"/:id",{"_index":405,"title":{},"body":{"controllers/PostController.html":{}}}],["get(\"/:id/comments",{"_index":424,"title":{},"body":{"controllers/PostController.html":{}}}],["get(\"/:id/relations",{"_index":414,"title":{},"body":{"controllers/PostController.html":{}}}],["get('')@apioperation({summary",{"_index":327,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/:id')@apioperation({summary",{"_index":321,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/:id/comments')@apioperation({summary",{"_index":314,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/:id/relations')@apioperation({summary",{"_index":336,"title":{},"body":{"controllers/PostController.html":{}}}],["get()@healthcheck",{"_index":193,"title":{},"body":{"controllers/HealthController.html":{}}}],["getallposts",{"_index":452,"title":{},"body":{"injectables/PostService.html":{}}}],["getcomments",{"_index":241,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getcomments(@param(\"id",{"_index":426,"title":{},"body":{"controllers/PostController.html":{}}}],["getcomments(postid",{"_index":313,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpost",{"_index":406,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost'})@apiparam({name",{"_index":322,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid",{"_index":242,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getpostbyid(@param(\"id",{"_index":408,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid(id",{"_index":320,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getpostbyslug",{"_index":453,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyslug(slug",{"_index":469,"title":{},"body":{"injectables/PostService.html":{}}}],["getposts",{"_index":243,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(@query(\"page",{"_index":398,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(page",{"_index":324,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostsbypagination",{"_index":454,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostsbypagination(page",{"_index":471,"title":{},"body":{"injectables/PostService.html":{}}}],["getrelatedposts",{"_index":244,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getrelatedposts(@param(\"id",{"_index":416,"title":{},"body":{"controllers/PostController.html":{}}}],["getrelatedposts(id",{"_index":335,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getting",{"_index":600,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["github",{"_index":726,"title":{},"body":{"index.html":{}}}],["give",{"_index":944,"title":{},"body":{"license.html":{}}}],["goodwill",{"_index":1048,"title":{},"body":{"license.html":{}}}],["governing",{"_index":1103,"title":{},"body":{"license.html":{}}}],["grant",{"_index":892,"title":{},"body":{"license.html":{}}}],["granted",{"_index":820,"title":{},"body":{"license.html":{}}}],["granting",{"_index":789,"title":{},"body":{"license.html":{}}}],["grants",{"_index":895,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1108,"title":{},"body":{"modules.html":{}}}],["great",{"_index":431,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["grigoropoulos",{"_index":1098,"title":{},"body":{"license.html":{},"properties.html":{}}}],["grossly",{"_index":1036,"title":{},"body":{"license.html":{}}}],["harmless",{"_index":1073,"title":{},"body":{"license.html":{}}}],["headless",{"_index":601,"title":{},"body":{"index.html":{},"properties.html":{}}}],["health",{"_index":191,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["health.controller",{"_index":231,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":198,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":203,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":196,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":188,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicatorresult",{"_index":202,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthmodule",{"_index":40,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heath",{"_index":676,"title":{},"body":{"index.html":{}}}],["help",{"_index":1115,"title":{},"body":{"properties.html":{}}}],["here",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["hereby",{"_index":894,"title":{},"body":{"license.html":{}}}],["herein",{"_index":990,"title":{},"body":{"license.html":{}}}],["higher",{"_index":620,"title":{},"body":{"index.html":{}}}],["hold",{"_index":1072,"title":{},"body":{"license.html":{}}}],["http",{"_index":208,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:3000",{"_index":662,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":773,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":1101,"title":{},"body":{"license.html":{}}}],["httpexception",{"_index":340,"title":{},"body":{"controllers/PostController.html":{}}}],["httpexception(error.message",{"_index":392,"title":{},"body":{"controllers/PostController.html":{}}}],["httphealthindicator",{"_index":197,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":229,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://betterstack.com/better",{"_index":214,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://static1.smartbear.co/swagger/media/assets/images/swagger_logo.svg",{"_index":368,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus",{"_index":341,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.bad_request",{"_index":423,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.conflict",{"_index":393,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.internal_server_error",{"_index":395,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.not_found",{"_index":394,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.unprocessable_entity",{"_index":404,"title":{},"body":{"controllers/PostController.html":{}}}],["hub",{"_index":729,"title":{},"body":{"index.html":{}}}],["hydrateddocument",{"_index":99,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":160,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["id'})@apiparam({name",{"_index":297,"title":{},"body":{"controllers/PostController.html":{}}}],["id'})@apiresponse({status",{"_index":303,"title":{},"body":{"controllers/PostController.html":{}}}],["identification",{"_index":1094,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":1085,"title":{},"body":{"license.html":{}}}],["ii",{"_index":808,"title":{},"body":{"license.html":{}}}],["iii",{"_index":815,"title":{},"body":{"license.html":{}}}],["image",{"_index":367,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["imagepath",{"_index":77,"title":{},"body":{"classes/BlogPost.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["images",{"_index":700,"title":{},"body":{"index.html":{}}}],["images/my",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implement",{"_index":694,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":686,"title":{},"body":{"index.html":{}}}],["implied",{"_index":1017,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"license.html":{}}}],["imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{}}}],["improvements",{"_index":691,"title":{},"body":{"index.html":{}}}],["improving",{"_index":881,"title":{},"body":{"license.html":{}}}],["inability",{"_index":1046,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":1042,"title":{},"body":{"license.html":{}}}],["include",{"_index":854,"title":{},"body":{"license.html":{}}}],["included",{"_index":840,"title":{},"body":{"license.html":{}}}],["includes",{"_index":960,"title":{},"body":{"license.html":{}}}],["including",{"_index":824,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":866,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":890,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":1074,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":1070,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":1061,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":838,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":256,"title":{},"body":{"controllers/PostController.html":{}}}],["indirect",{"_index":802,"title":{},"body":{"license.html":{}}}],["individual",{"_index":817,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{}}}],["information",{"_index":678,"title":{},"body":{"index.html":{},"license.html":{}}}],["informational",{"_index":973,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":922,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":936,"title":{},"body":{"license.html":{}}}],["injectable",{"_index":56,"title":{"injectables/AppService.html":{},"injectables/PostService.html":{}},"body":{"injectables/AppService.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["injectables",{"_index":57,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostService.html":{},"overview.html":{}}}],["injectmodel",{"_index":474,"title":{},"body":{"injectables/PostService.html":{}}}],["input",{"_index":251,"title":{},"body":{"controllers/PostController.html":{}}}],["install",{"_index":627,"title":{},"body":{"index.html":{}}}],["installed",{"_index":623,"title":{},"body":{"index.html":{}}}],["instance",{"_index":144,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["instanceof",{"_index":390,"title":{},"body":{"controllers/PostController.html":{}}}],["institute",{"_index":926,"title":{},"body":{"license.html":{}}}],["instructions",{"_index":631,"title":{},"body":{"index.html":{}}}],["intentionally",{"_index":864,"title":{},"body":{"license.html":{}}}],["interface",{"_index":711,"title":{},"body":{"index.html":{}}}],["interfaces",{"_index":860,"title":{},"body":{"license.html":{}}}],["invalid",{"_index":302,"title":{},"body":{"controllers/PostController.html":{}}}],["ipsum",{"_index":373,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["irrevocable",{"_index":902,"title":{},"body":{"license.html":{}}}],["isnotempty",{"_index":172,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{}}}],["isnotempty()@isstring()@apiproperty",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{}}}],["isslugvalid",{"_index":495,"title":{},"body":{"injectables/PostService.html":{}}}],["isstring",{"_index":171,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{}}}],["isstring()@isnotempty",{"_index":168,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["issue",{"_index":761,"title":{},"body":{"index.html":{},"license.html":{}}}],["january",{"_index":771,"title":{},"body":{"license.html":{}}}],["jest",{"_index":722,"title":{},"body":{"index.html":{}}}],["john",{"_index":429,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["keywords",{"_index":1117,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1016,"title":{},"body":{"license.html":{}}}],["language",{"_index":1102,"title":{},"body":{"license.html":{}}}],["languages",{"_index":719,"title":{},"body":{"index.html":{}}}],["law",{"_index":1011,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":932,"title":{},"body":{"license.html":{}}}],["legal",{"_index":790,"title":{},"body":{"license.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["liability",{"_index":1030,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1039,"title":{},"body":{"license.html":{}}}],["licensable",{"_index":920,"title":{},"body":{"license.html":{}}}],["license",{"_index":764,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":765,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":937,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":784,"title":{},"body":{"license.html":{}}}],["limit",{"_index":326,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{}}}],["limitation",{"_index":1018,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":1104,"title":{},"body":{"license.html":{}}}],["limited",{"_index":825,"title":{},"body":{"license.html":{}}}],["link",{"_index":858,"title":{},"body":{"license.html":{}}}],["list",{"_index":666,"title":{},"body":{"index.html":{}}}],["lists",{"_index":875,"title":{},"body":{"license.html":{}}}],["literal",{"_index":1123,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["litigation",{"_index":927,"title":{},"body":{"license.html":{}}}],["local",{"_index":626,"title":{},"body":{"index.html":{}}}],["locales",{"_index":720,"title":{},"body":{"index.html":{}}}],["log",{"_index":706,"title":{},"body":{"index.html":{}}}],["lorem",{"_index":372,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":1047,"title":{},"body":{"license.html":{}}}],["losses",{"_index":1054,"title":{},"body":{"license.html":{}}}],["lower",{"_index":117,"title":{},"body":{"classes/BlogPost.html":{}}}],["machine",{"_index":614,"title":{},"body":{"index.html":{}}}],["made",{"_index":693,"title":{},"body":{"index.html":{},"license.html":{}}}],["mailing",{"_index":874,"title":{},"body":{"license.html":{}}}],["make",{"_index":519,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["making",{"_index":737,"title":{},"body":{"index.html":{},"license.html":{}}}],["malfunction",{"_index":1052,"title":{},"body":{"license.html":{}}}],["manage",{"_index":606,"title":{},"body":{"index.html":{}}}],["managed",{"_index":878,"title":{},"body":{"license.html":{}}}],["management",{"_index":712,"title":{},"body":{"index.html":{},"license.html":{}}}],["manager",{"_index":725,"title":{},"body":{"index.html":{}}}],["managment",{"_index":360,"title":{},"body":{"controllers/PostController.html":{}}}],["marked",{"_index":884,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1001,"title":{},"body":{"license.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mean",{"_index":780,"title":{},"body":{"license.html":{}}}],["means",{"_index":799,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":830,"title":{},"body":{"license.html":{}}}],["media",{"_index":698,"title":{},"body":{"index.html":{},"license.html":{}}}],["medium",{"_index":942,"title":{},"body":{"license.html":{}}}],["meet",{"_index":943,"title":{},"body":{"license.html":{}}}],["memory",{"_index":210,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["memoryhealthindicator",{"_index":200,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":1019,"title":{},"body":{"license.html":{}}}],["merely",{"_index":857,"title":{},"body":{"license.html":{}}}],["message",{"_index":146,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["metadata",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["miscellaneous",{"_index":595,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":432,"title":{},"body":{"controllers/PostController.html":{}}}],["model",{"_index":456,"title":{},"body":{"injectables/PostService.html":{}}}],["modifications",{"_index":823,"title":{},"body":{"license.html":{}}}],["modified",{"_index":947,"title":{},"body":{"license.html":{}}}],["modify",{"_index":974,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":979,"title":{},"body":{"license.html":{}}}],["modularity",{"_index":750,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":209,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{},"properties.html":{}}}],["mongodb_uri",{"_index":651,"title":{},"body":{"index.html":{}}}],["mongodb_uri=\"mongodb://mongodb/test",{"_index":655,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":100,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"injectables/PostService.html":{},"dependencies.html":{}}}],["mongoose.types.objectid",{"_index":542,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(postid",{"_index":536,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(relationpostid",{"_index":517,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(sourcepostid",{"_index":515,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoosehealthindicator",{"_index":199,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{}}}],["mongoosemodule.forfeature",{"_index":448,"title":{},"body":{"modules/PostModule.html":{}}}],["mongoosemodule.forroot(process.env.mongodb_uri",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["monitor",{"_index":682,"title":{},"body":{"index.html":{}}}],["more",{"_index":713,"title":{},"body":{"index.html":{},"license.html":{}}}],["multiple",{"_index":708,"title":{},"body":{"index.html":{}}}],["name",{"_index":266,"title":{},"body":{"controllers/PostController.html":{},"classes/PostError.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["names",{"_index":999,"title":{},"body":{"license.html":{}}}],["natively",{"_index":613,"title":{},"body":{"index.html":{}}}],["necessarily",{"_index":921,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":628,"title":{},"body":{"index.html":{}}}],["need",{"_index":617,"title":{},"body":{"index.html":{}}}],["negligence",{"_index":1034,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":1037,"title":{},"body":{"license.html":{}}}],["nestjs",{"_index":610,"title":{},"body":{"index.html":{}}}],["nestjs(express",{"_index":1116,"title":{},"body":{"properties.html":{}}}],["nestjs/axios",{"_index":230,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":204,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["new",{"_index":106,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":120,"title":{},"body":{"classes/BlogPost.html":{}}}],["nikolaos",{"_index":1097,"title":{},"body":{"license.html":{},"properties.html":{}}}],["node.js",{"_index":618,"title":{},"body":{"index.html":{}}}],["non",{"_index":751,"title":{},"body":{"index.html":{},"license.html":{}}}],["normally",{"_index":970,"title":{},"body":{"license.html":{}}}],["note",{"_index":684,"title":{},"body":{"index.html":{}}}],["nothing",{"_index":989,"title":{},"body":{"license.html":{}}}],["notice",{"_index":839,"title":{},"body":{"license.html":{}}}],["notices",{"_index":950,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":987,"title":{},"body":{"license.html":{}}}],["npm",{"_index":621,"title":{},"body":{"index.html":{}}}],["number",{"_index":325,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["object",{"_index":363,"title":{},"body":{"controllers/PostController.html":{},"license.html":{}}}],["objectid",{"_index":108,"title":{},"body":{"classes/BlogPost.html":{}}}],["obligations",{"_index":1062,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":1100,"title":{},"body":{"license.html":{}}}],["offer",{"_index":914,"title":{},"body":{"license.html":{}}}],["once",{"_index":664,"title":{},"body":{"index.html":{}}}],["one",{"_index":521,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["open",{"_index":649,"title":{},"body":{"index.html":{}}}],["operating",{"_index":633,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":309,"title":{},"body":{"controllers/PostController.html":{}}}],["optimize",{"_index":734,"title":{},"body":{"index.html":{}}}],["optional",{"_index":267,"title":{},"body":{"controllers/PostController.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":689,"title":{},"body":{"index.html":{}}}],["orders",{"_index":687,"title":{},"body":{"index.html":{}}}],["organization",{"_index":749,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1006,"title":{},"body":{"license.html":{}}}],["original",{"_index":853,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":807,"title":{},"body":{"license.html":{}}}],["out",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":813,"title":{},"body":{"license.html":{}}}],["overview",{"_index":1109,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":786,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":809,"title":{},"body":{"license.html":{}}}],["package",{"_index":574,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":329,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["pagination",{"_index":668,"title":{},"body":{"index.html":{}}}],["param",{"_index":145,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["param(\"commentid",{"_index":439,"title":{},"body":{"controllers/PostController.html":{}}}],["param(\"postid",{"_index":438,"title":{},"body":{"controllers/PostController.html":{}}}],["parameters",{"_index":265,"title":{},"body":{"controllers/PostController.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parchment",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["part",{"_index":958,"title":{},"body":{"license.html":{}}}],["partially",{"_index":605,"title":{},"body":{"index.html":{}}}],["particular",{"_index":1021,"title":{},"body":{"license.html":{}}}],["party",{"_index":969,"title":{},"body":{"license.html":{}}}],["patent",{"_index":910,"title":{},"body":{"license.html":{}}}],["path",{"_index":224,"title":{},"body":{"controllers/HealthController.html":{}}}],["percent",{"_index":811,"title":{},"body":{"license.html":{}}}],["perform",{"_index":907,"title":{},"body":{"license.html":{}}}],["permission",{"_index":997,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":819,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":896,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":957,"title":{},"body":{"license.html":{}}}],["places",{"_index":964,"title":{},"body":{"license.html":{}}}],["plaintoclass",{"_index":475,"title":{},"body":{"injectables/PostService.html":{}}}],["plaintoclass(blogpost",{"_index":479,"title":{},"body":{"injectables/PostService.html":{}}}],["please",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["port",{"_index":647,"title":{},"body":{"index.html":{}}}],["port=\"3000",{"_index":656,"title":{},"body":{"index.html":{}}}],["possibility",{"_index":1057,"title":{},"body":{"license.html":{}}}],["post",{"_index":149,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apibody({type",{"_index":250,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@apiresponse({status",{"_index":337,"title":{},"body":{"controllers/PostController.html":{}}}],["post(\"/:id/comments",{"_index":428,"title":{},"body":{"controllers/PostController.html":{}}}],["post(\"/relation",{"_index":419,"title":{},"body":{"controllers/PostController.html":{}}}],["post('')@apioperation({summary",{"_index":270,"title":{},"body":{"controllers/PostController.html":{}}}],["post('/:id/comments')@apioperation({summary",{"_index":246,"title":{},"body":{"controllers/PostController.html":{}}}],["post('/relation/')@apioperation({summary",{"_index":277,"title":{},"body":{"controllers/PostController.html":{}}}],["post.comments",{"_index":540,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.findindex(comment",{"_index":548,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.length",{"_index":538,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.push(comment",{"_index":545,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.splice(commentindex",{"_index":551,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":447,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":351,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dto.stub.ts",{"_index":562,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["post.dto.ts",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:13",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:18",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:8",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.errors",{"_index":353,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.jpg",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post.relatedposts",{"_index":418,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.save",{"_index":546,"title":{},"body":{"injectables/PostService.html":{}}}],["post.service",{"_index":349,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["post.title",{"_index":482,"title":{},"body":{"injectables/PostService.html":{}}}],["post.types",{"_index":356,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post/post.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["postcircularrelationship",{"_index":156,"title":{"classes/PostCircularRelationship.html":{}},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postcircularrelationship(\"can't",{"_index":518,"title":{},"body":{"injectables/PostService.html":{}}}],["postcontroller",{"_index":232,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postdoesntexist",{"_index":153,"title":{"classes/PostDoesntExist.html":{}},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postdoesntexist(\"post",{"_index":523,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesntexist(\"posts",{"_index":493,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesntexist(\"relationship",{"_index":526,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesntexist(`post",{"_index":504,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnthavecomments",{"_index":164,"title":{"classes/PostDoesntHaveComments.html":{}},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postdoesnthavecomments(`post",{"_index":539,"title":{},"body":{"injectables/PostService.html":{}}}],["posterror",{"_index":142,"title":{"classes/PostError.html":{}},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["posterror(`didnt",{"_index":513,"title":{},"body":{"injectables/PostService.html":{}}}],["postid",{"_index":268,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["postidvalidationerror",{"_index":161,"title":{"classes/PostIdValidationError.html":{}},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postidvalidationerror(\"provided",{"_index":516,"title":{},"body":{"injectables/PostService.html":{}}}],["postmodule",{"_index":41,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrelationconflict",{"_index":152,"title":{"classes/PostRelationConflict.html":{}},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postrelationconflict(\"relationship",{"_index":535,"title":{},"body":{"injectables/PostService.html":{}}}],["postrelationconflict(`post",{"_index":483,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":162,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["posts'})@apiquery({name",{"_index":328,"title":{},"body":{"controllers/PostController.html":{}}}],["posts'})@apiresponse({status",{"_index":282,"title":{},"body":{"controllers/PostController.html":{}}}],["posts.'})@apiresponse({status",{"_index":332,"title":{},"body":{"controllers/PostController.html":{}}}],["posts.length",{"_index":491,"title":{},"body":{"injectables/PostService.html":{}}}],["postservice",{"_index":348,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postslugvalidationerror",{"_index":159,"title":{"classes/PostSlugValidationError.html":{}},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postslugvalidationerror(\"provided",{"_index":506,"title":{},"body":{"injectables/PostService.html":{}}}],["potential",{"_index":692,"title":{},"body":{"index.html":{}}}],["power",{"_index":800,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":822,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":190,"title":{},"body":{"controllers/HealthController.html":{},"controllers/PostController.html":{}}}],["prepare",{"_index":904,"title":{},"body":{"license.html":{}}}],["printed",{"_index":1092,"title":{},"body":{"license.html":{}}}],["private",{"_index":207,"title":{},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{}}}],["proccess",{"_index":724,"title":{},"body":{"index.html":{}}}],["process",{"_index":739,"title":{},"body":{"index.html":{}}}],["product",{"_index":1002,"title":{},"body":{"license.html":{}}}],["profile",{"_index":707,"title":{},"body":{"index.html":{}}}],["project",{"_index":603,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":949,"title":{},"body":{"license.html":{}}}],["promise",{"_index":195,"title":{},"body":{"controllers/HealthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["prop",{"_index":96,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["prop({default",{"_index":131,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["prop({required",{"_index":87,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["prop({type",{"_index":83,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["prop({unique",{"_index":93,"title":{},"body":{"classes/BlogPost.html":{}}}],["properties",{"_index":73,"title":{"properties.html":{}},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/PostController.html":{},"properties.html":{}}}],["provide",{"_index":981,"title":{},"body":{"license.html":{}}}],["provided",{"_index":632,"title":{},"body":{"index.html":{},"license.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["provides",{"_index":1013,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":905,"title":{},"body":{"license.html":{}}}],["publish",{"_index":728,"title":{},"body":{"index.html":{}}}],["pull",{"_index":763,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":879,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":797,"title":{},"body":{"license.html":{}}}],["query",{"_index":288,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["query(\"limit",{"_index":399,"title":{},"body":{"controllers/PostController.html":{}}}],["query(\"slug",{"_index":400,"title":{},"body":{"controllers/PostController.html":{}}}],["readable",{"_index":962,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostController.html":{}}}],["reason",{"_index":1076,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1003,"title":{},"body":{"license.html":{}}}],["received",{"_index":888,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":945,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":1090,"title":{},"body":{"license.html":{}}}],["redistributing",{"_index":1026,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":940,"title":{},"body":{"license.html":{}}}],["reduce",{"_index":735,"title":{},"body":{"index.html":{}}}],["ref",{"_index":109,"title":{},"body":{"classes/BlogPost.html":{}}}],["refactor",{"_index":746,"title":{},"body":{"index.html":{}}}],["refer",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["reflect",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["regarding",{"_index":995,"title":{},"body":{"license.html":{}}}],["registry",{"_index":730,"title":{},"body":{"index.html":{}}}],["related",{"_index":442,"title":{},"body":{"classes/PostError.html":{}}}],["relatedposts",{"_index":78,"title":{},"body":{"classes/BlogPost.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["relation",{"_index":150,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{}}}],["relation.slug",{"_index":529,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpost",{"_index":525,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpost.relatedposts",{"_index":527,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpost.slug",{"_index":530,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpostid",{"_index":184,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["relations",{"_index":608,"title":{},"body":{"index.html":{}}}],["relationship",{"_index":279,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{}}}],["relationship.dto",{"_index":354,"title":{},"body":{"controllers/PostController.html":{}}}],["relationship.dto.ts",{"_index":183,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"coverage.html":{}}}],["relationship.dto.ts:13",{"_index":186,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["relationship.dto.ts:8",{"_index":187,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["relationships",{"_index":155,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["remain",{"_index":855,"title":{},"body":{"license.html":{}}}],["remove",{"_index":295,"title":{},"body":{"controllers/PostController.html":{}}}],["rename",{"_index":638,"title":{},"body":{"index.html":{}}}],["replace",{"_index":641,"title":{},"body":{"index.html":{}}}],["replaced",{"_index":1084,"title":{},"body":{"license.html":{}}}],["reports",{"_index":758,"title":{},"body":{"index.html":{}}}],["repository",{"_index":625,"title":{},"body":{"index.html":{}}}],["represent",{"_index":851,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":873,"title":{},"body":{"license.html":{}}}],["reproduce",{"_index":903,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":1007,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":776,"title":{},"body":{"license.html":{}}}],["request",{"_index":262,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["requests",{"_index":760,"title":{},"body":{"index.html":{}}}],["required",{"_index":105,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"license.html":{}}}],["reset",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["responsibility",{"_index":1068,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":1023,"title":{},"body":{"license.html":{}}}],["result",{"_index":386,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"license.html":{}}}],["result.deletedcount",{"_index":512,"title":{},"body":{"injectables/PostService.html":{}}}],["resulting",{"_index":829,"title":{},"body":{"license.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":954,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":315,"title":{},"body":{"controllers/PostController.html":{}}}],["retrieved",{"_index":317,"title":{},"body":{"controllers/PostController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["revisions",{"_index":848,"title":{},"body":{"license.html":{}}}],["rewrite",{"_index":742,"title":{},"body":{"index.html":{}}}],["rights",{"_index":1064,"title":{},"body":{"license.html":{}}}],["risks",{"_index":1028,"title":{},"body":{"license.html":{}}}],["robust",{"_index":714,"title":{},"body":{"index.html":{}}}],["royalty",{"_index":900,"title":{},"body":{"license.html":{}}}],["run",{"_index":612,"title":{},"body":{"index.html":{}}}],["running",{"_index":616,"title":{},"body":{"index.html":{}}}],["safety",{"_index":745,"title":{},"body":{"index.html":{}}}],["same",{"_index":1091,"title":{},"body":{"license.html":{}}}],["savedpost",{"_index":484,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.content",{"_index":487,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.imagepath",{"_index":488,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.title",{"_index":486,"title":{},"body":{"injectables/PostService.html":{}}}],["schema",{"_index":97,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["schemafactory",{"_index":98,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["schemafactory.createforclass(blogpost",{"_index":113,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(blogpostcomment",{"_index":135,"title":{},"body":{"classes/BlogPostComment.html":{},"miscellaneous/variables.html":{}}}],["schemas/comment.schema",{"_index":358,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["schemas/post.schema",{"_index":352,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["section",{"_index":913,"title":{},"body":{"license.html":{}}}],["sections",{"_index":781,"title":{},"body":{"license.html":{}}}],["secure",{"_index":696,"title":{},"body":{"index.html":{}}}],["see",{"_index":770,"title":{},"body":{"index.html":{},"license.html":{}}}],["select",{"_index":501,"title":{},"body":{"injectables/PostService.html":{}}}],["sell",{"_index":915,"title":{},"body":{"license.html":{}}}],["sent",{"_index":872,"title":{},"body":{"license.html":{}}}],["separable",{"_index":856,"title":{},"body":{"license.html":{}}}],["separate",{"_index":992,"title":{},"body":{"license.html":{}}}],["server",{"_index":637,"title":{},"body":{"index.html":{}}}],["service",{"_index":1000,"title":{},"body":{"license.html":{}}}],["set",{"_index":278,"title":{},"body":{"controllers/PostController.html":{}}}],["sets",{"_index":675,"title":{},"body":{"index.html":{}}}],["shall",{"_index":779,"title":{},"body":{"license.html":{}}}],["shares",{"_index":814,"title":{},"body":{"license.html":{}}}],["sit",{"_index":375,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":736,"title":{},"body":{"index.html":{}}}],["skip",{"_index":507,"title":{},"body":{"injectables/PostService.html":{}}}],["slug",{"_index":79,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["slugify",{"_index":103,"title":{},"body":{"classes/BlogPost.html":{},"dependencies.html":{}}}],["slugify(blogposttitle",{"_index":116,"title":{},"body":{"classes/BlogPost.html":{}}}],["software",{"_index":826,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1067,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1022,"title":{},"body":{"license.html":{}}}],["solution",{"_index":715,"title":{},"body":{"index.html":{}}}],["sorting",{"_index":716,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"license.html":{}}}],["sourcepost",{"_index":522,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.relatedposts.findindex(relation",{"_index":528,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.relatedposts.push(relationpost",{"_index":532,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.save",{"_index":534,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepostid",{"_index":185,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["special",{"_index":1041,"title":{},"body":{"license.html":{}}}],["specific",{"_index":296,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["specify",{"_index":650,"title":{},"body":{"index.html":{}}}],["src/.../comment.schema.ts",{"_index":1120,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":597,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post.schema.ts",{"_index":598,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../post.types.ts",{"_index":1121,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":58,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":59,"title":{},"body":{"injectables/AppService.html":{}}}],["src/health/health.controller.ts",{"_index":189,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":194,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":227,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":556,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/dto/create",{"_index":166,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/post/post.controller.ts",{"_index":233,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:123",{"_index":333,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:168",{"_index":323,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:201",{"_index":312,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:238",{"_index":338,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:294",{"_index":290,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:341",{"_index":319,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:413",{"_index":264,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:461",{"_index":305,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:76",{"_index":275,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.errors.ts",{"_index":137,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["src/post/post.errors.ts:5",{"_index":443,"title":{},"body":{"classes/PostError.html":{}}}],["src/post/post.module.ts",{"_index":446,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":450,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:104",{"_index":463,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:141",{"_index":467,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:156",{"_index":459,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:179",{"_index":464,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:23",{"_index":457,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:26",{"_index":461,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:43",{"_index":466,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:51",{"_index":470,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:66",{"_index":472,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:71",{"_index":468,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:83",{"_index":465,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:95",{"_index":473,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.types.ts",{"_index":1122,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/schemas/comment.schema.ts",{"_index":123,"title":{},"body":{"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/comment.schema.ts:10",{"_index":129,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:13",{"_index":130,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:16",{"_index":132,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:7",{"_index":128,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/post.schema.ts",{"_index":72,"title":{},"body":{"classes/BlogPost.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/post.schema.ts:10",{"_index":95,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:13",{"_index":91,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:16",{"_index":89,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:19",{"_index":90,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:22",{"_index":94,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:25",{"_index":92,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:28",{"_index":86,"title":{},"body":{"classes/BlogPost.html":{}}}],["start",{"_index":629,"title":{},"body":{"index.html":{}}}],["started",{"_index":64,"title":{"index.html":{},"license.html":{}},"body":{"injectables/AppService.html":{},"index.html":{}}}],["state",{"_index":986,"title":{},"body":{"license.html":{}}}],["stated",{"_index":912,"title":{},"body":{"license.html":{}}}],["statement",{"_index":980,"title":{},"body":{"license.html":{}}}],["statements",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":951,"title":{},"body":{"license.html":{}}}],["status",{"_index":369,"title":{},"body":{"controllers/PostController.html":{}}}],["stoppage",{"_index":1049,"title":{},"body":{"license.html":{}}}],["strict",{"_index":118,"title":{},"body":{"classes/BlogPost.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CommentDoesntExist.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["string})@apiresponse({status",{"_index":311,"title":{},"body":{"controllers/PostController.html":{}}}],["subject",{"_index":893,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":908,"title":{},"body":{"license.html":{}}}],["submission",{"_index":983,"title":{},"body":{"license.html":{}}}],["submit",{"_index":762,"title":{},"body":{"index.html":{},"license.html":{}}}],["submitted",{"_index":865,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":889,"title":{},"body":{"license.html":{}}}],["success",{"_index":413,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["successexample",{"_index":370,"title":{},"body":{"controllers/PostController.html":{}}}],["successful",{"_index":382,"title":{},"body":{"controllers/PostController.html":{}}}],["successful.'})@apiresponse({status",{"_index":271,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully",{"_index":257,"title":{},"body":{"controllers/PostController.html":{}}}],["such",{"_index":679,"title":{},"body":{"index.html":{},"license.html":{}}}],["suggestions",{"_index":756,"title":{},"body":{"index.html":{}}}],["summary",{"_index":362,"title":{},"body":{"controllers/PostController.html":{}}}],["super(message",{"_index":148,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["supersede",{"_index":991,"title":{},"body":{"license.html":{}}}],["support",{"_index":697,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["svg",{"_index":1106,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"controllers/PostController.html":{}}}],["swc/helpers",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["syntax",{"_index":1088,"title":{},"body":{"license.html":{}}}],["system",{"_index":634,"title":{},"body":{"index.html":{}}}],["systems",{"_index":876,"title":{},"body":{"license.html":{}}}],["table",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["tasks",{"_index":732,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":938,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":228,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":774,"title":{},"body":{"license.html":{}}}],["tests",{"_index":723,"title":{},"body":{"index.html":{}}}],["text",{"_index":961,"title":{},"body":{"license.html":{}}}],["theory",{"_index":1032,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":861,"title":{},"body":{"license.html":{}}}],["third",{"_index":968,"title":{},"body":{"license.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.blogpostmodel(post).save",{"_index":485,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.deleteone",{"_index":511,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.find().select",{"_index":489,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.find().skip(skip).limit(limit).sort",{"_index":508,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findbyid(postid",{"_index":541,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findbyid(postid).select(\"comments",{"_index":537,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findone",{"_index":481,"title":{},"body":{"injectables/PostService.html":{}}}],["this.disk.checkstorage(\"storage",{"_index":223,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.health.check",{"_index":212,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"uptime",{"_index":213,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkheap(\"memory_heap",{"_index":222,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory_rss",{"_index":219,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.mongodb.pingcheck(\"mongodb",{"_index":216,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.postservice.addcomment(postid",{"_index":436,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createblogpost(createpostdto",{"_index":388,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createrelation(createrelationshipdto.sourcepostid",{"_index":421,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.deletecomment(postid",{"_index":440,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.deletepost(id",{"_index":412,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getallposts",{"_index":403,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getcomments(postid",{"_index":427,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getpostbyid(id",{"_index":409,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getpostbyslug(slug",{"_index":402,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getpostsbypagination(page",{"_index":401,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getrelatedposts(id",{"_index":417,"title":{},"body":{"controllers/PostController.html":{}}}],["this.slug",{"_index":121,"title":{},"body":{"classes/BlogPost.html":{}}}],["those",{"_index":918,"title":{},"body":{"license.html":{}}}],["threshold",{"_index":225,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":782,"title":{},"body":{"license.html":{}}}],["throw",{"_index":391,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["timeout",{"_index":217,"title":{},"body":{"controllers/HealthController.html":{}}}],["timestamps",{"_index":104,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["title",{"_index":80,"title":{},"body":{"classes/BlogPost.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":1033,"title":{},"body":{"license.html":{}}}],["toy",{"_index":602,"title":{},"body":{"index.html":{}}}],["tracking",{"_index":877,"title":{},"body":{"license.html":{}}}],["trade",{"_index":998,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":955,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":996,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":916,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":831,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":476,"title":{},"body":{"injectables/PostService.html":{},"dependencies.html":{}}}],["translation",{"_index":832,"title":{},"body":{"license.html":{}}}],["true",{"_index":88,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["try",{"_index":385,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["two",{"_index":281,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["type",{"_index":81,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"controllers/PostController.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1118,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":133,"title":{},"body":{"classes/BlogPostComment.html":{},"license.html":{}}}],["types.objectid",{"_index":126,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["typescript",{"_index":743,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":84,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["undefined})@apiparam({name",{"_index":298,"title":{},"body":{"controllers/PostController.html":{}}}],["undefined})@apiresponse({status",{"_index":254,"title":{},"body":{"controllers/PostController.html":{}}}],["under",{"_index":766,"title":{},"body":{"index.html":{},"license.html":{}}}],["union",{"_index":791,"title":{},"body":{"license.html":{}}}],["unique",{"_index":107,"title":{},"body":{"classes/BlogPost.html":{}}}],["unless",{"_index":984,"title":{},"body":{"license.html":{}}}],["up",{"_index":660,"title":{},"body":{"index.html":{}}}],["updatedpost",{"_index":533,"title":{},"body":{"injectables/PostService.html":{}}}],["uploads",{"_index":699,"title":{},"body":{"index.html":{}}}],["uptime",{"_index":215,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["url",{"_index":366,"title":{},"body":{"controllers/PostController.html":{}}}],["usage",{"_index":663,"title":{},"body":{"index.html":{}}}],["use",{"_index":415,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":681,"title":{},"body":{"index.html":{}}}],["useful",{"_index":677,"title":{},"body":{"index.html":{}}}],["user",{"_index":703,"title":{},"body":{"index.html":{}}}],["users",{"_index":704,"title":{},"body":{"index.html":{}}}],["using",{"_index":520,"title":{},"body":{"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["v10.5.2",{"_index":622,"title":{},"body":{"index.html":{}}}],["v20.13.1",{"_index":619,"title":{},"body":{"index.html":{}}}],["valid",{"_index":397,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["valid'})@apiresponse({status",{"_index":289,"title":{},"body":{"controllers/PostController.html":{}}}],["validation",{"_index":157,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["validator",{"_index":173,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"dependencies.html":{}}}],["value",{"_index":371,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":642,"title":{},"body":{"index.html":{}}}],["variable",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":652,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verbal",{"_index":869,"title":{},"body":{"license.html":{}}}],["version",{"_index":768,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["videos",{"_index":701,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":1015,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1009,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["well",{"_index":607,"title":{},"body":{"index.html":{}}}],["wherever",{"_index":967,"title":{},"body":{"license.html":{}}}],["whether",{"_index":805,"title":{},"body":{"license.html":{}}}],["whole",{"_index":852,"title":{},"body":{"license.html":{}}}],["within",{"_index":891,"title":{},"body":{"license.html":{}}}],["without",{"_index":163,"title":{},"body":{"classes/CommentDoesntExist.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesntExist.html":{},"classes/PostDoesntHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"license.html":{}}}],["work",{"_index":836,"title":{},"body":{"license.html":{}}}],["works",{"_index":845,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":897,"title":{},"body":{"license.html":{}}}],["write",{"_index":721,"title":{},"body":{"index.html":{}}}],["writing",{"_index":886,"title":{},"body":{"license.html":{}}}],["written",{"_index":870,"title":{},"body":{"license.html":{}}}],["yes",{"_index":334,"title":{},"body":{"controllers/PostController.html":{}}}],["z0",{"_index":497,"title":{},"body":{"injectables/PostService.html":{}}}],["za",{"_index":496,"title":{},"body":{"injectables/PostService.html":{}}}],["zoom",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\n\nimport { AppService } from \"./app.service\";\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nHealthModule\n\nHealthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HealthModule\n                        \n                        \n                            PostModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ConfigModule } from \"@nestjs/config\";\n\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { PostModule } from \"./post/post.module\";\nimport { HealthModule } from \"./health/health.module\";\n\n@Module({\n  imports: [ConfigModule.forRoot(), MongooseModule.forRoot(process.env.MONGODB_URI), PostModule, HealthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return `Welcome to Parchment CMS API.To get started, please refer to the Swagger Documentation here.`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPost.html":{"url":"classes/BlogPost.html","title":"class - BlogPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/post.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                date\n                            \n                            \n                                    \n                                imagePath\n                            \n                            \n                                    \n                                relatedPosts\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BlogPostComment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imagePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relatedPosts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPost[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\n\nimport { BlogPostComment, BlogPostCommentSchema } from \"./comment.schema\";\nimport slugify from \"slugify\";\n\n@Schema({ timestamps: true })\nexport class BlogPost {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: true })\n  imagePath: string;\n\n  @Prop({ required: true })\n  content: string;\n\n  @Prop({ required: true, default: () => new Date() })\n  date: Date;\n\n  @Prop({ unique: true, index: true })\n  slug: string;\n\n  @Prop({ type: [{ type: \"ObjectId\", ref: \"BlogPost\" }] })\n  relatedPosts: BlogPost[];\n\n  @Prop({ type: [BlogPostCommentSchema], default: [] })\n  comments: BlogPostComment[];\n}\n\nexport type BlogPostDocument = HydratedDocument;\n\nexport const BlogPostSchema = SchemaFactory.createForClass(BlogPost);\n\nfunction generateSlug(blogPostTitle: string): string {\n  return slugify(blogPostTitle, { lower: true, strict: true });\n}\n\nBlogPostSchema.pre(\"save\", function (next) {\n  if (!this.slug) {\n    this.slug = generateSlug(this.title);\n  }\n  next();\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPostComment.html":{"url":"classes/BlogPostComment.html","title":"class - BlogPostComment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPostComment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/comment.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                date\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument, Types } from \"mongoose\";\n\n@Schema({ timestamps: true })\nexport class BlogPostComment {\n  @Prop({ type: Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n  \n  @Prop({ required: true })\n  author: string;\n\n  @Prop({ required: true })\n  content: string;\n\n  @Prop({ default: () => new Date() })\n  date: Date;\n}\n\nexport type BlogPostCommentDocument = HydratedDocument;\nexport const BlogPostCommentSchema = SchemaFactory.createForClass(BlogPostComment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentDoesntExist.html":{"url":"classes/CommentDoesntExist.html","title":"class - CommentDoesntExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentDoesntExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for comments not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesntExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesntHaveComments extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesntExist extends PostError {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-comment.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-comment.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from \"class-validator\";\n\nexport class CreateCommentDto {\n  @IsString()\n  @IsNotEmpty()\n  author: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                imagePath\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        imagePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  content: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRelationshipDto.html":{"url":"classes/CreateRelationshipDto.html","title":"class - CreateRelationshipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRelationshipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-relationship.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                relationPostId\n                            \n                            \n                                    \n                                    \n                                    \n                                sourcePostId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        relationPostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-relationship.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sourcePostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-relationship.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateRelationshipDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  sourcePostId: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  relationPostId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  MongooseHealthIndicator,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n  HealthIndicatorResult,\n  HealthCheckResult,\n} from \"@nestjs/terminus\";\n\n@Controller(\"health\")\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private mongoDb: MongooseHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    return this.health.check([\n      (): Promise => this.http.pingCheck(\"uptime\", \"https://betterstack.com/better-uptime\"),\n      (): Promise => this.mongoDb.pingCheck(\"mongodb\", { timeout: 5000 }),\n      (): Promise => this.memory.checkRSS(\"memory_rss\", 300 * 1024 * 1024),\n      (): Promise => this.memory.checkHeap(\"memory_heap\", 300 * 1024 * 1024),\n      (): Promise =>\n        this.disk.checkStorage(\"storage\", {\n          path: \"/\",\n          threshold: 128 * 1024 * 1024 * 1024,\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HttpModule } from \"@nestjs/axios\";\n\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostCircularRelationship.html":{"url":"classes/PostCircularRelationship.html","title":"class - PostCircularRelationship","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostCircularRelationship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for circular post relationships.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesntExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesntHaveComments extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesntExist extends PostError {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                addComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createRelation\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getComments\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getPostById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getRelatedPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    addComment(postId: string, createCommentDto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/comments')@ApiOperation({summary: 'Add comment to post', description: 'Add a comment to a blog post'})@ApiBody({type: CreateCommentDto, description: 'The input data to create a new comment', required: true, schema: undefined, examples: undefined})@ApiResponse({status: 201, description: 'Indicates the comment was successfully added.'})@ApiResponse({status: 404, description: 'Indicates the post was not found.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:413\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@ApiOperation({summary: 'Create post', description: 'Get a post'})@ApiBody({type: CreatePostDto, description: 'The input data to create a new blog post', required: true, schema: undefined, examples: undefined})@ApiResponse({status: 201, description: 'Indicates, the request was successful.'})@ApiResponse({status: 409, description: 'Indicates, the post already exists.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRelation(createRelationshipDto: CreateRelationshipDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/relation/')@ApiOperation({summary: 'Set Post Relationship', parameters: undefined, description: 'Set Relationship between two posts'})@ApiResponse({status: 201, description: 'Indicates, the request was successful.'})@ApiResponse({status: 400, description: 'Indicates, the request failed.'})@ApiResponse({status: 404, description: 'Indicates, the post doesnt exist.'})@ApiResponse({status: 409, description: 'Indicates, the relationship already exists.'})@ApiResponse({status: 422, description: 'Indicates, the query parameters are not valid'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:294\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRelationshipDto\n                                            \n                                                            CreateRelationshipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(postId: string, commentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:postId/comments/:commentId')@ApiOperation({summary: 'Delete a comment from a post', description: 'Remove a specific comment from a blog post by its ID'})@ApiParam({name: 'postId', description: 'ID of the blog post', required: true, schema: undefined})@ApiParam({name: 'commentId', description: 'ID of the comment to be deleted', required: true, schema: undefined})@ApiResponse({status: 200, description: 'Successfully deleted comment'})@ApiResponse({status: 400, description: 'Invalid post or comment id'})@ApiResponse({status: 404, description: 'Post or comment not found'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:461\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({summary: 'Delete post', description: 'Delete a post based on the id', operationId: 'deletePost'})@ApiParam({name: 'id', description: 'ID of post to delete', required: true, type: String})@ApiResponse({status: 200, description: 'Indicates, the request was successful.'})@ApiResponse({status: 404, description: 'Indicates, the post doesnt exist.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/comments')@ApiOperation({summary: 'Get comments for a post', description: 'Retrieve all comments associated with a specific blog post by its ID'})@ApiParam({name: 'id', description: 'Id of the blog post', required: true, schema: undefined})@ApiResponse({status: 200, description: 'Successfully retrieved comments'})@ApiResponse({status: 400, description: 'Invalid post ID'})@ApiResponse({status: 404, description: 'Post not found'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:341\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({summary: 'Get post', description: 'Get a post based on the id', operationId: 'getPost'})@ApiParam({name: 'id', description: 'The id of the post', required: true, type: String})@ApiResponse({status: 200, description: 'Indicates, the request was successful.'})@ApiResponse({status: 404, description: 'Indicates, the post doesnt exist.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(page?: number, limit?: number, slug?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')@ApiOperation({summary: 'Get all posts', description: 'Get all posts'})@ApiQuery({name: 'page', type: Number, required: false})@ApiQuery({name: 'limit', type: Number, required: false})@ApiQuery({name: 'slug', type: String, required: false})@ApiResponse({status: 200, description: 'Indicates, the request was successful.'})@ApiResponse({status: 404, description: 'Indicates, that the are no posts.'})@ApiResponse({status: 422, description: 'Indicates, the query parameters are not valid'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getRelatedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRelatedPosts(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/relations')@ApiOperation({summary: 'Post Relationships', parameters: undefined, description: 'Get Relationships of a post'})@ApiResponse({status: 200, description: 'Indicates, the request was successful.'})@ApiResponse({status: 404, description: 'Indicates, the post doesnt exist.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:238\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, HttpException, HttpStatus } from \"@nestjs/common\";\nimport { ApiBody, ApiOperation, ApiParam, ApiQuery, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { PostService } from \"./post.service\";\nimport { CreatePostDto } from \"./dto/create-post.dto\";\nimport { BlogPost } from \"@/schemas/post.schema\";\nimport { PostCircularRelationship, PostDoesntExist, PostDoesntHaveComments, PostIdValidationError, PostRelationConflict, PostSlugValidationError } from \"./post.errors\";\nimport { CreateRelationshipDto } from \"./dto/create-relationship.dto\";\nimport { createdBlogPost } from \"./post.types\";\nimport { CreateCommentDto } from \"./dto/create-comment.dto\";\nimport { BlogPostComment } from \"@/schemas/comment.schema\";\n\n@ApiTags(\"Post Managment\")\n@Controller(\"/api/v1/posts\")\nexport class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @Post(\"\")\n  @ApiOperation({\n    summary: \"Create post\",\n    description: \"Get a post\",\n  })\n  @ApiBody({\n    type: CreatePostDto,\n    description: \"The input data to create a new blog post\",\n    required: true,\n    schema: {\n      type: \"object\",\n      properties: {\n        title: {\n          description: \"Title of the blog post\",\n          type: \"string\",\n          default: \"How to configure Swagger 101\",\n        },\n        content: {\n          description: \"Content of the blog post\",\n          type: \"string\",\n          default: \"How to configure Swagger 101\",\n        },\n        imagePath: {\n          description: \"Url of the image of the blog post\",\n          type: \"string\",\n          default: \"https://static1.smartbear.co/swagger/media/assets/images/swagger_logo.svg\",\n        },\n      },\n      required: [\"status\"],\n    },\n    examples: {\n      successExample: {\n        value: {\n          title: \"My new blog post\",\n          content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n          imagePath: \"https://static1.smartbear.co/swagger/media/assets/images/swagger_logo.svg\",\n        },\n        description: \"Example blog post data\",\n      },\n      failExample: {\n        value: {\n          title: \"My new blog post\",\n          content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n          imagePath: \"\",\n        },\n        description: \"Example blog post data\",\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 409,\n    description: \"Indicates, the post already exists.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async create(@Body() createPostDto: CreatePostDto): Promise {\n    try {\n      const result = await this.postService.createBlogPost(createPostDto);\n      return result;\n    } catch (error) {\n      if (error instanceof PostRelationConflict) {\n        throw new HttpException(error.message, HttpStatus.CONFLICT);\n      } else if (error instanceof PostDoesntExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Get(\"\")\n  @ApiOperation({\n    summary: \"Get all posts\",\n    description: \"Get all posts\",\n  })\n  @ApiQuery({\n    name: \"page\",\n    type: Number,\n    required: false,\n  })\n  @ApiQuery({\n    name: \"limit\",\n    type: Number,\n    required: false,\n  })\n  @ApiQuery({\n    name: \"slug\",\n    type: String,\n    required: false,\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, that the are no posts.\",\n  })\n  @ApiResponse({\n    status: 422,\n    description: \"Indicates, the query parameters are not valid\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async getPosts(@Query(\"page\") page?: number, @Query(\"limit\") limit?: number, @Query(\"slug\") slug?: string): Promise {\n    try {\n      if (page !== undefined && limit !== undefined) {\n        const posts = await this.postService.getPostsByPagination(page, limit);\n        return posts;\n      }\n      if (slug !== undefined) {\n        const post = await this.postService.getPostBySlug(slug);\n        return post;\n      }\n      const posts = await this.postService.getAllPosts();\n      return posts;\n    } catch (error) {\n      if (error instanceof PostRelationConflict) {\n        throw new HttpException(error.message, HttpStatus.CONFLICT);\n      } else if (error instanceof PostDoesntExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostSlugValidationError) {\n        throw new HttpException(error.message, HttpStatus.UNPROCESSABLE_ENTITY);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    summary: \"Get post\",\n    description: \"Get a post based on the id\",\n    operationId: \"getPost\",\n  })\n  @ApiParam({\n    name: \"id\",\n    description: \"The id of the post\",\n    required: true,\n    type: String,\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, the post doesnt exist.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async getPostById(@Param(\"id\") id: string): Promise {\n    try {\n      const post = await this.postService.getPostById(id);\n      return post;\n    } catch (error) {\n      if (error instanceof PostDoesntExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    summary: \"Delete post\",\n    description: \"Delete a post based on the id\",\n    operationId: \"deletePost\",\n  })\n  @ApiParam({\n    name: \"id\",\n    description: \"ID of post to delete\",\n    required: true,\n    type: String,\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, the post doesnt exist.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async deletePost(@Param(\"id\") id: string): Promise {\n    try {\n      await this.postService.deletePost(id);\n      return { result: \"success\" };\n    } catch (error) {\n      if (error instanceof PostDoesntExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Get(\"/:id/relations\")\n  @ApiOperation({\n    summary: \"Post Relationships\",\n    parameters: [\n      {\n        in: \"query\",\n        name: \"sourcePostId\",\n        required: true,\n        description: \"sourcePostId to use\",\n      },\n    ],\n    description: \"Get Relationships of a post\",\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, the post doesnt exist.\",\n  })\n  @ApiResponse({\n    status: 500,\n    description: \"Indicates, the request failed.\",\n  })\n  async getRelatedPosts(@Param(\"id\") id: string): Promise {\n    try {\n      const post = await this.postService.getRelatedPosts(id);\n      return { relatedPosts: post.relatedPosts };\n    } catch (error) {\n      if (error instanceof PostDoesntExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Post(\"/relation/\")\n  @ApiOperation({\n    summary: \"Set Post Relationship\",\n    parameters: [\n      {\n        in: \"query\",\n        name: \"sourcePostId\",\n        required: true,\n        description: \"sourcePostId to use\",\n      },\n      {\n        in: \"query\",\n        name: \"relationPostId\",\n        required: true,\n\n        description: \"relationPostId to use\",\n      },\n    ],\n    description: \"Set Relationship between two posts\",\n  })\n  @ApiResponse({\n    status: 201,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Indicates, the request failed.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, the post doesnt exist.\",\n  })\n  @ApiResponse({\n    status: 409,\n    description: \"Indicates, the relationship already exists.\",\n  })\n  @ApiResponse({\n    status: 422,\n    description: \"Indicates, the query parameters are not valid\",\n  })\n  @ApiResponse({\n    status: 500,\n    description: \"Indicates, the request failed.\",\n  })\n  async createRelation(@Query() createRelationshipDto: CreateRelationshipDto): Promise {\n    try {\n      const post = await this.postService.createRelation(createRelationshipDto.sourcePostId, createRelationshipDto.relationPostId);\n      return { success: true, data: post };\n    } catch (error) {\n      if (error instanceof PostRelationConflict) {\n        throw new HttpException(error.message, HttpStatus.CONFLICT);\n      } else if (error instanceof PostDoesntExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostCircularRelationship) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      } else if (error instanceof PostIdValidationError) {\n        throw new HttpException(error.message, HttpStatus.UNPROCESSABLE_ENTITY);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Get(\"/:id/comments\")\n  @ApiOperation({\n    summary: \"Get comments for a post\",\n    description: \"Retrieve all comments associated with a specific blog post by its ID\",\n  })\n  @ApiParam({\n    name: \"id\",\n    description: \"Id of the blog post\",\n    required: true,\n    schema: {\n      type: \"string\",\n    },\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Successfully retrieved comments\",\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Invalid post ID\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Post not found\",\n  })\n  @ApiResponse({\n    status: 500,\n    description: \"Indicates, the request failed.\",\n  })\n  async getComments(@Param(\"id\") postId: string): Promise {\n    try {\n      const result = await this.postService.getComments(postId);\n      return result;\n    } catch (error) {\n      if (error instanceof PostDoesntExist || PostDoesntHaveComments) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostIdValidationError) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Post(\"/:id/comments\")\n  @ApiOperation({\n    summary: \"Add comment to post\",\n    description: \"Add a comment to a blog post\",\n  })\n  @ApiBody({\n    type: CreateCommentDto,\n    description: \"The input data to create a new comment\",\n    required: true,\n    schema: {\n      type: \"object\",\n      properties: {\n        author: {\n          description: \"Author of the comment\",\n          type: \"string\",\n          default: \"John Doe\",\n        },\n        content: {\n          description: \"Content of the comment\",\n          type: \"string\",\n          default: \"Great post!\",\n        },\n      },\n      required: [\"author\", \"content\"],\n    },\n    examples: {\n      successExample: {\n        value: {\n          author: \"John Doe\",\n          content: \"Great post!\",\n        },\n        description: \"Example comment data\",\n      },\n      failExample: {\n        value: {\n          author: \"\",\n          content: \"Great post!\",\n        },\n        description: \"Example comment data with missing author\",\n      },\n      failExample2: {\n        value: {\n          author: \"John Doe\",\n          content: \"\",\n        },\n        description: \"Example comment data with missing content\",\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: \"Indicates the comment was successfully added.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates the post was not found.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async addComment(@Param(\"id\") postId: string, @Body() createCommentDto: CreateCommentDto): Promise {\n    try {\n      const result = await this.postService.addComment(postId, createCommentDto);\n      return result;\n    } catch (error) {\n      if (error instanceof PostDoesntExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostIdValidationError) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Delete(\"/:postId/comments/:commentId\")\n  @ApiOperation({\n    summary: \"Delete a comment from a post\",\n    description: \"Remove a specific comment from a blog post by its ID\",\n  })\n  @ApiParam({\n    name: \"postId\",\n    description: \"ID of the blog post\",\n    required: true,\n    schema: {\n      type: \"string\",\n    },\n  })\n  @ApiParam({\n    name: \"commentId\",\n    description: \"ID of the comment to be deleted\",\n    required: true,\n    schema: {\n      type: \"string\",\n    },\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Successfully deleted comment\",\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Invalid post or comment id\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Post or comment not found\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async deleteComment(\n    @Param(\"postId\") postId: string,\n    @Param(\"commentId\") commentId: string,\n  ): Promise {\n    try {\n      const result = await this.postService.deleteComment(postId, commentId);\n      return result;\n    } catch (error) {\n      if (error instanceof PostDoesntExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostIdValidationError) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDoesntExist.html":{"url":"classes/PostDoesntExist.html","title":"class - PostDoesntExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDoesntExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesntExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesntHaveComments extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesntExist extends PostError {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDoesntHaveComments.html":{"url":"classes/PostDoesntHaveComments.html","title":"class - PostDoesntHaveComments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDoesntHaveComments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for posts without comments.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesntExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesntHaveComments extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesntExist extends PostError {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostError.html":{"url":"classes/PostError.html","title":"class - PostError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom error class for post-related errors.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.errors.ts:5\n                            \n                        \n\n                \n                    \n                            Creates an instance of PostError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesntExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesntHaveComments extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesntExist extends PostError {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostIdValidationError.html":{"url":"classes/PostIdValidationError.html","title":"class - PostIdValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostIdValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post ID validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesntExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesntHaveComments extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesntExist extends PostError {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPostService\n\nPostService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\nimport { PostService } from \"./post.service\";\nimport { PostController } from \"./post.controller\";\nimport { BlogPost, BlogPostSchema } from \"../schemas/post.schema\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: BlogPost.name, schema: BlogPostSchema }])],\n  controllers: [PostController],\n  providers: [PostService],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostRelationConflict.html":{"url":"classes/PostRelationConflict.html","title":"class - PostRelationConflict","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostRelationConflict\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post relation conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesntExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesntHaveComments extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesntExist extends PostError {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createBlogPost\n                            \n                            \n                                    Async\n                                createRelation\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getComments\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostBySlug\n                            \n                            \n                                    Async\n                                getPostsByPagination\n                            \n                            \n                                    Async\n                                getRelatedPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(BlogPostModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        BlogPostModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    addComment(postId: string, createCommentDto: CreateCommentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createBlogPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBlogPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRelation(sourcePostId: string, relationPostId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sourcePostId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relationPostId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(postId: string, commentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:179\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComments(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostBySlug\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostBySlug(slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostsByPagination\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostsByPagination(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRelatedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRelatedPosts(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\nimport { plainToClass } from \"class-transformer\";\n\nimport { CreatePostDto } from \"./dto/create-post.dto\";\nimport { BlogPost, BlogPostDocument } from \"@/schemas/post.schema\";\nimport { BlogPostComment } from \"@/schemas/comment.schema\";\nimport {\n  PostRelationConflict,\n  PostDoesntExist,\n  PostError,\n  PostCircularRelationship,\n  PostSlugValidationError,\n  PostIdValidationError,\n  CommentDoesntExist,\n  PostDoesntHaveComments,\n} from \"./post.errors\";\nimport { createdBlogPost } from \"./post.types\";\nimport { CreateCommentDto } from \"./dto/create-comment.dto\";\n\n@Injectable()\nexport class PostService {\n  constructor(@InjectModel(BlogPost.name) private BlogPostModel: Model) {}\n\n  async createBlogPost(@Body() createPostDto: CreatePostDto): Promise {\n    const post = plainToClass(BlogPost, createPostDto);\n    const existingPost = await this.BlogPostModel.findOne({\n      title: post.title,\n    });\n    if (existingPost) {\n      throw new PostRelationConflict(`Post with title \\\"${post.title}\\\" already exists.`);\n    }\n    const savedPost = await new this.BlogPostModel(post).save();\n    return {\n      result: \"success\",\n      title: savedPost.title,\n      content: savedPost.content,\n      imagePath: savedPost.imagePath,\n    };\n  }\n\n  async getAllPosts(): Promise {\n    const posts = await this.BlogPostModel.find().select(\"-__v\").exec();\n    if (posts.length > 0) {\n      return posts;\n    }\n    throw new PostDoesntExist(\"Posts are empty!\");\n  }\n\n  async getPostBySlug(slug: string): Promise {\n    const isSlugValid = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/.test(slug);\n    if (isSlugValid === true) {\n      const post = await this.BlogPostModel.findOne({ slug: { $eq: slug } })\n        .select(\"-__v -_id\")\n        .exec();\n      if (post) {\n        return post;\n      }\n      throw new PostDoesntExist(`Post with slug \\\"${slug}\\\" doesn't exist.`);\n    } else {\n      throw new PostSlugValidationError(\"Provided slug is not valid\");\n    }\n  }\n\n  async getPostsByPagination(page: number, limit: number): Promise {\n    const skip = page * limit;\n    return this.BlogPostModel.find().skip(skip).limit(limit).sort(\"-createdAt\").select(\"-__v -_id\").exec();\n  }\n\n  async getPostById(id: string): Promise {\n    try {\n      const post = await this.BlogPostModel.findOne({ _id: id }).select(\"-__v -_id\");\n      if (post) {\n        return post;\n      }\n      throw new PostDoesntExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    } catch (error) {\n      throw new PostDoesntExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    }\n  }\n\n  async deletePost(id: string): Promise {\n    try {\n      const result = await this.BlogPostModel.deleteOne({ _id: id }).exec();\n      if (result.deletedCount === 0) {\n        throw new PostError(`Didnt delete post with \\\"${id}\\\" .`);\n      }\n      return result.deletedCount;\n    } catch (err) {\n      throw new PostDoesntExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    }\n  }\n\n  async getRelatedPosts(id: string): Promise {\n    try {\n      const post = await this.BlogPostModel.findOne({ _id: id });\n      return { relatedPosts: post.relatedPosts };\n    } catch (error) {\n      throw new PostDoesntExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    }\n  }\n\n  async createRelation(sourcePostId: string, relationPostId: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(sourcePostId)) {\n      throw new PostIdValidationError(\"Provided sourcePostId is not valid\");\n    }\n    if (!mongoose.Types.ObjectId.isValid(relationPostId)) {\n      throw new PostIdValidationError(\"Provided relationPostId is not valid\");\n    }\n    if (sourcePostId === relationPostId) {\n      throw new PostCircularRelationship(\"Can't make a relation using only one post\");\n    }\n\n    const sourcePost: BlogPostDocument = await this.BlogPostModel.findOne({\n      _id: sourcePostId,\n    });\n    if (!sourcePost) {\n      throw new PostDoesntExist(\"Post doesn't exist cant create a relationship with other Post\");\n    }\n\n    const relationPost: BlogPostDocument = await this.BlogPostModel.findOne({\n      _id: relationPostId,\n    });\n    if (!relationPost) {\n      throw new PostDoesntExist(\"Relationship Post doesn't exist cant create a relationship with Post.\");\n    }\n\n    relationPost.relatedPosts = undefined;\n\n    const index = sourcePost.relatedPosts.findIndex(relation => relation.slug === relationPost.slug);\n\n    if (index === -1) {\n      sourcePost.relatedPosts.push(relationPost);\n      const updatedPost = await sourcePost.save();\n      return updatedPost;\n    }\n    throw new PostRelationConflict(\"Relationship between posts already exists!\");\n  }\n\n  async getComments(postId: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.BlogPostModel.findById(postId).select(\"comments\");\n    if (!post) {\n      throw new PostDoesntExist(`Post with id \\\"${postId}\\\" doesn't exist.`);\n    }\n    if (post.comments.length === 0) {\n      throw new PostDoesntHaveComments(`Post comments are empty!`);\n    }\n    return post.comments;\n  }\n\n  async addComment(postId: string, createCommentDto: CreateCommentDto): Promise {\n    if (!mongoose.Types.ObjectId.isValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.BlogPostModel.findById(postId);\n    if (!post) {\n      throw new PostDoesntExist(`Post with id \\\"${postId}\\\" doesn't exist.`);\n    }\n\n    const comment = {\n      _id: new mongoose.Types.ObjectId(),\n      author: createCommentDto.author,\n      content: createCommentDto.content,\n      date: new Date(),\n    };\n\n    post.comments.push(comment);\n    await post.save();\n\n    return post;\n  }\n\n  async deleteComment(postId: string, commentId: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.BlogPostModel.findById(postId);\n    if (!post) {\n      throw new PostDoesntExist(`Post with id \\\"${postId}\\\" doesn't exist.`);\n    }\n\n    const commentIndex = post.comments.findIndex(comment => comment._id.toString() === commentId);\n    if (commentIndex === -1) {\n      throw new CommentDoesntExist(`Comment with id \\\"${commentId}\\\" doesn't exist.`);\n    }\n    post.comments.splice(commentIndex, 1);\n    await post.save();\n\n    return { success: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostSlugValidationError.html":{"url":"classes/PostSlugValidationError.html","title":"class - PostSlugValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostSlugValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post slug validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesntExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesntHaveComments extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesntExist extends PostError {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dto/create-comment.dto.stub.ts\n            \n            variable\n            CreatePostDtoStub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dto/create-post.dto.stub.ts\n            \n            variable\n            CreatePostDtoStub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/post/dto/create-relationship.dto.ts\n            \n            class\n            CreateRelationshipDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            CommentDoesntExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostCircularRelationship\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostDoesntExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostDoesntHaveComments\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostIdValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostRelationConflict\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostSlugValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/schemas/comment.schema.ts\n            \n            class\n            BlogPostComment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/schemas/comment.schema.ts\n            \n            variable\n            BlogPostCommentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/post.schema.ts\n            \n            class\n            BlogPost\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/schemas/post.schema.ts\n            \n            function\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/post.schema.ts\n            \n            variable\n            BlogPostSchema\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^3.0.2\n        \n            @nestjs/common : ^10.3.8\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.8\n        \n            @nestjs/mongoose : ^10.0.6\n        \n            @nestjs/platform-express : ^10.3.8\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @swc/helpers : ^0.5.11\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            mongoose : ^8.4.0\n        \n            reflect-metadata : ^0.2.2\n        \n            slugify : ^1.6.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateSlug   (src/.../post.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    src/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(blogPostTitle: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                blogPostTitle\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📝 Headless CMS\nThis is a toy project for a headless CMS that allows you to create, delete, and partially manage posts for your blog, as well as create relations between posts. The headless CMS is built using NestJS and MongoDB.\n🚀 Getting Started\nTo get started with this project, you can choose to either run the project natively on your machine, or with Docker.\n🏠 Running natively\nTo run the project natively, you will need to have Node.js v20.13.1 or higher and npm v10.5.2 or higher installed on your machine.\n\n🍴 Clone this repository to your local machine.\n💻 Run npm install to install the necessary dependencies.\n🚀 Start a MongoDB instance on your machine by following the instructions provided by MongoDB for your specific operating system. You can download the MongoDB Community Server from here.\n📝 Rename .env.example to .env and replace the values with your own MongoDB connection details and desired api port.\n🚀 Run npm start to start the server.\n\n🐳 Running with Docker\nTo run the project with Docker, you will need to have Docker installed on your machine.\n\n🍴 Clone this repository to your local machine.\n📝 Copy the .env.example file and rename it to .env. Open the .env file and specify the desired values for MONGODB_URI and PORT variables.\nFor example:Example :# The MongoDB connection string for the BlogPost database\nMONGODB_URI=\"mongodb://mongodb/test\"\n# The port on which the Blog CMS API will run\nPORT=\"3000\"\n🐳 Run docker compose build to build the containers.\n🐳 Run docker compose up to start the containers.\n🌍 The API will be available at http://localhost:3000/.\n\n📖 Usage\nOnce the server is running, you can use the following endpoints to manage your blog posts:\n\nGET /api/v1/posts: Returns a list of all posts.\nPOST /api/v1/posts: Creates a new post.\nGET /api/v1/posts?page&limit: Get Posts with pagination based on created date.\nGET /api/v1/posts?slug=:slug: Returns a specific post by slug.\nGET /api/v1/posts/:id: Returns a specific post by post ID.\nDELETE /api/v1/posts/:id: Deletes a post by post ID.\nGET /api/v1/posts/:id/relations: Returns relationship posts by post ID\nPOST /api/v1/posts/relation/?sourcePostId&relationPostId: Sets a relationship between two posts.\nGET /heath: Returns useful system information, such as server uptime and memory usage. This endpoint can be used to monitor the health of the application.\n\nNote: The current pagination implementation is based on the page and limit query parameters and orders the results based on created date in ascending order.\n🚀 Future Improvements\nHere are some potential improvements that could be made to this project:\n\n Implement authentication to secure the API.\n Add support for media uploads (images, videos, etc.).\n Add support for user: Users can create accounts, log in, and manage their profile.\n Have multiple users create their own posts: Each user can create their own posts and manage them.\n Create a frontend interface for post management.\n Implement a more robust pagination solution that allows for custom sorting and filtering.\n Add support for different languages and locales.\n Write jest tests\n Add a proccess manager\n Add Github Actions to publish image to Docker Hub, Github Registry etc.\n\n✅ Completed Tasks\nHere are the tasks that have already been completed in this project:\n\n✅ Further optimize the Docker images to reduce size, making the deployment process faster and more efficient.\n✅ Rewrite the project in TypeScript for better type safety.\n✅ Refactor the project using the NestJs framework for better code organization and modularity.\n✅ Add support for comments in each post: Users and non-users can add comments to posts and engage in discussions.\n\n🤝 Contributing\nContributions to this project are welcome! If you have any suggestions, bug reports, or feature requests, please open an issue or submit a pull request.\n📝 License\nThis project is licensed under the Apache License, Version 2.0. See the LICENSE file for details.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright 2024 Nikolaos Grigoropoulos\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nHealthModule\n\nHealthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : A basic headless CMS to create your own blog with the help of mongodb and nestjs(express).\n        \n            Keywords : \n        \n            License : Apache-2.0\n        \n            Author : Nikolaos Grigoropoulos\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogPostCommentDocument   (src/.../comment.schema.ts)\n                        \n                        \n                            BlogPostDocument   (src/.../post.schema.ts)\n                        \n                        \n                            createdBlogPost   (src/.../post.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/comment.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostCommentDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/schemas/post.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/post/post.types.ts\n    \n    \n        \n            \n                \n                    \n                    createdBlogPost\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogPostCommentSchema   (src/.../comment.schema.ts)\n                        \n                        \n                            BlogPostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            CreatePostDtoStub   (src/.../create-comment.dto.stub.ts)\n                        \n                        \n                            CreatePostDtoStub   (src/.../create-post.dto.stub.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/comment.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostCommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostComment)\n                    \n                \n\n\n        \n    \n\n    src/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPost)\n                    \n                \n\n\n        \n    \n\n    src/post/dto/create-comment.dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CreatePostDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CreateCommentDto => ({\n  author: \"John Doe\",\n  content: \"Great Post!\",\n})\n                    \n                \n\n\n        \n    \n\n    src/post/dto/create-post.dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CreatePostDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CreatePostDto => ({\n  title: \"My new blog post\",\n  content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  imagePath: \"/images/my-new-post.jpg\",\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

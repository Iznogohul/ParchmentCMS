var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.667,1,2.436]],["body/controllers/AppController.html",[0,2.804,1,4.097,2,2.311,3,0.352,4,0.315,5,0.242,6,4.216,7,0.902,8,2.804,9,5.725,10,1.708,11,0.022,12,1.146,13,4.945,14,2.039,15,0.785,16,0.971,17,1.524,18,3.726,19,4.216,20,3.377,21,2.039,22,4.945,23,4.945,24,0.352,25,0.236,26,3.736,27,3.377,28,2.168,29,4.945,30,0.018,31,0.018]],["title/modules/AppModule.html",[32,1.471,33,2.436]],["body/modules/AppModule.html",[1,4.08,2,2.519,3,0.297,4,0.265,5,0.204,11,0.022,16,1.05,17,1.284,18,3.865,19,3.554,24,0.297,25,0.199,30,0.016,31,0.016,32,2.463,33,4.917,34,2.082,35,2.082,36,2.606,37,2.606,38,2.233,39,3.446,40,2.606,41,3.554,42,3.554,43,3.554,44,4.188,45,4.188,46,4.188,47,3.865,48,3.369,49,2.606,50,2.405,51,4.168,52,3.369,53,3.149,54,1.948,55,4.168,56,3.554,57,4.168,58,4.168,59,4.168,60,4.168,61,3.554,62,4.168,63,4.168]],["title/injectables/AppService.html",[18,2.058,64,1.306]],["body/injectables/AppService.html",[3,0.362,4,0.323,5,0.249,7,0.927,8,2.85,9,5.777,11,0.022,12,1.177,14,2.094,15,0.798,16,0.764,17,1.565,18,3.518,24,0.362,25,0.242,28,2.228,30,0.018,31,0.018,64,2.232,65,2.721,66,4.331,67,5.08,68,4.331,69,5.08,70,3.838,71,5.08,72,3.47,73,4.331,74,5.08,75,4.331,76,3.838,77,4.331]],["title/controllers/AuthController.html",[0,1.667,78,2.436]],["body/controllers/AuthController.html",[0,1.411,2,1.411,3,0.215,4,0.192,5,0.148,7,0.551,8,2.021,10,1.745,11,0.022,12,1.171,14,2.083,16,0.995,17,0.93,20,2.061,21,1.244,24,0.215,25,0.144,27,2.061,28,2.216,30,0.013,31,0.013,78,2.954,79,2.573,80,2.28,81,3.018,82,3.761,83,3.687,84,3.687,85,3.687,86,2.573,87,3.507,88,3.018,89,4.705,90,1.891,91,2.506,92,4.705,93,4.324,94,2.316,95,2.573,96,4.705,97,5.519,98,4.324,99,3.687,100,4.169,101,3.018,102,3.687,103,5.053,104,3.018,105,2.362,106,1.745,107,1.204,108,2.362,109,3.036,110,2.573,111,3.8,112,3.018,113,4.324,114,3.018,115,3.687,116,2.16,117,2.703,118,2.703,119,2.954,120,3.018,121,3.018,122,3.913,123,4.309,124,3.184,125,3.018,126,3.018,127,2.28,128,0.879,129,2.573,130,3.45,131,3.018,132,3.687,133,5.459,134,2.021,135,1.741,136,2.524,137,2.28,138,2.915,139,2.573,140,2.573,141,3.818,142,3.018,143,1.887,144,2.28,145,2.573,146,3.018,147,3.018,148,3.018,149,3.018,150,1.616,151,2.703,152,3.018,153,5.337,154,3.018,155,3.018,156,3.018,157,1.616,158,2.573,159,3.018,160,3.018,161,3.018,162,2.573,163,3.018,164,3.018,165,3.018]],["title/modules/AuthModule.html",[32,1.471,44,2.23]],["body/modules/AuthModule.html",[2,2.56,3,0.304,4,0.272,5,0.21,11,0.022,16,1.014,17,1.317,24,0.304,25,0.204,30,0.017,31,0.017,32,2.492,34,2.135,35,2.135,36,2.672,37,2.672,38,2.289,39,3.487,40,3.779,44,4.449,47,3.89,48,3.424,49,2.672,50,2.466,52,3.424,61,3.644,78,4.129,138,4.129,139,3.644,166,3.644,167,4.274,168,3.644,169,3.644,170,3.89,171,4.274,172,4.274,173,3.229,174,4.274,175,4.274,176,4.274,177,4.274,178,3.644,179,4.274,180,4.274,181,4.274]],["title/injectables/AuthService.html",[64,1.306,138,2.058]],["body/injectables/AuthService.html",[3,0.306,4,0.273,5,0.21,7,0.784,8,2.568,11,0.022,12,1.273,14,1.77,16,0.961,17,1.323,24,0.306,25,0.205,28,1.883,30,0.017,31,0.017,64,2.011,65,2.3,82,3.495,83,4.684,86,4.684,87,3.808,91,1.77,105,2.568,106,1.897,107,1.132,108,2.568,109,2.744,116,2.145,136,3.372,137,3.244,138,3.169,140,3.661,141,3.244,150,2.942,151,3.434,158,4.684,173,3.244,182,3.661,183,5.165,184,3.661,185,6.864,186,4.294,187,4.294,188,3.026,189,2.684,190,4.294,191,3.661,192,4.294,193,3.661,194,4.294,195,4.294]],["title/classes/BlogPost.html",[25,0.17,196,1.564]],["body/classes/BlogPost.html",[3,0.22,4,0.197,5,0.152,7,0.935,10,2.265,11,0.023,12,1.52,15,0.87,16,0.887,24,0.365,25,0.147,28,1.357,30,0.013,31,0.013,54,1.446,94,2.357,107,1.431,134,1.446,188,2.198,196,2.447,197,0.717,198,1.934,199,1.435,200,1.769,201,2.395,202,3.499,203,3.831,204,3.202,205,3.871,206,1.769,207,2.956,208,3.499,209,2.956,210,4.758,211,4.455,212,3.812,213,3.093,214,4.216,215,4.388,216,3.093,217,3.159,218,5.897,219,5.897,220,3.831,221,3.093,222,3.093,223,3.093,224,3.812,225,3.093,226,3.093,227,3.093,228,3.093,229,3.093,230,5.025,231,2.337,232,3.006,233,1.785,234,3.752,235,3.006,236,3.093,237,3.093,238,2.637,239,1.446,240,2.113,241,3.752,242,2.113,243,2.637,244,3.752,245,2.637,246,3.093,247,3.093,248,3.093,249,3.093,250,3.752,251,4.401,252,3.093,253,3.093,254,3.093,255,3.093]],["title/classes/BlogPostComment.html",[25,0.17,209,2.058]],["body/classes/BlogPostComment.html",[3,0.3,4,0.268,5,0.207,7,0.769,10,2.191,11,0.022,12,1.47,15,0.83,16,0.817,24,0.428,25,0.201,30,0.016,31,0.016,54,1.97,94,2.908,107,1.385,188,2.106,197,0.977,199,1.771,201,2.807,203,4.2,209,3.132,210,3.594,211,3.185,212,2.879,214,4.102,215,4.273,220,3.394,230,4.959,231,3.185,232,3.708,233,2.432,235,2.879,238,3.594,239,1.97,256,2.879,257,5.121,258,3.465,259,6.006,260,5.429,261,4.216,262,4.216,263,4.216,264,4.216,265,4.216,266,3.594,267,3.185,268,3.594]],["title/interfaces/BlogPostSanitizedResponse.html",[269,2.058,270,1.91]],["body/interfaces/BlogPostSanitizedResponse.html",[3,0.346,4,0.309,5,0.238,7,0.886,11,0.022,15,0.911,16,0.964,24,0.423,30,0.018,31,0.018,91,2.001,107,1.222,124,2.8,130,3.708,135,2.8,196,2.129,199,1.935,202,4.557,208,4.557,217,3.177,269,3.422,270,3.177,271,3.315,272,3.667,273,2.213,274,5.058,275,3.315,276,3.034]],["title/classes/BlogPostUser.html",[25,0.17,134,1.667]],["body/classes/BlogPostUser.html",[3,0.3,4,0.268,5,0.207,7,0.769,10,2.191,11,0.022,12,1.47,15,0.906,16,0.817,24,0.452,25,0.201,30,0.016,31,0.016,54,1.97,94,2.908,106,2.074,107,1.353,116,3,117,3.754,134,2.538,188,2.712,197,0.977,199,1.771,214,4.792,215,4.465,217,2.258,220,3.965,230,4.959,231,3.185,232,3.708,233,2.432,240,4.332,277,2.879,278,4.102,279,4.216,280,4.216,281,4.216,282,4.216,283,3.185,284,4.629,285,2.879]],["title/classes/CommentDoesNotExist.html",[25,0.17,286,1.306]],["body/classes/CommentDoesNotExist.html",[3,0.249,4,0.223,5,0.172,11,0.023,15,0.628,24,0.486,25,0.349,30,0.014,31,0.014,90,0.963,128,1.9,197,0.811,200,1.891,206,1.209,273,2.487,286,1.756,287,1.443,288,2.863,289,2.401,290,2.643,291,1.443,292,1.443,293,1.443,294,1.756,295,1.535,296,1.535,297,1.443,298,1.535,299,1.209,300,1.209,301,1.535,302,1.443,303,1.209,304,2.104,305,2.104,306,1.209,307,1.209,308,1.209,309,1.209,310,1.443,311,1.209,312,2.104,313,1.978,314,1.209,315,1.281]],["title/classes/CommentInsufficientPermissionsError.html",[25,0.17,315,1.306]],["body/classes/CommentInsufficientPermissionsError.html",[3,0.249,4,0.222,5,0.171,11,0.023,15,0.627,24,0.486,25,0.349,30,0.014,31,0.014,90,0.961,128,1.934,197,0.81,200,1.655,206,1.207,273,2.487,286,1.279,287,1.441,288,2.862,289,2.102,290,2.642,291,1.441,292,1.441,293,1.441,294,1.754,295,1.532,296,1.532,297,1.441,298,1.532,299,1.207,300,1.207,301,1.532,302,1.441,303,1.207,304,2.102,305,2.102,306,1.207,307,1.207,308,1.207,309,1.207,310,1.441,311,1.207,312,2.399,313,2.255,314,1.207,315,1.754]],["title/classes/CreateCommentDto.html",[25,0.17,316,2.058]],["body/classes/CreateCommentDto.html",[3,0.353,4,0.315,5,0.243,7,0.905,10,2.075,11,0.022,12,1.392,15,0.879,16,0.746,24,0.353,25,0.286,30,0.018,31,0.018,107,1.238,197,1.149,199,1.96,201,3.022,258,3.73,316,3.466,317,4.042,318,4.227,319,6.009,320,4.958,321,4.958,322,3.73,323,3.73,324,2.476]],["title/classes/CreatePostDto.html",[25,0.17,325,2.058]],["body/classes/CreatePostDto.html",[3,0.333,4,0.297,5,0.229,7,0.853,10,2.175,11,0.022,12,1.459,15,0.903,16,0.871,21,1.926,24,0.333,25,0.276,30,0.018,31,0.018,107,1.298,197,1.083,199,1.889,201,2.943,204,3.937,207,3.633,317,4.116,322,3.798,323,3.798,324,2.333,325,3.342,326,3.983,327,5.369,328,4.671,329,4.671,330,4.671,331,3.798]],["title/classes/CreateRelationshipDto.html",[25,0.17,332,2.436]],["body/classes/CreateRelationshipDto.html",[3,0.347,4,0.31,5,0.239,7,0.888,10,2.052,11,0.022,12,1.377,15,0.874,16,0.894,21,2.007,24,0.347,25,0.283,30,0.018,31,0.018,107,1.224,197,1.128,199,1.938,317,4.009,322,3.7,323,3.7,324,2.431,327,5.066,331,3.7,332,4.058,333,4.15,334,4.845,335,4.845,336,4.867,337,4.867]],["title/interfaces/ExpressRequestWithBlogPostUser.html",[124,2.058,269,2.058]],["body/interfaces/ExpressRequestWithBlogPostUser.html",[3,0.352,4,0.315,5,0.242,7,0.902,11,0.022,15,0.785,16,0.971,24,0.427,30,0.018,31,0.018,91,2.768,107,1.019,124,3.461,130,4.037,135,2.853,196,2.168,199,1.957,202,3.377,208,3.377,217,3.597,269,3.461,270,2.648,271,3.377,272,3.736,273,2.231,274,4.216,275,3.377,276,3.091]],["title/classes/GetRelatedPostsDto.html",[25,0.17,338,2.436]],["body/classes/GetRelatedPostsDto.html",[3,0.34,4,0.303,5,0.234,7,0.87,10,1.647,11,0.022,12,1.105,15,0.768,16,0.882,21,1.965,24,0.34,25,0.279,30,0.018,31,0.018,90,1.311,100,4.432,107,0.982,128,1.708,157,3.142,197,1.105,199,1.913,240,4.007,294,1.745,307,2.352,324,2.381,331,3.384,338,4.007,339,5.002,340,4.007,341,4.064,342,3.256,343,4.432,344,3.667,345,4.767,346,4.007,347,5.002,348,4.767,349,5.866,350,4.767]],["title/controllers/HealthController.html",[0,1.667,351,2.436]],["body/controllers/HealthController.html",[0,1.94,2,1.94,3,0.296,4,0.264,5,0.203,7,0.757,8,2.512,10,1.433,11,0.023,12,0.962,14,1.711,16,0.897,17,1.279,20,2.834,21,1.711,24,0.296,25,0.198,28,1.82,30,0.016,31,0.016,80,3.135,109,3.402,150,2.223,151,4.083,346,2.834,351,3.671,352,3.538,353,4.582,354,6.305,355,4.15,356,4.15,357,5.375,358,5.375,359,5.375,360,5.375,361,5.375,362,5.375,363,4.15,364,4.15,365,3.135,366,4.15,367,4.15,368,4.15,369,3.538,370,4.15,371,4.15,372,4.15,373,4.15,374,3.538,375,4.15,376,4.15,377,4.15,378,4.15,379,5.375,380,6.81,381,4.15,382,4.15,383,3.538,384,4.15,385,4.15]],["title/modules/HealthModule.html",[32,1.471,45,2.23]],["body/modules/HealthModule.html",[2,2.869,3,0.366,4,0.327,5,0.252,11,0.022,16,1.023,17,1.582,24,0.366,25,0.245,30,0.019,31,0.019,32,2.53,34,2.565,45,3.837,52,3.21,351,4.483,365,3.88,386,5.136,387,6.138,388,6.138,389,4.379,390,5.136]],["title/injectables/JwtAuthGuard.html",[64,1.306,143,2.23]],["body/injectables/JwtAuthGuard.html",[3,0.377,4,0.337,5,0.26,11,0.022,16,0.94,17,1.632,24,0.377,25,0.252,30,0.019,31,0.019,64,2.288,65,2.837,143,3.908,273,2.159,391,4.516,392,4.516,393,6.251,394,5.33,395,5.297,396,4.002]],["title/injectables/JwtStrategy.html",[64,1.306,170,2.058]],["body/injectables/JwtStrategy.html",[3,0.303,4,0.271,5,0.209,7,0.776,8,2.553,11,0.022,12,1.266,14,1.754,15,0.715,16,0.99,17,1.311,24,0.303,25,0.203,26,3.214,27,2.906,28,1.866,30,0.017,31,0.017,64,1.999,65,2.279,82,3.48,91,2.252,105,2.553,106,1.886,107,1.312,108,2.553,109,2.728,116,2.125,134,1.989,135,2.454,136,3.364,137,3.214,144,4.557,150,2.279,170,3.151,178,3.627,184,3.627,188,2.125,189,2.659,191,3.627,193,3.627,273,1.886,394,5.143,396,3.214,397,3.627,398,5.461,399,5.461,400,4.254,401,5.461,402,4.656,403,4.254,404,4.254,405,4.254,406,3.627,407,4.254,408,4.254,409,4.254,410,4.254,411,3.627,412,4.254,413,4.254]],["title/classes/LoginUserDto.html",[25,0.17,87,2.058]],["body/classes/LoginUserDto.html",[3,0.276,4,0.246,5,0.19,7,0.707,10,2.12,11,0.022,12,1.422,15,0.89,16,0.867,21,1.597,24,0.276,25,0.245,30,0.016,31,0.016,87,2.964,90,1.586,91,2.707,107,1.265,108,3.068,116,3.5,117,4.38,157,3.516,197,0.898,199,1.675,278,4.363,294,1.418,322,3.541,323,2.964,324,1.935,331,3.541,342,3.937,414,5.446,415,2.645,416,5.764,417,3.873,418,3.509,419,3.302,420,5.597,421,5.234,422,3.873,423,3.873,424,3.873,425,3.873,426,3.873,427,2.926,428,5.764,429,3.881,430,3.873,431,3.302,432,3.302,433,3.302]],["title/classes/PostCircularRelationship.html",[25,0.17,303,1.232]],["body/classes/PostCircularRelationship.html",[3,0.249,4,0.222,5,0.171,11,0.023,15,0.627,24,0.486,25,0.349,30,0.014,31,0.014,90,0.961,128,1.934,197,0.81,200,1.655,206,1.207,273,2.487,286,1.279,287,1.441,288,2.862,289,2.102,290,2.642,291,1.441,292,1.441,293,1.441,294,1.754,295,1.532,296,1.532,297,1.441,298,1.532,299,1.207,300,1.207,301,2.102,302,1.976,303,1.655,304,2.102,305,2.102,306,1.207,307,1.207,308,1.207,309,1.207,310,1.441,311,1.207,312,2.102,313,1.976,314,1.207,315,1.279]],["title/controllers/PostController.html",[0,1.667,434,2.436]],["body/controllers/PostController.html",[0,0.386,2,0.386,3,0.059,4,0.053,5,0.04,7,0.151,8,0.696,10,1.375,11,0.022,12,0.923,14,1.641,15,0.798,16,0.702,17,0.254,20,0.564,21,0.34,24,0.059,25,0.039,26,0.624,27,0.564,28,1.912,30,0.005,31,0.005,75,1.27,80,0.624,82,3.37,89,2.74,90,1.964,91,1.549,92,2.74,94,2.239,95,2.125,96,3.203,99,3.203,100,2.176,102,4.292,105,2.401,106,1.865,107,1.241,108,1.861,109,2.613,115,2.125,118,1.558,119,1.017,123,3.394,124,2.412,127,1.125,128,2.008,129,0.704,130,3.879,132,1.27,133,5.367,134,0.951,143,0.516,145,0.704,153,5.367,157,1.543,162,2.125,188,2.331,189,2.725,196,0.362,199,0.486,200,0.995,201,2.038,204,1.272,205,0.624,206,1.11,207,1.438,209,0.476,211,2.647,212,1.967,215,3.27,220,3.585,239,2.869,258,2.021,270,0.442,276,0.516,288,2.429,293,0.34,299,0.861,300,1.444,302,1.028,303,0.515,306,0.515,307,2.066,308,0.995,309,1.375,311,0.515,314,0.515,316,2.412,325,2.167,332,2.195,334,1.125,335,1.883,338,2.195,340,0.564,344,3.325,411,1.736,418,1.017,434,1.017,435,0.704,436,0.704,437,1.27,438,2.566,439,1.27,440,1.736,441,1.736,442,1.27,443,1.27,444,1.49,445,1.27,446,0.704,447,0.825,448,1.883,449,4.289,450,1.49,451,2.492,452,4.181,453,2.492,454,6.755,455,0.825,456,0.825,457,5.231,458,4.922,459,0.825,460,3.203,461,0.825,462,0.825,463,3.213,464,2.492,465,1.49,466,2.492,467,0.825,468,0.825,469,0.825,470,2.492,471,2.428,472,1.125,473,1.27,474,0.825,475,0.825,476,3.203,477,2.492,478,2.492,479,3.203,480,1.49,481,0.825,482,0.704,483,2.74,484,0.825,485,3.008,486,1.49,487,1.883,488,1.49,489,0.825,490,2.492,491,4.521,492,0.825,493,1.49,494,1.49,495,0.825,496,0.704,497,0.825,498,1.883,499,2.492,500,0.825,501,1.49,502,0.825,503,0.704,504,0.825,505,1.49,506,1.27,507,1.49,508,0.825,509,0.825,510,0.704,511,0.825,512,0.825,513,0.825,514,0.825,515,3.159,516,2.647,517,0.825,518,0.825,519,1.967,520,1.49,521,0.825,522,0.825,523,0.825,524,1.736,525,0.825,526,0.825,527,0.825,528,0.825,529,0.825,530,0.825,531,0.825,532,2.036,533,4.181,534,3.213,535,2.492,536,1.174,537,0.704,538,1.736,539,0.704,540,0.704,541,0.825,542,0.564,543,0.704,544,0.704,545,0.704,546,0.825,547,0.704,548,0.825,549,0.825,550,0.825,551,0.624,552,0.825,553,3.981,554,1.27,555,1.49,556,1.49,557,0.825,558,0.704,559,1.49,560,1.49,561,2.456,562,1.27,563,1.27,564,1.27,565,1.27,566,1.27,567,1.27,568,1.27,569,1.27,570,1.49,571,3.213,572,1.883,573,0.825,574,3.981,575,2.036,576,3.008,577,0.825,578,2.036,579,3.981,580,5.319,581,4.451,582,5.892,583,2.036,584,3.981,585,3.981,586,1.27,587,0.825,588,0.825,589,0.825,590,0.825,591,0.825,592,0.825,593,1.49,594,0.825,595,0.825,596,2.125,597,0.825,598,0.825,599,0.825,600,0.825,601,0.825,602,1.27,603,0.825,604,0.825,605,1.538,606,0.825,607,0.825,608,0.704,609,0.825,610,0.825,611,0.825,612,0.825,613,2.492,614,0.825,615,1.736,616,0.825,617,0.825,618,0.825,619,1.39,620,1.39,621,1.736,622,1.49,623,0.825,624,0.825,625,0.825,626,0.825,627,0.825,628,0.825,629,0.825,630,0.825]],["title/classes/PostDoesNotExist.html",[25,0.17,300,1.232]],["body/classes/PostDoesNotExist.html",[3,0.249,4,0.223,5,0.172,11,0.023,15,0.628,24,0.486,25,0.349,30,0.014,31,0.014,90,0.963,128,1.935,197,0.811,200,1.657,206,1.209,273,2.487,286,1.281,287,1.443,288,2.863,289,2.401,290,2.643,291,1.443,292,1.443,293,1.443,294,1.756,295,1.535,296,1.535,297,1.443,298,1.535,299,1.209,300,1.657,301,1.535,302,1.443,303,1.209,304,2.104,305,2.104,306,1.209,307,1.209,308,1.209,309,1.209,310,1.443,311,1.209,312,2.104,313,1.978,314,1.209,315,1.281]],["title/classes/PostDoesNotHaveComments.html",[25,0.17,311,1.232]],["body/classes/PostDoesNotHaveComments.html",[3,0.249,4,0.222,5,0.171,11,0.023,15,0.627,24,0.486,25,0.349,30,0.014,31,0.014,90,0.961,128,1.899,197,0.81,200,1.889,206,1.207,273,2.487,286,1.279,287,1.441,288,2.862,289,2.102,290,2.642,291,1.441,292,1.441,293,1.441,294,1.754,295,1.532,296,1.532,297,1.441,298,1.532,299,1.207,300,1.207,301,1.532,302,1.441,303,1.207,304,2.102,305,2.102,306,1.207,307,1.207,308,1.207,309,1.655,310,1.976,311,1.655,312,2.102,313,1.976,314,1.207,315,1.279]],["title/classes/PostError.html",[25,0.17,290,1.306]],["body/classes/PostError.html",[3,0.24,4,0.215,5,0.165,11,0.023,12,0.782,15,0.759,24,0.482,25,0.348,30,0.014,31,0.014,90,1.287,105,1.577,106,1.165,107,0.695,108,1.577,128,1.918,150,1.807,197,0.782,200,1.616,206,1.165,273,2.477,286,1.235,287,1.391,288,2.884,289,2.051,290,2.64,291,1.929,292,1.929,293,1.391,294,2.122,295,2.051,296,1.48,297,1.391,298,1.48,299,1.165,300,1.165,301,1.48,302,1.391,303,1.165,304,2.051,305,2.355,306,1.165,307,1.165,308,1.165,309,1.165,310,1.391,311,1.165,312,2.051,313,1.929,314,1.165,315,1.235,340,2.305,631,2.877,632,3.374]],["title/classes/PostIdValidationError.html",[25,0.17,308,1.232]],["body/classes/PostIdValidationError.html",[3,0.248,4,0.222,5,0.171,11,0.023,15,0.626,24,0.486,25,0.349,30,0.014,31,0.014,90,0.96,128,1.933,197,0.808,200,1.653,206,1.205,273,2.486,286,1.277,287,1.438,288,2.861,289,2.099,290,2.642,291,1.438,292,1.438,293,1.438,294,1.752,295,1.53,296,1.53,297,1.438,298,1.53,299,1.205,300,1.205,301,1.53,302,1.438,303,1.205,304,2.396,305,2.396,306,1.205,307,1.653,308,1.653,309,1.205,310,1.438,311,1.205,312,2.099,313,1.973,314,1.205,315,1.277]],["title/classes/PostInsufficientPermissionsError.html",[25,0.17,314,1.232]],["body/classes/PostInsufficientPermissionsError.html",[3,0.249,4,0.222,5,0.171,11,0.023,15,0.627,24,0.486,25,0.349,30,0.014,31,0.014,90,0.961,128,1.934,197,0.81,200,1.655,206,1.207,273,2.487,286,1.279,287,1.441,288,2.862,289,2.102,290,2.642,291,1.441,292,1.441,293,1.441,294,1.754,295,1.532,296,1.532,297,1.441,298,1.532,299,1.207,300,1.207,301,1.532,302,1.441,303,1.207,304,2.102,305,2.102,306,1.207,307,1.207,308,1.207,309,1.207,310,1.441,311,1.207,312,2.399,313,2.255,314,1.655,315,1.279]],["title/modules/PostModule.html",[32,1.471,46,2.23]],["body/modules/PostModule.html",[2,2.712,3,0.334,4,0.298,5,0.23,11,0.022,16,1.019,17,1.443,24,0.334,25,0.223,30,0.018,31,0.018,32,2.599,34,2.339,35,2.339,36,2.927,37,2.927,38,2.508,39,3.637,40,2.927,46,4.315,48,3.627,49,2.927,50,2.702,52,2.927,53,3.538,54,2.189,94,2.508,106,1.618,196,2.054,242,3.963,276,2.927,434,4.306,536,3.982,537,3.993,633,3.993,634,3.993,635,4.683,636,4.683,637,3.993,638,4.683]],["title/classes/PostRelationConflict.html",[25,0.17,299,1.232]],["body/classes/PostRelationConflict.html",[3,0.249,4,0.222,5,0.171,11,0.023,15,0.627,24,0.486,25,0.349,30,0.014,31,0.014,90,0.961,128,1.934,197,0.81,200,1.655,206,1.207,273,2.487,286,1.279,287,1.441,288,2.862,289,2.102,290,2.642,291,1.441,292,1.441,293,1.441,294,1.754,295,1.532,296,1.532,297,1.976,298,2.102,299,1.655,300,1.207,301,1.532,302,1.441,303,1.207,304,2.102,305,2.102,306,1.207,307,1.207,308,1.207,309,1.207,310,1.441,311,1.207,312,2.102,313,1.976,314,1.207,315,1.279]],["title/injectables/PostService.html",[64,1.306,536,2.058]],["body/injectables/PostService.html",[3,0.101,4,0.09,5,0.07,7,0.259,8,1.118,11,0.023,12,1.295,14,2.249,15,0.871,16,0.84,17,0.437,24,0.101,25,0.114,28,2.326,30,0.007,31,0.007,54,0.663,64,0.875,65,0.76,82,3.884,105,2.549,106,1.884,107,1.124,108,2.549,109,3.177,116,2.649,118,1.495,119,1.633,127,1.071,128,1.865,150,0.76,151,0.886,188,3.221,189,4.031,196,0.622,200,1.071,201,1.118,202,3.011,203,1.495,204,0.886,205,1.071,206,1.523,207,1.789,208,2.777,209,0.818,215,1.495,224,2.118,233,1.38,239,3.123,257,5.284,258,0.818,270,0.76,276,0.886,286,0.519,290,0.519,297,0.585,299,0.49,300,0.49,303,0.49,306,0.49,307,2.161,308,0.49,309,1.071,311,0.49,314,0.49,315,0.519,316,2.706,325,2.706,334,3.331,335,2.751,383,4.522,437,2.039,438,1.633,439,2.039,440,2.039,441,2.039,442,2.039,443,2.039,445,2.039,446,2.039,449,1.071,460,4.374,471,1.807,472,1.071,476,4.522,482,2.039,483,3.466,485,2.343,496,2.039,503,2.039,510,2.039,515,3.331,516,2.751,519,1.633,536,1.38,538,2.039,539,1.209,540,1.209,542,0.969,543,1.209,544,1.209,545,1.209,547,1.209,572,1.807,576,1.807,581,4.957,586,4.374,596,4.522,602,2.039,608,1.209,639,1.209,640,2.391,641,3.641,642,2.391,643,2.391,644,1.418,645,3.104,646,1.418,647,2.391,648,1.418,649,1.418,650,4.374,651,4.522,652,1.418,653,2.391,654,1.418,655,1.418,656,1.418,657,1.418,658,1.418,659,1.418,660,2.391,661,1.418,662,2.391,663,1.418,664,2.391,665,1.418,666,1.209,667,1.418,668,1.209,669,1.071,670,1.071,671,1.418,672,1.418,673,1.418,674,1.418,675,2.391,676,4.066,677,2.391,678,1.418,679,2.391,680,1.418,681,1.418,682,3.101,683,1.418,684,1.418,685,1.418,686,1.418,687,1.418,688,1.418,689,1.418,690,1.418,691,2.391,692,2.391,693,2.391,694,2.391,695,1.071,696,1.418,697,1.418,698,1.418,699,3.641,700,5.809,701,4.066,702,2.644,703,4.691,704,3.101,705,1.418,706,1.418,707,2.391,708,1.418,709,2.644,710,1.418,711,2.391,712,1.418,713,1.418,714,1.418,715,1.418,716,1.418,717,1.418,718,3.101,719,4.928,720,1.418,721,1.418,722,3.641,723,2.391,724,1.418,725,1.418,726,2.391,727,1.418,728,1.418,729,1.418,730,1.418,731,1.209,732,1.071,733,1.071,734,2.391,735,1.418,736,2.391,737,2.391,738,1.418,739,2.391,740,1.418,741,1.418,742,1.418,743,1.418,744,1.418,745,1.418,746,2.391,747,1.418,748,3.101,749,3.101,750,2.391,751,1.418,752,1.418,753,1.418,754,1.418,755,1.418,756,2.391,757,2.391,758,1.418,759,1.418,760,2.039,761,1.418,762,1.418,763,1.418]],["title/classes/PostSlugValidationError.html",[25,0.17,306,1.232]],["body/classes/PostSlugValidationError.html",[3,0.248,4,0.222,5,0.171,11,0.023,15,0.626,24,0.486,25,0.349,30,0.014,31,0.014,90,0.96,128,1.933,197,0.808,200,1.653,206,1.653,273,2.486,286,1.277,287,1.438,288,2.861,289,2.099,290,2.642,291,1.438,292,1.438,293,1.438,294,1.752,295,1.53,296,1.53,297,1.438,298,1.53,299,1.205,300,1.205,301,1.53,302,1.438,303,1.205,304,2.396,305,2.396,306,1.653,307,1.205,308,1.205,309,1.205,310,1.438,311,1.205,312,2.099,313,1.973,314,1.205,315,1.277]],["title/classes/RegisterUserDto.html",[25,0.17,111,2.23]],["body/classes/RegisterUserDto.html",[3,0.236,4,0.211,5,0.163,7,0.606,10,1.989,11,0.022,12,1.334,15,0.858,16,0.696,21,1.369,24,0.236,25,0.22,30,0.014,31,0.014,90,1.584,91,2.585,106,2.091,107,1.187,111,2.892,116,3.024,117,3.785,157,3.514,197,0.769,199,1.509,240,3.159,278,4.735,294,2.401,322,3.322,323,3.493,324,1.658,331,3.493,342,3.933,415,2.267,419,2.831,420,3.944,427,2.508,431,2.831,432,2.831,433,2.831,515,4.022,619,3.159,620,2.267,695,3.495,733,5.329,764,5.162,765,4.626,766,3.32,767,3.944,768,4.626,769,3.944,770,2.831,771,3.32,772,6.749,773,5.758,774,6.27,775,5.758,776,4.909,777,4.909,778,3.32,779,3.32,780,5.758,781,3.32,782,3.32,783,3.32,784,3.32,785,3.32,786,4.626,787,3.32,788,4.626,789,3.32,790,3.32,791,4.626,792,3.32]],["title/classes/UpdateUserDto.html",[25,0.17,122,2.23]],["body/classes/UpdateUserDto.html",[3,0.348,4,0.311,5,0.24,7,0.893,10,1.69,11,0.022,12,1.134,15,0.78,16,0.897,21,2.017,24,0.348,25,0.284,30,0.018,31,0.018,90,1.346,91,2.457,106,2.369,107,1.008,122,3.726,157,3.193,197,1.134,199,1.944,239,2.786,322,3.439,323,3.439,324,2.444,331,3.439,342,3.342,415,3.342,427,3.696,619,4.071,620,3.342,770,4.171,793,5.082]],["title/modules/UserModule.html",[32,1.471,47,2.058]],["body/modules/UserModule.html",[3,0.332,4,0.297,5,0.228,11,0.022,16,0.989,17,1.436,24,0.332,25,0.222,30,0.017,31,0.017,32,2.593,34,2.327,35,2.327,36,2.913,37,2.913,38,2.496,39,3.629,40,3.932,47,4.032,48,3.616,49,2.913,50,2.688,52,2.913,53,3.52,54,2.178,94,2.496,106,1.609,134,2.178,135,2.688,136,3.617,241,3.973,285,3.951,637,3.973,794,3.973,795,3.973,796,3.973,797,4.66,798,4.66]],["title/injectables/UserService.html",[64,1.306,136,1.782]],["body/injectables/UserService.html",[3,0.171,4,0.152,5,0.117,7,0.437,8,1.704,11,0.023,12,1.388,14,2.396,15,0.871,16,0.901,17,0.738,24,0.171,25,0.114,28,2.549,30,0.011,31,0.011,54,1.12,64,1.334,65,1.283,82,3.985,84,3.108,85,3.108,87,3.062,91,2.47,105,2.8,106,2.255,107,1.234,108,2.8,109,3.295,110,3.108,111,3.495,116,2.903,117,3.318,118,1.498,119,1.636,122,3.745,134,1.12,135,1.382,136,1.821,141,3.335,150,1.283,151,1.498,183,5.232,188,3.261,189,3.977,217,1.283,233,2.103,239,2.613,250,3.108,278,3.819,343,3.335,581,4.01,615,3.763,645,4.206,650,3.108,651,3.763,666,2.043,702,3.763,767,2.043,799,2.043,800,3.646,801,3.646,802,3.646,803,3.646,804,3.646,805,2.396,806,2.396,807,3.646,808,3.646,809,5.591,810,2.396,811,3.646,812,2.396,813,3.646,814,2.396,815,3.646,816,2.396,817,2.396,818,3.646,819,2.396,820,3.646,821,2.396,822,2.396,823,2.396,824,2.396,825,3.108,826,2.396,827,2.396,828,2.396,829,2.396,830,3.646,831,4.414,832,2.396,833,2.396,834,2.396,835,2.396,836,2.396,837,2.396,838,2.396,839,3.646,840,3.646,841,3.646,842,2.755,843,3.646,844,3.646,845,3.646,846,3.646,847,4.933,848,2.396,849,2.396,850,3.646,851,4.414,852,2.396,853,2.396,854,3.646,855,2.396,856,2.396,857,2.396,858,2.396,859,2.396,860,2.396,861,2.396,862,2.396]],["title/coverage.html",[863,4.144]],["body/coverage.html",[0,2.555,1,2.019,5,0.145,6,2.52,11,0.022,18,1.705,25,0.337,30,0.013,31,0.013,38,1.583,64,2.209,66,2.52,76,2.233,78,2.019,79,2.52,87,1.705,107,1.194,111,1.848,122,1.848,124,1.705,134,1.381,136,1.476,138,1.705,143,1.848,170,1.705,182,2.52,196,1.296,198,3.417,209,1.705,217,1.583,224,2.019,235,2.019,239,1.381,242,2.019,244,4.94,256,3.411,267,2.233,269,2.458,270,1.583,272,3.218,277,3.733,283,2.233,285,2.019,286,1.082,287,2.715,290,1.082,299,1.021,300,1.021,303,1.021,306,1.021,308,1.021,311,1.021,314,1.021,315,1.082,316,1.705,317,3.622,318,2.52,325,1.705,326,2.52,332,2.019,333,2.52,338,2.019,339,2.52,340,2.019,341,2.52,343,2.233,351,2.019,352,2.52,391,2.52,392,2.52,397,2.52,414,2.52,415,3.411,429,2.233,434,2.019,435,2.52,536,1.705,542,2.019,639,2.52,669,2.233,670,2.233,709,6.235,764,2.52,793,2.52,799,2.52,863,2.52,864,2.956,865,6.036,866,4.26,867,5.794,868,2.52,869,6.939,870,5.466,871,2.52,872,2.52,873,6.036,874,3.632,875,2.52,876,4.26,877,6.584,878,6.486,879,2.956,880,2.956,881,2.52,882,5.466,883,3.632,884,2.52,885,2.956,886,2.956,887,2.956]],["title/dependencies.html",[35,2.142,888,2.543]],["body/dependencies.html",[11,0.022,17,1.465,21,1.96,25,0.279,30,0.018,31,0.018,35,2.375,54,2.222,56,4.054,144,3.592,173,3.592,233,2.743,234,4.054,275,3.248,324,2.375,365,3.592,389,4.054,396,3.592,406,4.054,668,4.054,825,4.054,842,3.592,889,4.755,890,6.348,891,4.755,892,4.755,893,4.755,894,4.755,895,4.755,896,4.755,897,4.755,898,4.755,899,4.755,900,4.755,901,4.755,902,4.755,903,4.755,904,4.755,905,4.755,906,4.755,907,4.755,908,4.755,909,4.755,910,4.755,911,4.755,912,4.755,913,4.755,914,4.755]],["title/miscellaneous/functions.html",[915,1.721,916,3.656]],["body/miscellaneous/functions.html",[7,0.866,11,0.022,14,2.729,15,0.83,30,0.018,31,0.018,38,3.396,105,3.094,106,2.286,107,1.307,108,3.094,109,2.369,128,1.381,196,2.564,198,2.965,245,4.044,270,3.132,309,1.638,429,4.418,524,4.044,669,4.418,670,4.418,868,4.044,871,4.044,883,4.044,884,4.986,915,2.736,916,4.044,917,4.743,918,3.583,919,4.743,920,5.848,921,4.743,922,4.743,923,6.34,924,4.743,925,4.743]],["title/index.html",[7,0.544,72,2.037,926,2.253]],["body/index.html",[5,0.222,11,0.022,14,2.228,15,0.492,30,0.014,31,0.011,35,1.246,39,1.44,68,2.128,70,3.805,72,2.568,73,2.128,77,3.858,91,1.55,105,1.166,107,0.514,118,1.56,128,1.895,130,1.56,170,1.44,196,1.094,200,1.299,201,1.166,203,2.35,206,0.862,239,1.166,269,1.44,291,1.029,292,1.029,307,1.563,309,2.184,344,2.828,346,3.879,353,2.128,369,2.128,374,2.128,418,1.704,436,3.206,438,3.879,448,4.69,471,2.841,472,2.841,473,2.128,479,2.128,485,2.841,487,3.418,498,3.418,516,1.885,519,1.704,551,1.885,558,2.128,605,1.885,631,2.128,732,2.841,842,1.885,926,1.885,927,3.858,928,2.495,929,6.424,930,3.76,931,2.495,932,5.036,933,2.495,934,2.495,935,2.495,936,3.76,937,2.128,938,6.066,939,4.525,940,5.679,941,6.066,942,4.525,943,3.76,944,2.495,945,2.495,946,3.76,947,4.525,948,2.495,949,3.76,950,3.76,951,3.76,952,3.76,953,3.76,954,2.495,955,5.036,956,3.206,957,2.495,958,2.495,959,3.76,960,2.495,961,2.495,962,5.036,963,3.76,964,3.76,965,4.525,966,2.495,967,3.76,968,3.76,969,3.76,970,3.76,971,5.036,972,4.525,973,2.128,974,3.76,975,2.495,976,2.495,977,1.885,978,2.495,979,2.495,980,2.495,981,2.495,982,2.495,983,3.76,984,2.495,985,3.76,986,3.76,987,3.76,988,2.495,989,1.885,990,2.495,991,3.76,992,2.495,993,2.495,994,2.495,995,2.495,996,4.525,997,3.76,998,2.495,999,3.76,1000,2.495,1001,2.495,1002,2.495,1003,2.495,1004,2.495,1005,2.495,1006,2.128,1007,2.128,1008,2.495,1009,2.495,1010,2.495,1011,2.495,1012,2.495,1013,2.495,1014,2.495,1015,2.495,1016,2.495,1017,2.495,1018,3.76,1019,2.495,1020,2.128,1021,4.291,1022,2.495,1023,2.128,1024,2.495,1025,3.76,1026,2.495,1027,4.525,1028,3.858,1029,2.495,1030,2.495,1031,2.495,1032,3.76,1033,2.495,1034,2.495,1035,2.495,1036,2.495,1037,2.128,1038,2.495,1039,2.495,1040,2.495,1041,2.495,1042,2.495,1043,3.76,1044,2.495,1045,3.76,1046,2.495,1047,2.495,1048,2.495,1049,2.495,1050,3.76,1051,3.76,1052,2.495,1053,2.495,1054,2.495,1055,2.495,1056,2.128,1057,2.495,1058,2.495,1059,2.495,1060,2.495,1061,3.76,1062,2.495,1063,2.495,1064,2.495,1065,2.128,1066,2.495,1067,2.495,1068,3.206,1069,5.036,1070,2.128,1071,2.495,1072,2.495,1073,2.495,1074,2.495,1075,2.495,1076,2.495,1077,2.495,1078,2.495,1079,2.495,1080,2.128,1081,2.495,1082,2.495,1083,2.495,1084,2.495,1085,2.495,1086,2.128,1087,2.128,1088,2.495,1089,3.09,1090,2.128,1091,2.128,1092,1.885,1093,1.885,1094,1.885,1095,2.128]],["title/license.html",[72,2.037,926,2.253,1089,2.037]],["body/license.html",[4,0.363,5,0.249,11,0.014,12,0.352,16,0.228,25,0.072,30,0.008,31,0.008,50,0.875,76,2.46,90,0.417,106,0.874,157,2.036,201,0.709,203,0.949,207,0.875,220,2.376,266,1.294,271,1.037,275,1.729,310,1.742,313,1.343,347,1.294,418,2.885,421,1.294,448,1.912,449,1.147,487,1.147,498,1.147,506,1.294,519,1.037,551,1.147,554,3.891,572,1.912,576,1.147,605,4.108,695,1.147,731,1.294,732,1.147,733,1.147,760,1.294,769,2.158,776,1.294,777,1.294,937,1.294,956,2.776,973,2.776,989,1.147,1006,1.294,1007,5.313,1020,2.158,1021,1.147,1023,1.294,1028,1.294,1037,1.294,1056,1.294,1065,2.776,1068,3.241,1070,2.776,1080,2.776,1086,1.294,1087,1.294,1089,4.657,1090,1.294,1091,4.492,1092,2.872,1093,2.46,1094,2.46,1095,1.294,1096,1.518,1097,1.518,1098,1.518,1099,5.269,1100,5.822,1101,3.801,1102,4.225,1103,1.518,1104,6.012,1105,5.437,1106,1.518,1107,1.518,1108,1.518,1109,5.437,1110,5.71,1111,4.225,1112,5.437,1113,1.518,1114,4.225,1115,1.518,1116,1.518,1117,1.518,1118,3.801,1119,1.518,1120,1.518,1121,3.801,1122,2.531,1123,2.531,1124,1.518,1125,3.256,1126,2.531,1127,2.531,1128,1.518,1129,3.801,1130,2.531,1131,4.564,1132,1.518,1133,2.531,1134,1.518,1135,1.518,1136,1.518,1137,1.518,1138,1.518,1139,1.518,1140,1.518,1141,3.256,1142,1.518,1143,2.531,1144,5.822,1145,1.518,1146,4.564,1147,5.269,1148,3.801,1149,2.531,1150,1.518,1151,3.256,1152,1.518,1153,1.518,1154,1.518,1155,1.518,1156,1.518,1157,2.531,1158,1.518,1159,6.818,1160,3.256,1161,1.518,1162,5.269,1163,2.531,1164,1.518,1165,2.531,1166,1.518,1167,6.231,1168,6.292,1169,1.518,1170,1.518,1171,1.518,1172,1.518,1173,1.518,1174,1.518,1175,2.531,1176,2.531,1177,3.256,1178,1.518,1179,1.518,1180,1.518,1181,1.518,1182,1.518,1183,3.801,1184,4.225,1185,1.518,1186,2.531,1187,3.801,1188,2.531,1189,4.225,1190,2.531,1191,1.518,1192,1.518,1193,3.256,1194,1.518,1195,1.518,1196,1.518,1197,1.518,1198,2.531,1199,1.518,1200,1.518,1201,3.256,1202,1.518,1203,1.518,1204,3.256,1205,1.518,1206,1.518,1207,1.518,1208,3.801,1209,5.437,1210,1.518,1211,1.518,1212,2.531,1213,5.073,1214,3.256,1215,2.531,1216,2.531,1217,2.531,1218,2.531,1219,2.531,1220,2.531,1221,3.256,1222,2.531,1223,2.531,1224,2.531,1225,2.531,1226,1.518,1227,2.531,1228,1.518,1229,1.518,1230,4.225,1231,4.841,1232,3.256,1233,2.531,1234,1.518,1235,2.531,1236,2.531,1237,1.518,1238,1.518,1239,3.256,1240,2.531,1241,1.518,1242,1.518,1243,1.518,1244,3.256,1245,1.518,1246,1.518,1247,1.518,1248,2.531,1249,2.531,1250,1.518,1251,1.518,1252,1.518,1253,1.518,1254,1.518,1255,1.518,1256,1.518,1257,2.531,1258,1.518,1259,1.518,1260,1.518,1261,1.518,1262,1.518,1263,1.518,1264,1.518,1265,1.518,1266,1.518,1267,1.518,1268,1.518,1269,1.518,1270,1.518,1271,5.073,1272,1.518,1273,1.518,1274,1.518,1275,1.518,1276,1.518,1277,3.801,1278,2.531,1279,3.801,1280,1.518,1281,1.518,1282,3.801,1283,1.518,1284,1.518,1285,1.518,1286,3.256,1287,1.518,1288,1.518,1289,2.531,1290,2.531,1291,1.518,1292,1.518,1293,1.518,1294,1.518,1295,2.531,1296,1.518,1297,1.518,1298,4.225,1299,1.518,1300,1.518,1301,1.518,1302,1.518,1303,1.518,1304,3.801,1305,1.518,1306,1.518,1307,1.518,1308,1.518,1309,1.518,1310,1.518,1311,1.518,1312,1.518,1313,1.518,1314,1.518,1315,1.518,1316,2.531,1317,1.518,1318,1.518,1319,2.531,1320,1.518,1321,1.518,1322,1.518,1323,1.518,1324,1.518,1325,1.518,1326,1.518,1327,1.518,1328,1.518,1329,3.801,1330,3.256,1331,3.256,1332,3.256,1333,2.531,1334,2.531,1335,3.256,1336,2.531,1337,2.531,1338,2.531,1339,1.518,1340,1.518,1341,1.518,1342,1.518,1343,1.518,1344,1.518,1345,1.518,1346,2.531,1347,1.518,1348,1.518,1349,1.518,1350,4.225,1351,1.518,1352,1.518,1353,1.518,1354,1.518,1355,1.518,1356,1.518,1357,1.518,1358,1.518,1359,1.518,1360,4.225,1361,1.518,1362,1.518,1363,1.518,1364,1.518,1365,1.518,1366,1.518,1367,1.518,1368,1.518,1369,1.518,1370,1.518,1371,1.518,1372,1.518,1373,1.518,1374,1.518,1375,1.518,1376,3.256,1377,1.518,1378,1.518,1379,1.518,1380,2.531,1381,1.518,1382,1.518,1383,1.518,1384,1.518,1385,1.518,1386,1.518,1387,1.518,1388,1.518,1389,1.518,1390,1.518,1391,1.518,1392,1.518,1393,1.518,1394,1.518,1395,1.518,1396,2.531,1397,1.518,1398,1.518,1399,1.518,1400,2.531,1401,2.531,1402,1.518,1403,1.518,1404,1.518,1405,1.518,1406,1.518,1407,1.518,1408,1.518,1409,1.518,1410,1.518,1411,1.518,1412,1.518,1413,1.518,1414,1.294,1415,1.294,1416,1.518,1417,1.518,1418,1.518,1419,1.518,1420,1.518,1421,1.518]],["title/modules.html",[34,2.428]],["body/modules.html",[11,0.019,30,0.019,31,0.019,33,3.649,34,2.669,44,3.34,45,3.34,46,3.34,47,3.082,989,4.036,1021,5.205,1422,6.889,1423,6.889,1424,7.025,1425,5.343]],["title/overview.html",[1426,4.144]],["body/overview.html",[2,2.03,11,0.022,18,3.514,30,0.017,31,0.017,32,1.791,33,4.899,34,2.17,35,2.17,36,2.715,37,2.715,38,2.327,39,2.506,40,2.715,41,3.704,42,3.704,43,3.704,44,4.431,45,3.808,46,4.141,47,3.97,48,3.46,49,2.715,50,2.506,65,2.327,136,3.438,138,3.97,166,3.704,168,3.704,169,3.704,170,3.514,197,1.007,271,2.967,536,3.514,633,3.704,634,3.704,794,3.704,795,3.704,796,3.704,1426,3.704,1427,4.344,1428,4.344,1429,4.344,1430,4.344,1431,4.344]],["title/properties.html",[199,1.398,888,2.543]],["body/properties.html",[11,0.022,30,0.019,31,0.019,70,4.048,90,1.474,199,1.748,258,3.091,344,3.349,346,3.66,438,3.66,927,4.568,1089,3.66,1092,4.048,1093,4.048,1094,4.048,1414,4.568,1415,4.568,1432,5.358,1433,5.358,1434,5.358,1435,5.358,1436,5.358]],["title/miscellaneous/typealiases.html",[915,1.721,1437,4.288]],["body/miscellaneous/typealiases.html",[7,0.975,11,0.019,30,0.019,31,0.019,107,1.295,198,3.34,217,3.365,224,4.291,232,4.559,256,3.649,267,4.747,277,3.649,402,4.555,542,4.291,881,4.555,915,3.082,918,4.036,1438,5.343,1439,4.555,1440,4.555,1441,5.343]],["title/miscellaneous/variables.html",[915,1.721,977,3.24]],["body/miscellaneous/variables.html",[7,0.832,11,0.022,30,0.017,31,0.017,128,1.661,198,2.848,201,2.666,204,2.848,207,2.629,212,4.682,235,3.896,239,2.666,242,3.896,243,3.885,256,3.112,258,2.629,268,3.885,277,3.112,283,4.31,284,4.864,285,3.896,316,2.629,317,3.566,325,2.629,344,2.848,561,5.845,562,3.885,563,3.885,564,3.885,565,3.885,566,3.885,567,3.885,568,3.885,569,3.885,619,3.112,620,3.112,621,3.885,872,4.864,874,5.564,875,4.864,915,2.629,918,3.443,977,3.443,1439,3.885,1440,4.864,1442,5.704,1443,4.557,1444,4.557]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":709,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["0.14.1",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["0.5.13",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":866,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":870,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":760,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["1.0.0",{"_index":1432,"title":{},"body":{"properties.html":{}}}],["1.6.6",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":834,"title":{},"body":{"injectables/UserService.html":{}}}],["10.0.3",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["10.2.3",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["10.4.6",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["101",{"_index":556,"title":{},"body":{"controllers/PostController.html":{}}}],["1024",{"_index":380,"title":{},"body":{"controllers/HealthController.html":{}}}],["128",{"_index":385,"title":{},"body":{"controllers/HealthController.html":{}}}],["1h",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":1431,"title":{},"body":{"overview.html":{}}}],["2.0",{"_index":1094,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["2/2",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1430,"title":{},"body":{"overview.html":{}}}],["200",{"_index":491,"title":{},"body":{"controllers/PostController.html":{}}}],["2004",{"_index":1097,"title":{},"body":{"license.html":{}}}],["201",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["2024",{"_index":1413,"title":{},"body":{"license.html":{}}}],["3.1.1",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":379,"title":{},"body":{"controllers/HealthController.html":{}}}],["4",{"_index":1428,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["401",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["404",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["409",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["422",{"_index":478,"title":{},"body":{"controllers/PostController.html":{}}}],["5",{"_index":1427,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1136,"title":{},"body":{"license.html":{}}}],["500",{"_index":457,"title":{},"body":{"controllers/PostController.html":{}}}],["5000",{"_index":377,"title":{},"body":{"controllers/HealthController.html":{}}}],["6",{"_index":1429,"title":{},"body":{"overview.html":{}}}],["60f6c2d3a8341c8f0a5865c4",{"_index":350,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["60f6c2d3a8341c8f0a5865c4'})@ismongoid({message",{"_index":345,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["64",{"_index":790,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["64)@matches(/(?=.*[a",{"_index":779,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["8.0.1",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["8.12.2",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":695,"title":{},"body":{"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"license.html":{}}}],["9]+)*$/.test(slug",{"_index":696,"title":{},"body":{"injectables/PostService.html":{}}}],["_",{"_index":846,"title":{},"body":{"injectables/UserService.html":{}}}],["__v",{"_index":701,"title":{},"body":{"injectables/PostService.html":{}}}],["__v\").exec",{"_index":689,"title":{},"body":{"injectables/PostService.html":{}}}],["_hasusernameoremail",{"_index":416,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["_id",{"_index":257,"title":{},"body":{"classes/BlogPostComment.html":{},"injectables/PostService.html":{}}}],["_id\").exec",{"_index":721,"title":{},"body":{"injectables/PostService.html":{}}}],["above",{"_index":1308,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":1378,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":1376,"title":{},"body":{"license.html":{}}}],["accesstoken",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["account",{"_index":420,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["accounts",{"_index":1075,"title":{},"body":{"index.html":{}}}],["act",{"_index":1384,"title":{},"body":{"license.html":{}}}],["acting",{"_index":1116,"title":{},"body":{"license.html":{}}}],["actions",{"_index":1046,"title":{},"body":{"index.html":{}}}],["acts",{"_index":1358,"title":{},"body":{"license.html":{}}}],["add",{"_index":448,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["addcomment",{"_index":437,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["addcomment(@param(\"id",{"_index":625,"title":{},"body":{"controllers/PostController.html":{}}}],["addcomment(postid",{"_index":446,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["added",{"_index":624,"title":{},"body":{"controllers/PostController.html":{}}}],["added.'})@apiresponse({status",{"_index":455,"title":{},"body":{"controllers/PostController.html":{}}}],["addendum",{"_index":1297,"title":{},"body":{"license.html":{}}}],["additional",{"_index":1298,"title":{},"body":{"license.html":{}}}],["additions",{"_index":1185,"title":{},"body":{"license.html":{}}}],["address",{"_index":765,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["adipiscing",{"_index":568,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["advised",{"_index":1374,"title":{},"body":{"license.html":{}}}],["against",{"_index":1249,"title":{},"body":{"license.html":{}}}],["agree",{"_index":1387,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":1332,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1313,"title":{},"body":{"license.html":{}}}],["alias",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1438,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":1254,"title":{},"body":{"license.html":{}}}],["allows",{"_index":930,"title":{},"body":{"index.html":{}}}],["alone",{"_index":1245,"title":{},"body":{"license.html":{}}}],["along",{"_index":1287,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":1296,"title":{},"body":{"license.html":{}}}],["already",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["amet",{"_index":566,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":1381,"title":{},"body":{"license.html":{}}}],["annotations",{"_index":1172,"title":{},"body":{"license.html":{}}}],["apache",{"_index":1092,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":971,"title":{},"body":{"index.html":{}}}],["api.to",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["api/v1",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/v1/posts",{"_index":436,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["api/v1/posts/:id",{"_index":999,"title":{},"body":{"index.html":{}}}],["api/v1/posts/:id/relations",{"_index":1001,"title":{},"body":{"index.html":{}}}],["api/v1/posts/relation/?sourcepostid&relationpostid",{"_index":1002,"title":{},"body":{"index.html":{}}}],["api/v1/posts?page&limit",{"_index":995,"title":{},"body":{"index.html":{}}}],["api/v1/posts?slug=:slug",{"_index":998,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["apibody",{"_index":532,"title":{},"body":{"controllers/PostController.html":{}}}],["apioperation",{"_index":533,"title":{},"body":{"controllers/PostController.html":{}}}],["apiparam",{"_index":534,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":342,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiquery",{"_index":535,"title":{},"body":{"controllers/PostController.html":{}}}],["apiresponse",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["apitags",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{}}}],["apitags(\"health",{"_index":366,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"information",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags(\"let",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"post",{"_index":550,"title":{},"body":{"controllers/PostController.html":{}}}],["app.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appear",{"_index":1292,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":1165,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":1330,"title":{},"body":{"license.html":{}}}],["application",{"_index":1010,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1238,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1396,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":33,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1405,"title":{},"body":{"license.html":{}}}],["appropriateness",{"_index":1345,"title":{},"body":{"license.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archives",{"_index":1412,"title":{},"body":{"license.html":{}}}],["arising",{"_index":1363,"title":{},"body":{"license.html":{}}}],["ascending",{"_index":1015,"title":{},"body":{"index.html":{}}}],["asserted",{"_index":1393,"title":{},"body":{"license.html":{}}}],["associated",{"_index":506,"title":{},"body":{"controllers/PostController.html":{},"license.html":{}}}],["assume",{"_index":1347,"title":{},"body":{"license.html":{}}}],["async",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["attach",{"_index":1397,"title":{},"body":{"license.html":{}}}],["attached",{"_index":1164,"title":{},"body":{"license.html":{}}}],["attribution",{"_index":1277,"title":{},"body":{"license.html":{}}}],["auth",{"_index":1029,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["auth.guard.ts",{"_index":392,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/login",{"_index":828,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/dto/register",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/dto/update",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/jwt",{"_index":546,"title":{},"body":{"controllers/PostController.html":{}}}],["auth0,oauth2",{"_index":1030,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":78,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":1073,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":395,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":393,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":44,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":258,"title":{},"body":{"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorized",{"_index":572,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"license.html":{}}}],["authorized.'})@apiresponse({status",{"_index":464,"title":{},"body":{"controllers/PostController.html":{}}}],["authorship",{"_index":1160,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":138,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":260,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["available",{"_index":989,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["await",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["b",{"_index":1267,"title":{},"body":{"license.html":{}}}],["bad",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["based",{"_index":498,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["basic",{"_index":1433,"title":{},"body":{"properties.html":{}}}],["basis",{"_index":1334,"title":{},"body":{"license.html":{}}}],["bcrypt",{"_index":825,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":849,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(password",{"_index":833,"title":{},"body":{"injectables/UserService.html":{}}}],["behalf",{"_index":1189,"title":{},"body":{"license.html":{}}}],["below",{"_index":1166,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":1140,"title":{},"body":{"license.html":{}}}],["better",{"_index":1061,"title":{},"body":{"index.html":{}}}],["between",{"_index":472,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{}}}],["bind",{"_index":1182,"title":{},"body":{"license.html":{}}}],["blog",{"_index":344,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"controllers/PostController.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["blogpost",{"_index":196,"title":{"classes/BlogPost.html":{}},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["blogpost.createdby",{"_index":255,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpost.isnew",{"_index":253,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpost.name",{"_index":638,"title":{},"body":{"modules/PostModule.html":{}}}],["blogpost.slug",{"_index":251,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpost.updatedby",{"_index":254,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpostcomment",{"_index":209,"title":{"classes/BlogPostComment.html":{}},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["blogpostcommentdocument",{"_index":267,"title":{},"body":{"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostcommentschema",{"_index":235,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostdocument",{"_index":224,"title":{},"body":{"classes/BlogPost.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostmodel",{"_index":647,"title":{},"body":{"injectables/PostService.html":{}}}],["blogpostsanitizedresponse",{"_index":270,"title":{"interfaces/BlogPostSanitizedResponse.html":{}},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["blogpostschema",{"_index":242,"title":{},"body":{"classes/BlogPost.html":{},"modules/PostModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostschema.pre(\"save",{"_index":249,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogposttitle",{"_index":921,"title":{},"body":{"miscellaneous/functions.html":{}}}],["blogpostuser",{"_index":134,"title":{"classes/BlogPostUser.html":{}},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostUser.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["blogpostuser._id",{"_index":578,"title":{},"body":{"controllers/PostController.html":{}}}],["blogpostuser.name",{"_index":241,"title":{},"body":{"classes/BlogPost.html":{},"modules/UserModule.html":{}}}],["blogpostuserdocument",{"_index":217,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostuserschema",{"_index":285,"title":{},"body":{"classes/BlogPostUser.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostuser})@apiresponse({status",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["body",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["boilerplate",{"_index":1398,"title":{},"body":{"license.html":{}}}],["bootstrap",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brackets",{"_index":1401,"title":{},"body":{"license.html":{}}}],["browse",{"_index":1424,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1422,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1082,"title":{},"body":{"index.html":{}}}],["build",{"_index":986,"title":{},"body":{"index.html":{}}}],["built",{"_index":935,"title":{},"body":{"index.html":{}}}],["c",{"_index":1274,"title":{},"body":{"license.html":{}}}],["cant",{"_index":736,"title":{},"body":{"injectables/PostService.html":{}}}],["carry",{"_index":1269,"title":{},"body":{"license.html":{}}}],["catch",{"_index":579,"title":{},"body":{"controllers/PostController.html":{}}}],["cause",{"_index":1127,"title":{},"body":{"license.html":{}}}],["changed",{"_index":1273,"title":{},"body":{"license.html":{}}}],["character",{"_index":777,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["charge",{"_index":1221,"title":{},"body":{"license.html":{}}}],["check",{"_index":354,"title":{},"body":{"controllers/HealthController.html":{}}}],["choose",{"_index":937,"title":{},"body":{"index.html":{},"license.html":{}}}],["circular",{"_index":301,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["claim",{"_index":1251,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1240,"title":{},"body":{"license.html":{}}}],["class",{"_index":25,"title":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":197,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clone",{"_index":950,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":633,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":634,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":794,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":795,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":796,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cms",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"properties.html":{}}}],["code",{"_index":1065,"title":{},"body":{"index.html":{},"license.html":{}}}],["combination",{"_index":1246,"title":{},"body":{"license.html":{}}}],["comment",{"_index":449,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"license.html":{}}}],["comment'})@apiresponse({status",{"_index":492,"title":{},"body":{"controllers/PostController.html":{}}}],["comment._id.tostring",{"_index":759,"title":{},"body":{"injectables/PostService.html":{}}}],["comment.dto",{"_index":544,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["comment.dto.stub.ts",{"_index":872,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":318,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:10",{"_index":321,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:6",{"_index":320,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.schema",{"_index":236,"title":{},"body":{"classes/BlogPost.html":{}}}],["commentdoesnotexist",{"_index":286,"title":{"classes/CommentDoesNotExist.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["commentdoesnotexist(`comment",{"_index":761,"title":{},"body":{"injectables/PostService.html":{}}}],["commentid",{"_index":483,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["commentindex",{"_index":757,"title":{},"body":{"injectables/PostService.html":{}}}],["commentinsufficientpermissionserror",{"_index":315,"title":{"classes/CommentInsufficientPermissionsError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["commentinsufficientpermissionserror(\"you",{"_index":762,"title":{},"body":{"injectables/PostService.html":{}}}],["comments",{"_index":200,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["comments'})@apiresponse({status",{"_index":508,"title":{},"body":{"controllers/PostController.html":{}}}],["commercial",{"_index":1371,"title":{},"body":{"license.html":{}}}],["common",{"_index":1120,"title":{},"body":{"license.html":{}}}],["communication",{"_index":1193,"title":{},"body":{"license.html":{}}}],["community",{"_index":961,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["comparepassword(password",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["compiled",{"_index":1156,"title":{},"body":{"license.html":{}}}],["completed",{"_index":1050,"title":{},"body":{"index.html":{}}}],["compliance",{"_index":1416,"title":{},"body":{"license.html":{}}}],["complies",{"_index":1302,"title":{},"body":{"license.html":{}}}],["compose",{"_index":985,"title":{},"body":{"index.html":{}}}],["compression",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":1368,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":1100,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":1150,"title":{},"body":{"license.html":{}}}],["configure",{"_index":555,"title":{},"body":{"controllers/PostController.html":{}}}],["conflictexception",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["conflictexception(\"user",{"_index":832,"title":{},"body":{"injectables/UserService.html":{}}}],["conflicts",{"_index":298,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["connection",{"_index":968,"title":{},"body":{"index.html":{}}}],["consectetur",{"_index":567,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["consequential",{"_index":1362,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":1383,"title":{},"body":{"license.html":{}}}],["conspicuously",{"_index":1205,"title":{},"body":{"license.html":{}}}],["const",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constitutes",{"_index":1255,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(@injectmodel(blogpost.name",{"_index":672,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(@injectmodel(blogpostuser.name",{"_index":829,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(blogpostmodel",{"_index":644,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(message",{"_index":295,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["constructor(private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{}}}],["constructor(usermodel",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["construed",{"_index":1299,"title":{},"body":{"license.html":{}}}],["contain",{"_index":772,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["contained",{"_index":1284,"title":{},"body":{"license.html":{}}}],["containers",{"_index":987,"title":{},"body":{"index.html":{}}}],["content",{"_index":201,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":1293,"title":{},"body":{"license.html":{}}}],["contract",{"_index":1130,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":1079,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":1184,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":1244,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":1080,"title":{},"body":{"index.html":{},"license.html":{}}}],["contributor",{"_index":1209,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":1256,"title":{},"body":{"license.html":{}}}],["control",{"_index":1118,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":1119,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["controller(\"/api/v1",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"/api/v1/posts",{"_index":552,"title":{},"body":{"controllers/PostController.html":{}}}],["controller(\"health",{"_index":367,"title":{},"body":{"controllers/HealthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["conversions",{"_index":1158,"title":{},"body":{"license.html":{}}}],["copies",{"_index":1262,"title":{},"body":{"license.html":{}}}],["copy",{"_index":973,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":1110,"title":{},"body":{"license.html":{}}}],["counterclaim",{"_index":1252,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":863,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":438,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{},"properties.html":{}}}],["create(@body",{"_index":573,"title":{},"body":{"controllers/PostController.html":{}}}],["create(createpostdto",{"_index":461,"title":{},"body":{"controllers/PostController.html":{}}}],["createblogpost",{"_index":640,"title":{},"body":{"injectables/PostService.html":{}}}],["createblogpost(@body",{"_index":673,"title":{},"body":{"injectables/PostService.html":{}}}],["createblogpost(createpostdto",{"_index":649,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdto",{"_index":316,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createcommentdto.author",{"_index":753,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdto.content",{"_index":754,"title":{},"body":{"injectables/PostService.html":{}}}],["created",{"_index":997,"title":{},"body":{"index.html":{}}}],["createdat",{"_index":716,"title":{},"body":{"injectables/PostService.html":{}}}],["createdblogpost",{"_index":542,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["createdby",{"_index":202,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{}}}],["createpostdto",{"_index":325,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createpostdtostub",{"_index":874,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createrelation",{"_index":439,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createrelation(@query",{"_index":610,"title":{},"body":{"controllers/PostController.html":{}}}],["createrelation(createrelationshipdto",{"_index":468,"title":{},"body":{"controllers/PostController.html":{}}}],["createrelation(sourcepostid",{"_index":653,"title":{},"body":{"injectables/PostService.html":{}}}],["createrelationshipdto",{"_index":332,"title":{"classes/CreateRelationshipDto.html":{}},"body":{"classes/CreateRelationshipDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["createrelationshipdto.relationpostid",{"_index":612,"title":{},"body":{"controllers/PostController.html":{}}}],["creates",{"_index":291,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["credentials",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.'})@apiresponse({status",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["cross",{"_index":1250,"title":{},"body":{"license.html":{}}}],["current",{"_index":1012,"title":{},"body":{"index.html":{}}}],["custom",{"_index":631,"title":{},"body":{"classes/PostError.html":{},"index.html":{}}}],["customary",{"_index":1324,"title":{},"body":{"license.html":{}}}],["d",{"_index":1280,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1360,"title":{},"body":{"license.html":{}}}],["data",{"_index":452,"title":{},"body":{"controllers/PostController.html":{}}}],["database",{"_index":979,"title":{},"body":{"index.html":{}}}],["date",{"_index":203,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["declarations",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["decorators/hasusernameoremail.decorator",{"_index":430,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["default",{"_index":212,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":1389,"title":{},"body":{"license.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"license.html":{}}}],["definition",{"_index":1122,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":1103,"title":{},"body":{"license.html":{}}}],["delete",{"_index":485,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{}}}],["delete(\"/:id",{"_index":599,"title":{},"body":{"controllers/PostController.html":{}}}],["delete(\"/:postid/comments/:commentid",{"_index":627,"title":{},"body":{"controllers/PostController.html":{}}}],["delete('/:id')@apioperation({summary",{"_index":497,"title":{},"body":{"controllers/PostController.html":{}}}],["delete('/:postid/comments/:commentid')@apioperation({summary",{"_index":484,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecomment",{"_index":440,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deletecomment(postid",{"_index":482,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deleted",{"_index":490,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost",{"_index":441,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deletepost'})@apiparam({name",{"_index":500,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@param(\"id",{"_index":600,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":496,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deletes",{"_index":1000,"title":{},"body":{"index.html":{}}}],["deliberate",{"_index":1355,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":35,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployment",{"_index":1057,"title":{},"body":{"index.html":{}}}],["derivative",{"_index":1167,"title":{},"body":{"license.html":{}}}],["derived",{"_index":1169,"title":{},"body":{"license.html":{}}}],["describing",{"_index":1325,"title":{},"body":{"license.html":{}}}],["description",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":1207,"title":{},"body":{"license.html":{}}}],["desired",{"_index":970,"title":{},"body":{"index.html":{}}}],["desk",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["details",{"_index":969,"title":{},"body":{"index.html":{}}}],["determining",{"_index":1344,"title":{},"body":{"license.html":{}}}],["different",{"_index":1037,"title":{},"body":{"index.html":{},"license.html":{}}}],["direct",{"_index":1125,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1128,"title":{},"body":{"license.html":{}}}],["disable",{"_index":840,"title":{},"body":{"injectables/UserService.html":{}}}],["disclaimer",{"_index":1328,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":1202,"title":{},"body":{"license.html":{}}}],["discussions",{"_index":1072,"title":{},"body":{"index.html":{}}}],["disk",{"_index":370,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":362,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":769,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["distribute",{"_index":1230,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1286,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1102,"title":{},"body":{"license.html":{}}}],["docker",{"_index":941,"title":{},"body":{"index.html":{}}}],["document",{"_index":1108,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"license.html":{}}}],["doe",{"_index":620,"title":{},"body":{"controllers/PostController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":770,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":476,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dolor",{"_index":564,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":1404,"title":{},"body":{"license.html":{}}}],["download",{"_index":960,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":538,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto/get",{"_index":548,"title":{},"body":{"controllers/PostController.html":{}}}],["dto/login",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["each",{"_index":1068,"title":{},"body":{"index.html":{},"license.html":{}}}],["easier",{"_index":1410,"title":{},"body":{"license.html":{}}}],["editorial",{"_index":1170,"title":{},"body":{"license.html":{}}}],["efficient",{"_index":1059,"title":{},"body":{"index.html":{}}}],["elaborations",{"_index":1173,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":1190,"title":{},"body":{"license.html":{}}}],["elit",{"_index":569,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPostUser.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["empty",{"_index":711,"title":{},"body":{"injectables/PostService.html":{}}}],["enclosed",{"_index":1400,"title":{},"body":{"license.html":{}}}],["end",{"_index":1395,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":1008,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":993,"title":{},"body":{"index.html":{}}}],["engage",{"_index":1071,"title":{},"body":{"index.html":{}}}],["entities",{"_index":1117,"title":{},"body":{"license.html":{}}}],["entity",{"_index":1112,"title":{},"body":{"license.html":{}}}],["env",{"_index":965,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":964,"title":{},"body":{"index.html":{}}}],["eq",{"_index":698,"title":{},"body":{"injectables/PostService.html":{}}}],["error",{"_index":288,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["errors",{"_index":305,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["eslint",{"_index":839,"title":{},"body":{"injectables/UserService.html":{}}}],["eslint/eslint",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["eslint/no",{"_index":843,"title":{},"body":{"injectables/UserService.html":{}}}],["etc",{"_index":1027,"title":{},"body":{"index.html":{}}}],["even",{"_index":1373,"title":{},"body":{"license.html":{}}}],["event",{"_index":1351,"title":{},"body":{"license.html":{}}}],["example",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"license.html":{}}}],["example:example",{"_index":978,"title":{},"body":{"index.html":{}}}],["examples",{"_index":453,"title":{},"body":{"controllers/PostController.html":{}}}],["except",{"_index":1232,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":1204,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":1220,"title":{},"body":{"license.html":{}}}],["exec",{"_index":702,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["executed",{"_index":1314,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":1349,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1142,"title":{},"body":{"license.html":{}}}],["exist",{"_index":596,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["exist.'})@apiresponse({status",{"_index":477,"title":{},"body":{"controllers/PostController.html":{}}}],["existing",{"_index":289,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["existingpost",{"_index":675,"title":{},"body":{"injectables/PostService.html":{}}}],["existinguser",{"_index":830,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["exists.'})@apiresponse({status",{"_index":465,"title":{},"body":{"controllers/PostController.html":{}}}],["expiresin",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1305,"title":{},"body":{"license.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":275,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"dependencies.html":{},"license.html":{}}}],["expressrequestwithblogpostuser",{"_index":124,"title":{"interfaces/ExpressRequestWithBlogPostUser.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["extends",{"_index":273,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["extractjwt",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":458,"title":{},"body":{"controllers/PostController.html":{}}}],["failed.'})@apiresponse({status",{"_index":475,"title":{},"body":{"controllers/PostController.html":{}}}],["failed.'})@useguards(jwtauthguard",{"_index":466,"title":{},"body":{"controllers/PostController.html":{}}}],["failexample",{"_index":570,"title":{},"body":{"controllers/PostController.html":{}}}],["failexample2",{"_index":623,"title":{},"body":{"controllers/PostController.html":{}}}],["failure",{"_index":1369,"title":{},"body":{"license.html":{}}}],["false",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/PostController.html":{}}}],["false})@apiquery({name",{"_index":520,"title":{},"body":{"controllers/PostController.html":{}}}],["false})@apiresponse({status",{"_index":521,"title":{},"body":{"controllers/PostController.html":{}}}],["faster",{"_index":1058,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1084,"title":{},"body":{"index.html":{}}}],["fee",{"_index":1377,"title":{},"body":{"license.html":{}}}],["fields",{"_index":1399,"title":{},"body":{"license.html":{}}}],["fifty",{"_index":1134,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["filed",{"_index":1260,"title":{},"body":{"license.html":{}}}],["files",{"_index":1151,"title":{},"body":{"license.html":{}}}],["filtering",{"_index":1036,"title":{},"body":{"index.html":{}}}],["find",{"_index":712,"title":{},"body":{"injectables/PostService.html":{}}}],["findbyid",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(userid",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername(username",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusernameoremail",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusernameoremail(identifier",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":697,"title":{},"body":{"injectables/PostService.html":{}}}],["fitness",{"_index":1340,"title":{},"body":{"license.html":{}}}],["following",{"_index":956,"title":{},"body":{"index.html":{},"license.html":{}}}],["form",{"_index":1144,"title":{},"body":{"license.html":{}}}],["format",{"_index":347,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"license.html":{}}}],["found",{"_index":615,"title":{},"body":{"controllers/PostController.html":{},"injectables/UserService.html":{}}}],["found'})@apiresponse({status",{"_index":494,"title":{},"body":{"controllers/PostController.html":{}}}],["found.'})@apiresponse({status",{"_index":456,"title":{},"body":{"controllers/PostController.html":{}}}],["framework",{"_index":1064,"title":{},"body":{"index.html":{}}}],["free",{"_index":1223,"title":{},"body":{"license.html":{}}}],["frontend",{"_index":1031,"title":{},"body":{"index.html":{}}}],["function",{"_index":244,"title":{},"body":{"classes/BlogPost.html":{},"coverage.html":{}}}],["functions",{"_index":916,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1052,"title":{},"body":{"index.html":{}}}],["future",{"_index":1017,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1157,"title":{},"body":{"license.html":{}}}],["generateslug",{"_index":884,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(blogpost.title",{"_index":252,"title":{},"body":{"classes/BlogPost.html":{}}}],["generateslug(blogposttitle",{"_index":245,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["get(\"/:id",{"_index":594,"title":{},"body":{"controllers/PostController.html":{}}}],["get(\"/:id/comments",{"_index":614,"title":{},"body":{"controllers/PostController.html":{}}}],["get(\"/:id/relations",{"_index":604,"title":{},"body":{"controllers/PostController.html":{}}}],["get('')@apioperation({summary",{"_index":517,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/:id')@apioperation({summary",{"_index":511,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/:id/comments')@apioperation({summary",{"_index":504,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/:id/relations')@apioperation({summary",{"_index":526,"title":{},"body":{"controllers/PostController.html":{}}}],["get()@healthcheck",{"_index":355,"title":{},"body":{"controllers/HealthController.html":{}}}],["getallposts",{"_index":641,"title":{},"body":{"injectables/PostService.html":{}}}],["getcomments",{"_index":442,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getcomments(@param(\"id",{"_index":616,"title":{},"body":{"controllers/PostController.html":{}}}],["getcomments(postid",{"_index":503,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getdevinstructions",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpost",{"_index":595,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost'})@apiparam({name",{"_index":512,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid",{"_index":443,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getpostbyid(@param(\"id",{"_index":597,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid(id",{"_index":510,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getpostbyslug",{"_index":642,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyslug(slug",{"_index":660,"title":{},"body":{"injectables/PostService.html":{}}}],["getposts",{"_index":444,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(@query(\"page",{"_index":587,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(page",{"_index":514,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostsbypagination",{"_index":643,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostsbypagination(page",{"_index":662,"title":{},"body":{"injectables/PostService.html":{}}}],["getrelatedposts",{"_index":445,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getrelatedposts(@param",{"_index":606,"title":{},"body":{"controllers/PostController.html":{}}}],["getrelatedposts(getrelatedpostsdto",{"_index":525,"title":{},"body":{"controllers/PostController.html":{}}}],["getrelatedposts(id",{"_index":664,"title":{},"body":{"injectables/PostService.html":{}}}],["getrelatedpostsdto",{"_index":338,"title":{"classes/GetRelatedPostsDto.html":{}},"body":{"classes/GetRelatedPostsDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["getting",{"_index":926,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["github",{"_index":1045,"title":{},"body":{"index.html":{}}}],["give",{"_index":1265,"title":{},"body":{"license.html":{}}}],["goodwill",{"_index":1366,"title":{},"body":{"license.html":{}}}],["governing",{"_index":1420,"title":{},"body":{"license.html":{}}}],["grant",{"_index":1214,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1143,"title":{},"body":{"license.html":{}}}],["granting",{"_index":1113,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1217,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1425,"title":{},"body":{"modules.html":{}}}],["great",{"_index":621,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["grigoropoulos",{"_index":1415,"title":{},"body":{"license.html":{},"properties.html":{}}}],["grossly",{"_index":1356,"title":{},"body":{"license.html":{}}}],["harmless",{"_index":1391,"title":{},"body":{"license.html":{}}}],["hashedpassword",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["hasusernameoremail",{"_index":429,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hasusernameoremail(validationoptions",{"_index":922,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hasusernameoremail({message",{"_index":417,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["headless",{"_index":927,"title":{},"body":{"index.html":{},"properties.html":{}}}],["health",{"_index":353,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["health.controller",{"_index":390,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":359,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":364,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":357,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":351,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicatorresult",{"_index":363,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthmodule",{"_index":45,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heath",{"_index":1004,"title":{},"body":{"index.html":{}}}],["help",{"_index":1434,"title":{},"body":{"properties.html":{}}}],["here",{"_index":77,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["hereby",{"_index":1216,"title":{},"body":{"license.html":{}}}],["herein",{"_index":1310,"title":{},"body":{"license.html":{}}}],["higher",{"_index":946,"title":{},"body":{"index.html":{}}}],["hold",{"_index":1390,"title":{},"body":{"license.html":{}}}],["http",{"_index":368,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:3000",{"_index":990,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":1098,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":1418,"title":{},"body":{"license.html":{}}}],["httpexception",{"_index":530,"title":{},"body":{"controllers/PostController.html":{}}}],["httpexception(error.message",{"_index":582,"title":{},"body":{"controllers/PostController.html":{}}}],["httphealthindicator",{"_index":358,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":388,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://betterstack.com/better",{"_index":373,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://static1.smartbear.co/swagger/media/assets/images/swagger_logo.svg",{"_index":559,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus",{"_index":531,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.bad_request",{"_index":613,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.conflict",{"_index":583,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.internal_server_error",{"_index":585,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.not_found",{"_index":584,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.unauthorized",{"_index":603,"title":{},"body":{"controllers/PostController.html":{}}}],["httpstatus.unprocessable_entity",{"_index":593,"title":{},"body":{"controllers/PostController.html":{}}}],["hub",{"_index":1048,"title":{},"body":{"index.html":{}}}],["hydrateddocument",{"_index":232,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":307,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/GetRelatedPostsDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["id'})@apiparam({name",{"_index":488,"title":{},"body":{"controllers/PostController.html":{}}}],["id'})@apiresponse({status",{"_index":493,"title":{},"body":{"controllers/PostController.html":{}}}],["identification",{"_index":1411,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":343,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["identifying",{"_index":1403,"title":{},"body":{"license.html":{}}}],["ignoreexpiration",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ii",{"_index":1132,"title":{},"body":{"license.html":{}}}],["iii",{"_index":1139,"title":{},"body":{"license.html":{}}}],["image",{"_index":558,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["imagepath",{"_index":204,"title":{},"body":{"classes/BlogPost.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["images",{"_index":1025,"title":{},"body":{"index.html":{}}}],["images/my",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implement",{"_index":1032,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":1013,"title":{},"body":{"index.html":{}}}],["implied",{"_index":1337,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"license.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["improvements",{"_index":1018,"title":{},"body":{"index.html":{}}}],["improving",{"_index":1203,"title":{},"body":{"license.html":{}}}],["inability",{"_index":1364,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":1361,"title":{},"body":{"license.html":{}}}],["include",{"_index":1177,"title":{},"body":{"license.html":{}}}],["included",{"_index":1163,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1281,"title":{},"body":{"license.html":{}}}],["including",{"_index":1147,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":1188,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":1212,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":1392,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":1388,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":1379,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":1161,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":454,"title":{},"body":{"controllers/PostController.html":{}}}],["indirect",{"_index":1126,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1141,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":1006,"title":{},"body":{"index.html":{},"license.html":{}}}],["informational",{"_index":1294,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":1243,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1257,"title":{},"body":{"license.html":{}}}],["injectable",{"_index":64,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":666,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["input",{"_index":451,"title":{},"body":{"controllers/PostController.html":{}}}],["install",{"_index":953,"title":{},"body":{"index.html":{}}}],["installed",{"_index":949,"title":{},"body":{"index.html":{}}}],["instance",{"_index":292,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["instanceof",{"_index":580,"title":{},"body":{"controllers/PostController.html":{}}}],["institute",{"_index":1247,"title":{},"body":{"license.html":{}}}],["instructions",{"_index":957,"title":{},"body":{"index.html":{}}}],["insufficient",{"_index":312,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["intentionally",{"_index":1186,"title":{},"body":{"license.html":{}}}],["interface",{"_index":269,"title":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":271,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"license.html":{},"overview.html":{}}}],["interfaces/post.interface",{"_index":547,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["invalid",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/PostController.html":{}}}],["invalid'})@apiresponse({status",{"_index":528,"title":{},"body":{"controllers/PostController.html":{}}}],["ipsum",{"_index":563,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["irrevocable",{"_index":1224,"title":{},"body":{"license.html":{}}}],["isemail",{"_index":786,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["ismongoid",{"_index":349,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["isnotempty",{"_index":323,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring()@apiproperty",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{}}}],["isoptional",{"_index":428,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isslugvalid",{"_index":692,"title":{},"body":{"injectables/PostService.html":{}}}],["isstring",{"_index":322,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":319,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["issue",{"_index":1086,"title":{},"body":{"index.html":{},"license.html":{}}}],["january",{"_index":1096,"title":{},"body":{"license.html":{}}}],["jest",{"_index":1041,"title":{},"body":{"index.html":{}}}],["john",{"_index":619,"title":{},"body":{"controllers/PostController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["john_doe",{"_index":431,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":785,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":426,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["john_doe@example.com",{"_index":432,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["john_doe@example.com'})@isemail()@isnotempty",{"_index":766,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["john_doe@example.com'})@isstring()@isoptional",{"_index":422,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["jwt",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.token.here",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt_secret=\"42",{"_index":984,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":143,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":170,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keywords",{"_index":1436,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1336,"title":{},"body":{"license.html":{}}}],["language",{"_index":1419,"title":{},"body":{"license.html":{}}}],["languages",{"_index":1038,"title":{},"body":{"index.html":{}}}],["law",{"_index":1331,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":1253,"title":{},"body":{"license.html":{}}}],["legal",{"_index":1114,"title":{},"body":{"license.html":{}}}],["legend",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":787,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["length(8",{"_index":789,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter",{"_index":774,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter'})@matches(/(?=.*[0",{"_index":782,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter'})@matches(/(?=.*[a",{"_index":781,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["liability",{"_index":1350,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1359,"title":{},"body":{"license.html":{}}}],["licensable",{"_index":1241,"title":{},"body":{"license.html":{}}}],["license",{"_index":1089,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1090,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":1258,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":1109,"title":{},"body":{"license.html":{}}}],["limit",{"_index":516,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{}}}],["limit(limit",{"_index":714,"title":{},"body":{"injectables/PostService.html":{}}}],["limitation",{"_index":1338,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":1421,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1148,"title":{},"body":{"license.html":{}}}],["line",{"_index":841,"title":{},"body":{"injectables/UserService.html":{}}}],["link",{"_index":1181,"title":{},"body":{"license.html":{}}}],["list",{"_index":994,"title":{},"body":{"index.html":{}}}],["lists",{"_index":1197,"title":{},"body":{"license.html":{}}}],["literal",{"_index":402,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["litigation",{"_index":1248,"title":{},"body":{"license.html":{}}}],["local",{"_index":952,"title":{},"body":{"index.html":{}}}],["locales",{"_index":1039,"title":{},"body":{"index.html":{}}}],["log",{"_index":1076,"title":{},"body":{"index.html":{}}}],["logged",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["login",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginuserdto",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":87,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["loginuserdto.username",{"_index":853,"title":{},"body":{"injectables/UserService.html":{}}}],["lorem",{"_index":562,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":1365,"title":{},"body":{"license.html":{}}}],["losses",{"_index":1372,"title":{},"body":{"license.html":{}}}],["lower",{"_index":247,"title":{},"body":{"classes/BlogPost.html":{}}}],["lowercase",{"_index":775,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["machine",{"_index":940,"title":{},"body":{"index.html":{}}}],["made",{"_index":1020,"title":{},"body":{"index.html":{},"license.html":{}}}],["mailing",{"_index":1196,"title":{},"body":{"license.html":{}}}],["make",{"_index":731,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["making",{"_index":1056,"title":{},"body":{"index.html":{},"license.html":{}}}],["malfunction",{"_index":1370,"title":{},"body":{"license.html":{}}}],["manage",{"_index":932,"title":{},"body":{"index.html":{}}}],["managed",{"_index":1200,"title":{},"body":{"license.html":{}}}],["management",{"_index":551,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["manager",{"_index":1044,"title":{},"body":{"index.html":{}}}],["marked",{"_index":1206,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1321,"title":{},"body":{"license.html":{}}}],["matches",{"_index":788,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matches(/(?=.*[0",{"_index":792,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matches(/(?=.*[a",{"_index":791,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matching",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mean",{"_index":1105,"title":{},"body":{"license.html":{}}}],["means",{"_index":1123,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":1153,"title":{},"body":{"license.html":{}}}],["media",{"_index":1023,"title":{},"body":{"index.html":{},"license.html":{}}}],["medium",{"_index":1263,"title":{},"body":{"license.html":{}}}],["meet",{"_index":1264,"title":{},"body":{"license.html":{}}}],["memory",{"_index":369,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["memoryhealthindicator",{"_index":361,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":1339,"title":{},"body":{"license.html":{}}}],["merely",{"_index":1180,"title":{},"body":{"license.html":{}}}],["message",{"_index":294,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{}}}],["metadata",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":915,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":622,"title":{},"body":{"controllers/PostController.html":{}}}],["model",{"_index":645,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["modifications",{"_index":1146,"title":{},"body":{"license.html":{}}}],["modified",{"_index":1268,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1295,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1300,"title":{},"body":{"license.html":{}}}],["modularity",{"_index":1067,"title":{},"body":{"index.html":{}}}],["module",{"_index":32,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":34,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":346,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"index.html":{},"properties.html":{}}}],["mongodb_uri",{"_index":976,"title":{},"body":{"index.html":{}}}],["mongodb_uri=\"mongodb://mongodb/test",{"_index":980,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":233,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoose.types.objectid",{"_index":651,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["mongoose.types.objectid(userid",{"_index":680,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(id",{"_index":718,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(postid",{"_index":748,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(relationpostid",{"_index":729,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(sourcepostid",{"_index":728,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoosehealthindicator",{"_index":360,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":637,"title":{},"body":{"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.mongodb_uri",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["monitor",{"_index":1009,"title":{},"body":{"index.html":{}}}],["more",{"_index":1028,"title":{},"body":{"index.html":{},"license.html":{}}}],["multiple",{"_index":1078,"title":{},"body":{"index.html":{}}}],["name",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPostUser.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"classes/PostError.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["names",{"_index":1319,"title":{},"body":{"license.html":{}}}],["natively",{"_index":939,"title":{},"body":{"index.html":{}}}],["necessarily",{"_index":1242,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":954,"title":{},"body":{"index.html":{}}}],["need",{"_index":943,"title":{},"body":{"index.html":{}}}],["negligence",{"_index":1354,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":1357,"title":{},"body":{"license.html":{}}}],["nestjs",{"_index":936,"title":{},"body":{"index.html":{}}}],["nestjs(express",{"_index":1435,"title":{},"body":{"properties.html":{}}}],["nestjs/axios",{"_index":389,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":396,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":365,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["new",{"_index":239,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newpost",{"_index":681,"title":{},"body":{"injectables/PostService.html":{}}}],["newpost.save",{"_index":684,"title":{},"body":{"injectables/PostService.html":{}}}],["newuser",{"_index":835,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":838,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":250,"title":{},"body":{"classes/BlogPost.html":{},"injectables/UserService.html":{}}}],["nikolaos",{"_index":1414,"title":{},"body":{"license.html":{},"properties.html":{}}}],["node.js",{"_index":944,"title":{},"body":{"index.html":{}}}],["non",{"_index":1070,"title":{},"body":{"index.html":{},"license.html":{}}}],["normally",{"_index":1291,"title":{},"body":{"license.html":{}}}],["note",{"_index":1011,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"user",{"_index":851,"title":{},"body":{"injectables/UserService.html":{}}}],["nothing",{"_index":1309,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1162,"title":{},"body":{"license.html":{}}}],["notices",{"_index":1271,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":1307,"title":{},"body":{"license.html":{}}}],["npm",{"_index":947,"title":{},"body":{"index.html":{}}}],["number",{"_index":515,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{}}}],["number'})@matches",{"_index":783,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["object",{"_index":554,"title":{},"body":{"controllers/PostController.html":{},"license.html":{}}}],["objectid",{"_index":218,"title":{},"body":{"classes/BlogPost.html":{}}}],["objectiduserid",{"_index":679,"title":{},"body":{"injectables/PostService.html":{}}}],["obligations",{"_index":1380,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":1417,"title":{},"body":{"license.html":{}}}],["offer",{"_index":1235,"title":{},"body":{"license.html":{}}}],["omit",{"_index":274,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["once",{"_index":992,"title":{},"body":{"index.html":{}}}],["one",{"_index":733,"title":{},"body":{"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"license.html":{}}}],["open",{"_index":974,"title":{},"body":{"index.html":{}}}],["operating",{"_index":958,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":499,"title":{},"body":{"controllers/PostController.html":{}}}],["optimize",{"_index":1053,"title":{},"body":{"index.html":{}}}],["optional",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":1016,"title":{},"body":{"index.html":{}}}],["orders",{"_index":1014,"title":{},"body":{"index.html":{}}}],["organization",{"_index":1066,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1326,"title":{},"body":{"license.html":{}}}],["original",{"_index":1176,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":1131,"title":{},"body":{"license.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":1137,"title":{},"body":{"license.html":{}}}],["overview",{"_index":1426,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1111,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":1133,"title":{},"body":{"license.html":{}}}],["package",{"_index":888,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":519,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["pagination",{"_index":996,"title":{},"body":{"index.html":{}}}],["param",{"_index":293,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["param(\"commentid",{"_index":629,"title":{},"body":{"controllers/PostController.html":{}}}],["param(\"postid",{"_index":628,"title":{},"body":{"controllers/PostController.html":{}}}],["parameters",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parchment",{"_index":69,"title":{},"body":{"injectables/AppService.html":{}}}],["part",{"_index":1279,"title":{},"body":{"license.html":{}}}],["partially",{"_index":931,"title":{},"body":{"index.html":{}}}],["particular",{"_index":1341,"title":{},"body":{"license.html":{}}}],["party",{"_index":1290,"title":{},"body":{"license.html":{}}}],["passport",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":398,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":278,"title":{},"body":{"classes/BlogPostUser.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["passwordmatches",{"_index":854,"title":{},"body":{"injectables/UserService.html":{}}}],["patent",{"_index":1231,"title":{},"body":{"license.html":{}}}],["path",{"_index":383,"title":{},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{}}}],["payload",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["percent",{"_index":1135,"title":{},"body":{"license.html":{}}}],["perform",{"_index":1228,"title":{},"body":{"license.html":{}}}],["permission",{"_index":1317,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":313,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"license.html":{}}}],["perpetual",{"_index":1218,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":1278,"title":{},"body":{"license.html":{}}}],["places",{"_index":1285,"title":{},"body":{"license.html":{}}}],["plaintoclass",{"_index":667,"title":{},"body":{"injectables/PostService.html":{}}}],["plaintoclass(blogpost",{"_index":674,"title":{},"body":{"injectables/PostService.html":{}}}],["please",{"_index":73,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["plugin",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["populate",{"_index":699,"title":{},"body":{"injectables/PostService.html":{}}}],["port",{"_index":972,"title":{},"body":{"index.html":{}}}],["port=\"3000",{"_index":981,"title":{},"body":{"index.html":{}}}],["possibility",{"_index":1375,"title":{},"body":{"license.html":{}}}],["post",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/GetRelatedPostsDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apibody({type",{"_index":450,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@apiresponse({status",{"_index":527,"title":{},"body":{"controllers/PostController.html":{}}}],["post(\"/:id/comments",{"_index":618,"title":{},"body":{"controllers/PostController.html":{}}}],["post(\"/relation",{"_index":609,"title":{},"body":{"controllers/PostController.html":{}}}],["post(\"login",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"register",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('')@apioperation({summary",{"_index":462,"title":{},"body":{"controllers/PostController.html":{}}}],["post('/:id/comments')@apioperation({summary",{"_index":447,"title":{},"body":{"controllers/PostController.html":{}}}],["post('/relation/')@apioperation({summary",{"_index":469,"title":{},"body":{"controllers/PostController.html":{}}}],["post('login')@apiresponse({status",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.comments",{"_index":750,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.findindex(comment",{"_index":758,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.length",{"_index":751,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.push(comment",{"_index":755,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.splice(commentindex",{"_index":763,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":636,"title":{},"body":{"modules/PostModule.html":{}}}],["post.createdby._id.equals(userid",{"_index":723,"title":{},"body":{"injectables/PostService.html":{}}}],["post.dto",{"_index":539,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dto.stub.ts",{"_index":875,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["post.dto.ts",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:13",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:18",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:8",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.errors",{"_index":540,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.jpg",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post.populate",{"_index":722,"title":{},"body":{"injectables/PostService.html":{}}}],["post.relatedposts",{"_index":608,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.save",{"_index":756,"title":{},"body":{"injectables/PostService.html":{}}}],["post.service",{"_index":537,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["post.title",{"_index":677,"title":{},"body":{"injectables/PostService.html":{}}}],["post.toobject",{"_index":691,"title":{},"body":{"injectables/PostService.html":{}}}],["post/interfaces/post.interface",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["post/post.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["postcircularrelationship",{"_index":303,"title":{"classes/PostCircularRelationship.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postcircularrelationship(\"can't",{"_index":730,"title":{},"body":{"injectables/PostService.html":{}}}],["postcontroller",{"_index":434,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postcount",{"_index":707,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist",{"_index":300,"title":{"classes/PostDoesNotExist.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postdoesnotexist(\"post",{"_index":735,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist(\"posts",{"_index":710,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist(\"relationship",{"_index":738,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist(`post",{"_index":703,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnothavecomments",{"_index":311,"title":{"classes/PostDoesNotHaveComments.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postdoesnothavecomments(`post",{"_index":752,"title":{},"body":{"injectables/PostService.html":{}}}],["posterror",{"_index":290,"title":{"classes/PostError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["posterror(`didn't",{"_index":727,"title":{},"body":{"injectables/PostService.html":{}}}],["postid",{"_index":460,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["postidvalidationerror",{"_index":308,"title":{"classes/PostIdValidationError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postidvalidationerror(\"provided",{"_index":719,"title":{},"body":{"injectables/PostService.html":{}}}],["postinsufficientpermissionserror",{"_index":314,"title":{"classes/PostInsufficientPermissionsError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postinsufficientpermissionserror(`you",{"_index":724,"title":{},"body":{"injectables/PostService.html":{}}}],["postmodule",{"_index":46,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrelationconflict",{"_index":299,"title":{"classes/PostRelationConflict.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postrelationconflict(\"relationship",{"_index":742,"title":{},"body":{"injectables/PostService.html":{}}}],["postrelationconflict(`post",{"_index":678,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":309,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["posts'})@apiquery({name",{"_index":518,"title":{},"body":{"controllers/PostController.html":{}}}],["posts'})@apiresponse({status",{"_index":474,"title":{},"body":{"controllers/PostController.html":{}}}],["posts.'})@apiresponse({status",{"_index":522,"title":{},"body":{"controllers/PostController.html":{}}}],["posts.dto",{"_index":549,"title":{},"body":{"controllers/PostController.html":{}}}],["posts.dto.ts",{"_index":341,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"coverage.html":{}}}],["posts.dto.ts:10",{"_index":348,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["posts.length",{"_index":690,"title":{},"body":{"injectables/PostService.html":{}}}],["postservice",{"_index":536,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postslugvalidationerror",{"_index":306,"title":{"classes/PostSlugValidationError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postslugvalidationerror(\"provided",{"_index":705,"title":{},"body":{"injectables/PostService.html":{}}}],["potential",{"_index":1019,"title":{},"body":{"index.html":{}}}],["power",{"_index":1124,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":1145,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PostController.html":{}}}],["prepare",{"_index":1226,"title":{},"body":{"license.html":{}}}],["printed",{"_index":1409,"title":{},"body":{"license.html":{}}}],["private",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":1043,"title":{},"body":{"index.html":{}}}],["process.env.jwt_secret",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["product",{"_index":1322,"title":{},"body":{"license.html":{}}}],["profile",{"_index":1077,"title":{},"body":{"index.html":{}}}],["project",{"_index":929,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":1270,"title":{},"body":{"license.html":{}}}],["promise",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["prop",{"_index":230,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["prop({default",{"_index":264,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["prop({required",{"_index":214,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["prop({type",{"_index":210,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["prop({unique",{"_index":226,"title":{},"body":{"classes/BlogPost.html":{}}}],["properties",{"_index":199,"title":{"properties.html":{}},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"properties.html":{}}}],["provide",{"_index":421,"title":{},"body":{"classes/LoginUserDto.html":{},"license.html":{}}}],["provided",{"_index":418,"title":{},"body":{"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":1333,"title":{},"body":{"license.html":{}}}],["public",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["publicly",{"_index":1227,"title":{},"body":{"license.html":{}}}],["publish",{"_index":1047,"title":{},"body":{"index.html":{}}}],["pull",{"_index":1088,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1201,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1121,"title":{},"body":{"license.html":{}}}],["put",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["put(\"users/name",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["query",{"_index":479,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["query(\"limit",{"_index":588,"title":{},"body":{"controllers/PostController.html":{}}}],["query(\"slug",{"_index":589,"title":{},"body":{"controllers/PostController.html":{}}}],["readable",{"_index":1283,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{}}}],["real",{"_index":768,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["reason",{"_index":1394,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1323,"title":{},"body":{"license.html":{}}}],["received",{"_index":1210,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":1266,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":1407,"title":{},"body":{"license.html":{}}}],["redistributing",{"_index":1346,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":1261,"title":{},"body":{"license.html":{}}}],["reduce",{"_index":1054,"title":{},"body":{"index.html":{}}}],["ref",{"_index":219,"title":{},"body":{"classes/BlogPost.html":{}}}],["refactor",{"_index":1063,"title":{},"body":{"index.html":{}}}],["refer",{"_index":74,"title":{},"body":{"injectables/AppService.html":{}}}],["reflect",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["regarding",{"_index":1315,"title":{},"body":{"license.html":{}}}],["register",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["register(@body",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["registered",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruserdto",{"_index":111,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["registry",{"_index":1049,"title":{},"body":{"index.html":{}}}],["related",{"_index":340,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"controllers/PostController.html":{},"classes/PostError.html":{},"coverage.html":{}}}],["relatedpost._id.equals(relationpost._id",{"_index":741,"title":{},"body":{"injectables/PostService.html":{}}}],["relatedposts",{"_index":205,"title":{},"body":{"classes/BlogPost.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["relation",{"_index":297,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{}}}],["relationexists",{"_index":739,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpost",{"_index":737,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpostid",{"_index":334,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["relations",{"_index":934,"title":{},"body":{"index.html":{}}}],["relationship",{"_index":471,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"index.html":{}}}],["relationship.dto",{"_index":541,"title":{},"body":{"controllers/PostController.html":{}}}],["relationship.dto.ts",{"_index":333,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"coverage.html":{}}}],["relationship.dto.ts:13",{"_index":336,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["relationship.dto.ts:8",{"_index":337,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["relationships",{"_index":302,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["remain",{"_index":1178,"title":{},"body":{"license.html":{}}}],["remove",{"_index":486,"title":{},"body":{"controllers/PostController.html":{}}}],["rename",{"_index":963,"title":{},"body":{"index.html":{}}}],["replace",{"_index":966,"title":{},"body":{"index.html":{}}}],["replaced",{"_index":1402,"title":{},"body":{"license.html":{}}}],["reports",{"_index":1083,"title":{},"body":{"index.html":{}}}],["repository",{"_index":951,"title":{},"body":{"index.html":{}}}],["represent",{"_index":1174,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":1195,"title":{},"body":{"license.html":{}}}],["reproduce",{"_index":1225,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":1327,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":1101,"title":{},"body":{"license.html":{}}}],["req",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["req.user",{"_index":575,"title":{},"body":{"controllers/PostController.html":{}}}],["request",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/PostController.html":{},"index.html":{}}}],["request.'})@apiresponse({status",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests",{"_index":1085,"title":{},"body":{"index.html":{}}}],["required",{"_index":220,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"controllers/PostController.html":{},"license.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["responsibility",{"_index":1386,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":1343,"title":{},"body":{"license.html":{}}}],["result",{"_index":576,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"license.html":{}}}],["result.deletedcount",{"_index":726,"title":{},"body":{"injectables/PostService.html":{}}}],["resulting",{"_index":1152,"title":{},"body":{"license.html":{}}}],["results",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1275,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":505,"title":{},"body":{"controllers/PostController.html":{}}}],["retrieved",{"_index":507,"title":{},"body":{"controllers/PostController.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["revisions",{"_index":1171,"title":{},"body":{"license.html":{}}}],["rewrite",{"_index":1060,"title":{},"body":{"index.html":{}}}],["rights",{"_index":1382,"title":{},"body":{"license.html":{}}}],["risks",{"_index":1348,"title":{},"body":{"license.html":{}}}],["robust",{"_index":1033,"title":{},"body":{"index.html":{}}}],["royalty",{"_index":1222,"title":{},"body":{"license.html":{}}}],["run",{"_index":938,"title":{},"body":{"index.html":{}}}],["running",{"_index":942,"title":{},"body":{"index.html":{}}}],["safety",{"_index":1062,"title":{},"body":{"index.html":{}}}],["same",{"_index":1408,"title":{},"body":{"license.html":{}}}],["sanitizeblogpost",{"_index":669,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizeblogpost(post",{"_index":924,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizeblogpost(post.toobject",{"_index":704,"title":{},"body":{"injectables/PostService.html":{}}}],["sanitizeblogpost(updatedpost.toobject",{"_index":747,"title":{},"body":{"injectables/PostService.html":{}}}],["sanitizeblogposts",{"_index":670,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizeblogposts(posts",{"_index":925,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizeblogposts(posts.map(post",{"_index":717,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost",{"_index":683,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.content",{"_index":686,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.imagepath",{"_index":687,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.title",{"_index":685,"title":{},"body":{"injectables/PostService.html":{}}}],["saveduser",{"_index":837,"title":{},"body":{"injectables/UserService.html":{}}}],["saveduser.toobject",{"_index":848,"title":{},"body":{"injectables/UserService.html":{}}}],["schema",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":231,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["schemafactory.createforclass(blogpost",{"_index":243,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(blogpostcomment",{"_index":268,"title":{},"body":{"classes/BlogPostComment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(blogpostuser",{"_index":284,"title":{},"body":{"classes/BlogPostUser.html":{},"miscellaneous/variables.html":{}}}],["schemas/comment.schema",{"_index":545,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["schemas/post.schema",{"_index":276,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["schemas/user.schema",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["secret",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":1234,"title":{},"body":{"license.html":{}}}],["sections",{"_index":1106,"title":{},"body":{"license.html":{}}}],["secure",{"_index":1074,"title":{},"body":{"index.html":{}}}],["see",{"_index":1095,"title":{},"body":{"index.html":{},"license.html":{}}}],["seed",{"_index":982,"title":{},"body":{"index.html":{}}}],["select",{"_index":700,"title":{},"body":{"injectables/PostService.html":{}}}],["sell",{"_index":1236,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1194,"title":{},"body":{"license.html":{}}}],["separable",{"_index":1179,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1312,"title":{},"body":{"license.html":{}}}],["server",{"_index":962,"title":{},"body":{"index.html":{}}}],["service",{"_index":1320,"title":{},"body":{"license.html":{}}}],["set",{"_index":470,"title":{},"body":{"controllers/PostController.html":{}}}],["sets",{"_index":1003,"title":{},"body":{"index.html":{}}}],["shall",{"_index":1104,"title":{},"body":{"license.html":{}}}],["shares",{"_index":1138,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["sit",{"_index":565,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":1055,"title":{},"body":{"index.html":{}}}],["skip",{"_index":706,"title":{},"body":{"injectables/PostService.html":{}}}],["skip(skip",{"_index":713,"title":{},"body":{"injectables/PostService.html":{}}}],["slug",{"_index":206,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["slugify",{"_index":234,"title":{},"body":{"classes/BlogPost.html":{},"dependencies.html":{}}}],["slugify(blogposttitle",{"_index":246,"title":{},"body":{"classes/BlogPost.html":{}}}],["software",{"_index":1149,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1385,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1342,"title":{},"body":{"license.html":{}}}],["solution",{"_index":1034,"title":{},"body":{"index.html":{}}}],["sort",{"_index":715,"title":{},"body":{"injectables/PostService.html":{}}}],["sorting",{"_index":1035,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"license.html":{}}}],["sourcepost",{"_index":734,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.populate",{"_index":746,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.relatedposts.push(relationpost",{"_index":743,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.relatedposts.some(relatedpost",{"_index":740,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.save",{"_index":745,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepostid",{"_index":335,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["special",{"_index":776,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["specific",{"_index":487,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["specify",{"_index":975,"title":{},"body":{"index.html":{}}}],["src/.../comment.schema.ts",{"_index":1439,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hasusernameoremail.decorator.ts",{"_index":919,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":917,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post.schema.ts",{"_index":918,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../post.types.ts",{"_index":1441,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../post.utils.ts",{"_index":920,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":1440,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:60",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:66",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/hasusernameoremail.decorator.ts",{"_index":868,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/dto/login",{"_index":414,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":764,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":793,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":391,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":397,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":403,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":400,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/health/health.controller.ts",{"_index":352,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:27",{"_index":356,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":386,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":871,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/dto/create",{"_index":317,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/post/dto/get",{"_index":339,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"coverage.html":{}}}],["src/post/interfaces/post.interface.ts",{"_index":272,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"coverage.html":{}}}],["src/post/post.controller.ts",{"_index":435,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:141",{"_index":523,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:186",{"_index":513,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:224",{"_index":502,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:268",{"_index":529,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:329",{"_index":481,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:376",{"_index":509,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:448",{"_index":459,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:501",{"_index":495,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:93",{"_index":467,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.errors.ts",{"_index":287,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["src/post/post.errors.ts:5",{"_index":632,"title":{},"body":{"classes/PostError.html":{}}}],["src/post/post.module.ts",{"_index":635,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":639,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:101",{"_index":659,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:117",{"_index":656,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:137",{"_index":665,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:148",{"_index":654,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:184",{"_index":658,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:200",{"_index":648,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:226",{"_index":655,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:27",{"_index":646,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:30",{"_index":652,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:56",{"_index":657,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:64",{"_index":661,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:82",{"_index":663,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/types/post.types.ts",{"_index":881,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/post/utils/post.utils.ts",{"_index":883,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/schemas/comment.schema.ts",{"_index":256,"title":{},"body":{"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/comment.schema.ts:10",{"_index":262,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:13",{"_index":263,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:16",{"_index":265,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:7",{"_index":261,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/post.schema.ts",{"_index":198,"title":{},"body":{"classes/BlogPost.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/post.schema.ts:11",{"_index":228,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:14",{"_index":223,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:17",{"_index":216,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:20",{"_index":222,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:23",{"_index":227,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:26",{"_index":225,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:29",{"_index":213,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:32",{"_index":221,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:35",{"_index":229,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/user.schema.ts",{"_index":277,"title":{},"body":{"classes/BlogPostUser.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/user.schema.ts:10",{"_index":281,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/schemas/user.schema.ts:13",{"_index":279,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/schemas/user.schema.ts:16",{"_index":280,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/schemas/user.schema.ts:7",{"_index":282,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/user/user.module.ts",{"_index":797,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":799,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:12",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:15",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:37",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:41",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:49",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:57",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:69",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":955,"title":{},"body":{"index.html":{}}}],["started",{"_index":72,"title":{"index.html":{},"license.html":{}},"body":{"injectables/AppService.html":{},"index.html":{}}}],["state",{"_index":1306,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1233,"title":{},"body":{"license.html":{}}}],["statement",{"_index":1301,"title":{},"body":{"license.html":{}}}],["statements",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":1272,"title":{},"body":{"license.html":{}}}],["status",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["stoppage",{"_index":1367,"title":{},"body":{"license.html":{}}}],["strategy",{"_index":394,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["strict",{"_index":248,"title":{},"body":{"classes/BlogPost.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"controllers/PostController.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["string})@apiresponse({status",{"_index":501,"title":{},"body":{"controllers/PostController.html":{}}}],["strongp@ssw0rd",{"_index":433,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["strongp@ssw0rd!'})@isstring()@isnotempty",{"_index":424,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["strongp@ssw0rd!'})@isstring()@isnotempty()@length(8",{"_index":778,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["sub",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["subject",{"_index":1215,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1229,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1303,"title":{},"body":{"license.html":{}}}],["submit",{"_index":1087,"title":{},"body":{"index.html":{},"license.html":{}}}],["submitted",{"_index":1187,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":1211,"title":{},"body":{"license.html":{}}}],["success",{"_index":602,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["successexample",{"_index":560,"title":{},"body":{"controllers/PostController.html":{}}}],["successful",{"_index":571,"title":{},"body":{"controllers/PostController.html":{}}}],["successful.'})@apiresponse({status",{"_index":463,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["such",{"_index":1007,"title":{},"body":{"index.html":{},"license.html":{}}}],["suggestions",{"_index":1081,"title":{},"body":{"index.html":{}}}],["summary",{"_index":553,"title":{},"body":{"controllers/PostController.html":{}}}],["super",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(message",{"_index":296,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["supersede",{"_index":1311,"title":{},"body":{"license.html":{}}}],["support",{"_index":1021,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["svg",{"_index":1423,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"controllers/PostController.html":{}}}],["swc/helpers",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["syntax",{"_index":1406,"title":{},"body":{"license.html":{}}}],["system",{"_index":959,"title":{},"body":{"index.html":{}}}],["systems",{"_index":1198,"title":{},"body":{"license.html":{}}}],["table",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":886,"title":{},"body":{"coverage.html":{}}}],["tasks",{"_index":1051,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":1259,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":387,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":1099,"title":{},"body":{"license.html":{}}}],["tests",{"_index":1042,"title":{},"body":{"index.html":{}}}],["text",{"_index":1282,"title":{},"body":{"license.html":{}}}],["theory",{"_index":1352,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":1183,"title":{},"body":{"license.html":{}}}],["third",{"_index":1289,"title":{},"body":{"license.html":{}}}],["this.appservice.getdevinstructions",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(loginuserdto",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.blogpostmodel",{"_index":682,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.countdocuments",{"_index":708,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.deleteone",{"_index":725,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.find().select",{"_index":688,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findbyid(id",{"_index":720,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findbyid(postid",{"_index":749,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findone",{"_index":676,"title":{},"body":{"injectables/PostService.html":{}}}],["this.comparepassword(loginuserdto.password",{"_index":855,"title":{},"body":{"injectables/UserService.html":{}}}],["this.disk.checkstorage(\"storage",{"_index":382,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.findbyusernameoremail(loginuserdto.email",{"_index":852,"title":{},"body":{"injectables/UserService.html":{}}}],["this.health.check",{"_index":371,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"uptime",{"_index":372,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.sign(payload",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.memory.checkheap(\"memory_heap",{"_index":381,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory_rss",{"_index":378,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.mongodb.pingcheck(\"mongodb",{"_index":375,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.postservice.addcomment(postid",{"_index":626,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createblogpost(createpostdto",{"_index":577,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createrelation(createrelationshipdto.sourcepostid",{"_index":611,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.deletecomment(postid",{"_index":630,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.deletepost(id",{"_index":601,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getallposts",{"_index":592,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getcomments(postid",{"_index":617,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getpostbyid(id",{"_index":598,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getpostbyslug(slug",{"_index":591,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getpostsbypagination(page",{"_index":590,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getrelatedposts(getrelatedpostsdto.id",{"_index":607,"title":{},"body":{"controllers/PostController.html":{}}}],["this.usermodel",{"_index":836,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":850,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":831,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findbyusername(payload.username",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.register(registeruserdto",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateusername(req.user._id",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.validateuser(loginuserdto",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["those",{"_index":1239,"title":{},"body":{"license.html":{}}}],["threshold",{"_index":384,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":1107,"title":{},"body":{"license.html":{}}}],["throw",{"_index":581,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["timeout",{"_index":376,"title":{},"body":{"controllers/HealthController.html":{}}}],["timestamps",{"_index":238,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["title",{"_index":207,"title":{},"body":{"classes/BlogPost.html":{},"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":1353,"title":{},"body":{"license.html":{}}}],["toy",{"_index":928,"title":{},"body":{"index.html":{}}}],["tracking",{"_index":1199,"title":{},"body":{"license.html":{}}}],["trade",{"_index":1318,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":1276,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1316,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1237,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":1154,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":668,"title":{},"body":{"injectables/PostService.html":{},"dependencies.html":{}}}],["translation",{"_index":1155,"title":{},"body":{"license.html":{}}}],["true",{"_index":215,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["try",{"_index":574,"title":{},"body":{"controllers/PostController.html":{}}}],["two",{"_index":473,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["type",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1437,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":266,"title":{},"body":{"classes/BlogPostComment.html":{},"license.html":{}}}],["types.objectid",{"_index":259,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["types/post.types",{"_index":543,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["typescript",{"_index":842,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":857,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":211,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"controllers/PostController.html":{}}}],["undefined})@apiparam({name",{"_index":489,"title":{},"body":{"controllers/PostController.html":{}}}],["undefined})@apiresponse({status",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["under",{"_index":1091,"title":{},"body":{"index.html":{},"license.html":{}}}],["union",{"_index":1115,"title":{},"body":{"license.html":{}}}],["unique",{"_index":240,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"classes/RegisterUserDto.html":{}}}],["unless",{"_index":1304,"title":{},"body":{"license.html":{}}}],["unused",{"_index":844,"title":{},"body":{"injectables/UserService.html":{}}}],["up",{"_index":988,"title":{},"body":{"index.html":{}}}],["update",{"_index":859,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedby",{"_index":208,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{}}}],["updatedpost",{"_index":744,"title":{},"body":{"injectables/PostService.html":{}}}],["updateduser",{"_index":860,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser.toobject",{"_index":862,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":122,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateusername",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["updateusername(@body",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusername(updateuserdto",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusername(userid",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":1022,"title":{},"body":{"index.html":{}}}],["uploads",{"_index":1024,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":773,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["uptime",{"_index":374,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["url",{"_index":557,"title":{},"body":{"controllers/PostController.html":{}}}],["usage",{"_index":991,"title":{},"body":{"index.html":{}}}],["use",{"_index":605,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":983,"title":{},"body":{"index.html":{}}}],["useful",{"_index":1005,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["useguards(jwtauthguard",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@put('users/name",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"controllers/PostController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["user's",{"_index":767,"title":{},"body":{"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["user._id",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":415,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":427,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":423,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:24",{"_index":784,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:27",{"_index":425,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:32",{"_index":419,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.dto.ts:40",{"_index":771,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.name",{"_index":858,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":856,"title":{},"body":{"injectables/UserService.html":{}}}],["user.save",{"_index":861,"title":{},"body":{"injectables/UserService.html":{}}}],["user.schema",{"_index":237,"title":{},"body":{"classes/BlogPost.html":{}}}],["user.service",{"_index":798,"title":{},"body":{"modules/UserModule.html":{}}}],["user.username",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userid",{"_index":650,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["usermodel",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":47,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPostUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["users",{"_index":1069,"title":{},"body":{"index.html":{}}}],["userschema",{"_index":283,"title":{},"body":{"classes/BlogPostUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":136,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutpassword",{"_index":847,"title":{},"body":{"injectables/UserService.html":{}}}],["using",{"_index":732,"title":{},"body":{"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["utils/post.utils",{"_index":671,"title":{},"body":{"injectables/PostService.html":{}}}],["v10.8.3",{"_index":948,"title":{},"body":{"index.html":{}}}],["v22.9.0",{"_index":945,"title":{},"body":{"index.html":{}}}],["valid",{"_index":586,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["valid'})@apiresponse({status",{"_index":480,"title":{},"body":{"controllers/PostController.html":{}}}],["validate",{"_index":399,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":401,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["validateuser(loginuserdto",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["validation",{"_index":304,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["validationoptions",{"_index":923,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":324,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":561,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":967,"title":{},"body":{"index.html":{}}}],["variable",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":977,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":845,"title":{},"body":{"injectables/UserService.html":{}}}],["verbal",{"_index":1191,"title":{},"body":{"license.html":{}}}],["version",{"_index":1093,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["videos",{"_index":1026,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":1335,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1329,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["well",{"_index":933,"title":{},"body":{"index.html":{}}}],["wherever",{"_index":1288,"title":{},"body":{"license.html":{}}}],["whether",{"_index":1129,"title":{},"body":{"license.html":{}}}],["whole",{"_index":1175,"title":{},"body":{"license.html":{}}}],["within",{"_index":1213,"title":{},"body":{"license.html":{}}}],["without",{"_index":310,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"license.html":{}}}],["work",{"_index":1159,"title":{},"body":{"license.html":{}}}],["works",{"_index":1168,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":1219,"title":{},"body":{"license.html":{}}}],["write",{"_index":1040,"title":{},"body":{"index.html":{}}}],["writing",{"_index":1208,"title":{},"body":{"license.html":{}}}],["written",{"_index":1192,"title":{},"body":{"license.html":{}}}],["yes",{"_index":524,"title":{},"body":{"controllers/PostController.html":{},"miscellaneous/functions.html":{}}}],["z",{"_index":780,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["z0",{"_index":694,"title":{},"body":{"injectables/PostService.html":{}}}],["za",{"_index":693,"title":{},"body":{"injectables/PostService.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getDevInstructions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDevInstructions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDevInstructions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\n\nimport { AppService } from \"./app.service\";\nimport { ApiTags } from \"@nestjs/swagger\";\n\n@ApiTags(\"Information Desk\")\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getDevInstructions(): string {\n    return this.appService.getDevInstructions();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ConfigModule } from \"@nestjs/config\";\n\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { PostModule } from \"./post/post.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { UserModule } from \"./user/user.module\";\n\n@Module({\n  imports: [AuthModule, ConfigModule.forRoot(), MongooseModule.forRoot(process.env.MONGODB_URI), UserModule, PostModule, HealthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDevInstructions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDevInstructions\n                        \n                    \n                \n            \n            \n                \ngetDevInstructions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AppService {\n  getDevInstructions(): string {\n    return `Welcome to Parchment CMS API.To get started, please refer to the Swagger Documentation here.`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'User successfully logged in.', schema: undefined})@ApiResponse({status: 400, description: 'Bad Request.'})@ApiResponse({status: 401, description: 'Invalid credentials.'})@ApiResponse({status: 404, description: 'Invalid credentials.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'User successfully registered.', type: BlogPostUser})@ApiResponse({status: 400, description: 'Bad Request.'})@ApiResponse({status: 409, description: 'User with this username or email already exists.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserName(updateUserDto: UpdateUserDto, req: ExpressRequestWithBlogPostUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('users/name')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithBlogPostUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards, Request, Put } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { BlogPostUser } from \"@/schemas/user.schema\";\nimport { UserService } from \"@/user/user.service\";\nimport { AuthService } from \"./auth.service\";\nimport { LoginUserDto } from \"./dto/login-user.dto\";\nimport { RegisterUserDto } from \"./dto/register-user.dto\";\nimport { JwtAuthGuard } from \"./jwt-auth.guard\";\nimport { ExpressRequestWithBlogPostUser } from \"@/post/interfaces/post.interface\";\nimport { UpdateUserDto } from \"./dto/update-user.dto\";\n\n@ApiBearerAuth()\n@ApiTags(\"Let Me In!!!\")\n@Controller(\"/api/v1/\")\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n\n  @Post(\"register\")\n  @ApiResponse({\n    status: 201,\n    description: \"User successfully registered.\",\n    type: BlogPostUser,\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Bad Request.\",\n  })\n  @ApiResponse({\n    status: 409,\n    description: \"User with this username or email already exists.\",\n  })\n  async register(@Body() registerUserDto: RegisterUserDto): Promise> {\n    return this.userService.register(registerUserDto);\n  }\n\n  @Post(\"login\")\n  @ApiResponse({\n    status: 201,\n    description: \"User successfully logged in.\",\n    schema: {\n      example: { accessToken: \"jwt.token.here\" },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Bad Request.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Invalid credentials.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Invalid credentials.\",\n  })\n  async login(@Body() loginUserDto: LoginUserDto): Promise {\n    return this.authService.login(loginUserDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Put(\"users/name\")\n  async updateUserName(@Body() updateUserDto: UpdateUserDto, @Request() req: ExpressRequestWithBlogPostUser): Promise> {\n    return this.userService.updateUserName(req.user._id, updateUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { UserModule } from \"@/user/user.module\";\nimport { AuthService } from \"./auth.service\";\nimport { AuthController } from \"./auth.controller\";\n\n@Module({\n  imports: [\n    UserModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: \"1h\" },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\n\nimport { UserService } from \"../user/user.service\";\nimport { LoginUserDto } from \"./dto/login-user.dto\";\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  public async login(loginUserDto: LoginUserDto): Promise {\n    const user = await this.userService.validateUser(loginUserDto);\n    const payload = { username: user.username, sub: user._id };\n    const accessToken = this.jwtService.sign(payload);\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPost.html":{"url":"classes/BlogPost.html","title":"class - BlogPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/post.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                date\n                            \n                            \n                                    \n                                imagePath\n                            \n                            \n                                    \n                                relatedPosts\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BlogPostComment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPostUserDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'ObjectId', ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imagePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relatedPosts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPostDocument[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPostUserDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'ObjectId', ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\nimport slugify from \"slugify\";\n\nimport { BlogPostComment, BlogPostCommentSchema } from \"./comment.schema\";\nimport { BlogPostUser, BlogPostUserDocument } from \"./user.schema\";\n\n@Schema({ timestamps: true })\nexport class BlogPost {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: true })\n  imagePath: string;\n\n  @Prop({ required: true })\n  content: string;\n\n  @Prop({ required: true, default: () => new Date() })\n  date: Date;\n\n  @Prop({ unique: true, index: true })\n  slug: string;\n\n  @Prop({ type: [{ type: \"ObjectId\", ref: \"BlogPost\" }] })\n  relatedPosts: BlogPostDocument[];\n\n  @Prop({ type: [BlogPostCommentSchema], default: [] })\n  comments: BlogPostComment[];\n\n  @Prop({ type: \"ObjectId\", ref: BlogPostUser.name, required: true })\n  createdBy: BlogPostUserDocument;\n\n  @Prop({ type: \"ObjectId\", ref: BlogPostUser.name })\n  updatedBy: BlogPostUserDocument;\n}\n\nexport type BlogPostDocument = HydratedDocument;\n\nexport const BlogPostSchema = SchemaFactory.createForClass(BlogPost);\n\nfunction generateSlug(blogPostTitle: string): string {\n  return slugify(blogPostTitle, { lower: true, strict: true });\n}\n\nBlogPostSchema.pre(\"save\", function (next) {\n  const blogPost = this as BlogPostDocument;\n\n  if (!blogPost.slug) {\n    blogPost.slug = generateSlug(blogPost.title);\n  }\n\n  if (blogPost.isNew) {\n    blogPost.updatedBy = blogPost.createdBy;\n  }\n\n  next();\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPostComment.html":{"url":"classes/BlogPostComment.html","title":"class - BlogPostComment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPostComment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/comment.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                date\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument, Types } from \"mongoose\";\n\n@Schema({ timestamps: true })\nexport class BlogPostComment {\n  @Prop({ type: Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  author: string;\n\n  @Prop({ required: true })\n  content: string;\n\n  @Prop({ default: () => new Date() })\n  date: Date;\n}\n\nexport type BlogPostCommentDocument = HydratedDocument;\nexport const BlogPostCommentSchema = SchemaFactory.createForClass(BlogPostComment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BlogPostSanitizedResponse.html":{"url":"interfaces/BlogPostSanitizedResponse.html","title":"interface - BlogPostSanitizedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BlogPostSanitizedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/interfaces/post.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                        \n                                            updatedBy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from \"express\";\nimport { BlogPostUserDocument } from \"@/schemas/user.schema\";\nimport { BlogPost } from \"@/schemas/post.schema\";\n\nexport interface ExpressRequestWithBlogPostUser extends Request {\n  user: BlogPostUserDocument;\n}\n\nexport interface BlogPostSanitizedResponse extends Omit {\n  createdBy: string;\n  updatedBy: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPostUser.html":{"url":"classes/BlogPostUser.html","title":"class - BlogPostUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPostUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\n\n@Schema()\nexport class BlogPostUser {\n  @Prop({ required: true, unique: true })\n  username: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @Prop({ required: true })\n  name: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(BlogPostUser);\n\nexport type BlogPostUserDocument = HydratedDocument;\nexport const BlogPostUserSchema = SchemaFactory.createForClass(BlogPostUser);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentDoesNotExist.html":{"url":"classes/CommentDoesNotExist.html","title":"class - CommentDoesNotExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentDoesNotExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for comments not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentInsufficientPermissionsError.html":{"url":"classes/CommentInsufficientPermissionsError.html","title":"class - CommentInsufficientPermissionsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentInsufficientPermissionsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post insufficient permissions.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-comment.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-comment.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from \"class-validator\";\n\nexport class CreateCommentDto {\n  @IsString()\n  @IsNotEmpty()\n  author: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                imagePath\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        imagePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  content: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRelationshipDto.html":{"url":"classes/CreateRelationshipDto.html","title":"class - CreateRelationshipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRelationshipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-relationship.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                relationPostId\n                            \n                            \n                                    \n                                    \n                                    \n                                sourcePostId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        relationPostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-relationship.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sourcePostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-relationship.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateRelationshipDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  sourcePostId: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  relationPostId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExpressRequestWithBlogPostUser.html":{"url":"interfaces/ExpressRequestWithBlogPostUser.html","title":"interface - ExpressRequestWithBlogPostUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExpressRequestWithBlogPostUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/interfaces/post.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         BlogPostUserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BlogPostUserDocument\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from \"express\";\nimport { BlogPostUserDocument } from \"@/schemas/user.schema\";\nimport { BlogPost } from \"@/schemas/post.schema\";\n\nexport interface ExpressRequestWithBlogPostUser extends Request {\n  user: BlogPostUserDocument;\n}\n\nexport interface BlogPostSanitizedResponse extends Omit {\n  createdBy: string;\n  updatedBy: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetRelatedPostsDto.html":{"url":"classes/GetRelatedPostsDto.html","title":"class - GetRelatedPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetRelatedPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/get-related-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the blog post', example: '60f6c2d3a8341c8f0a5865c4'})@IsMongoId({message: 'Invalid MongoDB ID format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/get-related-posts.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsMongoId } from \"class-validator\";\n\nexport class GetRelatedPostsDto {\n  @ApiProperty({\n    description: \"The unique identifier of the blog post\",\n    example: \"60f6c2d3a8341c8f0a5865c4\",\n  })\n  @IsMongoId({ message: \"Invalid MongoDB ID format\" })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  MongooseHealthIndicator,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n  HealthIndicatorResult,\n  HealthCheckResult,\n} from \"@nestjs/terminus\";\n\n@ApiTags(\"hEaLtH\")\n@Controller(\"health\")\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private mongoDb: MongooseHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    return this.health.check([\n      (): Promise => this.http.pingCheck(\"uptime\", \"https://betterstack.com/better-uptime\"),\n      (): Promise => this.mongoDb.pingCheck(\"mongodb\", { timeout: 5000 }),\n      (): Promise => this.memory.checkRSS(\"memory_rss\", 300 * 1024 * 1024),\n      (): Promise => this.memory.checkHeap(\"memory_heap\", 300 * 1024 * 1024),\n      (): Promise =>\n        this.disk.checkStorage(\"storage\", {\n          path: \"/\",\n          threshold: 128 * 1024 * 1024 * 1024,\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HttpModule } from \"@nestjs/axios\";\n\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"JWT Strategy\")\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"JWT Strategy\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"JWT Strategy\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BlogPostUser } from \"@/schemas/user.schema\";\nimport { UserService } from \"@/user/user.service\";\nimport { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"JWT Strategy\") {\n  constructor(private readonly userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n  async validate(payload: { sub: string; username: string }): Promise {\n    const user = await this.userService.findByUsername(payload.username);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                _hasUsernameOrEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        _hasUsernameOrEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @hasUsernameOrEmail({message: 'Either username or email must be provided.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email for the user account. Provide either username or email.', example: 'john_doe@example.com'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for the user account', example: 'StrongP@ssw0rd!'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for the user account. Provide either username or email.', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\nimport { hasUsernameOrEmail } from \"../decorators/hasUsernameOrEmail.decorator\";\nexport class LoginUserDto {\n  @ApiProperty({\n    description: \"Username for the user account. Provide either username or email.\",\n    example: \"john_doe\",\n  })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiProperty({\n    description: \"Email for the user account. Provide either username or email.\",\n    example: \"john_doe@example.com\",\n  })\n  @IsString()\n  @IsOptional()\n  email?: string;\n\n  @ApiProperty({\n    description: \"Password for the user account\",\n    example: \"StrongP@ssw0rd!\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @hasUsernameOrEmail({\n    message: \"Either username or email must be provided.\",\n  })\n  _hasUsernameOrEmail?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostCircularRelationship.html":{"url":"classes/PostCircularRelationship.html","title":"class - PostCircularRelationship","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostCircularRelationship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for circular post relationships.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                addComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createRelation\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getComments\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getPostById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getRelatedPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    addComment(postId: string, createCommentDto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/comments')@ApiOperation({summary: 'Add comment to post', description: 'Add a comment to a blog post'})@ApiBody({type: CreateCommentDto, description: 'The input data to create a new comment', required: true, schema: undefined, examples: undefined})@ApiResponse({status: 201, description: 'Indicates the comment was successfully added.'})@ApiResponse({status: 404, description: 'Indicates the post was not found.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:448\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto, req: ExpressRequestWithBlogPostUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@ApiOperation({summary: 'Create post', description: 'Get a post'})@ApiBody({type: CreatePostDto, description: 'The input data to create a new blog post', required: true, schema: undefined, examples: undefined})@ApiResponse({status: 201, description: 'Indicates, the request was successful.'})@ApiResponse({status: 401, description: 'Indicates that the user is not authorized.'})@ApiResponse({status: 409, description: 'Indicates, the post already exists.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithBlogPostUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRelation(createRelationshipDto: CreateRelationshipDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/relation/')@ApiOperation({summary: 'Set Post Relationship', parameters: undefined, description: 'Set Relationship between two posts'})@ApiResponse({status: 201, description: 'Indicates, the request was successful.'})@ApiResponse({status: 400, description: 'Indicates, the request failed.'})@ApiResponse({status: 401, description: 'Indicates that the user is not authorized.'})@ApiResponse({status: 404, description: 'Indicates, the post doesn't exist.'})@ApiResponse({status: 409, description: 'Indicates, the relationship already exists.'})@ApiResponse({status: 422, description: 'Indicates, the query parameters are not valid'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:329\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRelationshipDto\n                                            \n                                                            CreateRelationshipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(postId: string, commentId: string, req: ExpressRequestWithBlogPostUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:postId/comments/:commentId')@ApiOperation({summary: 'Delete a comment from a post', description: 'Remove a specific comment from a blog post by its ID'})@ApiParam({name: 'postId', description: 'ID of the blog post', required: true, schema: undefined})@ApiParam({name: 'commentId', description: 'ID of the comment to be deleted', required: true, schema: undefined})@ApiResponse({status: 200, description: 'Successfully deleted comment'})@ApiResponse({status: 400, description: 'Invalid post or comment id'})@ApiResponse({status: 401, description: 'Indicates that the user is not authorized.'})@ApiResponse({status: 404, description: 'Post or comment not found'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:501\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithBlogPostUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string, req: ExpressRequestWithBlogPostUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({summary: 'Delete post', description: 'Delete a post based on the id', operationId: 'deletePost'})@ApiParam({name: 'id', description: 'ID of post to delete', required: true, type: String})@ApiResponse({status: 200, description: 'Indicates, the request was successful.'})@ApiResponse({status: 401, description: 'Indicates that the user is not authorized.'})@ApiResponse({status: 404, description: 'Indicates, the post doesn't exist.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:224\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithBlogPostUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/comments')@ApiOperation({summary: 'Get comments for a post', description: 'Retrieve all comments associated with a specific blog post by its ID'})@ApiParam({name: 'id', description: 'Id of the blog post', required: true, schema: undefined})@ApiResponse({status: 200, description: 'Successfully retrieved comments'})@ApiResponse({status: 400, description: 'Invalid post ID'})@ApiResponse({status: 404, description: 'Post not found'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:376\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({summary: 'Get post', description: 'Get a post based on the id', operationId: 'getPost'})@ApiParam({name: 'id', description: 'The id of the post', required: true, type: String})@ApiResponse({status: 200, description: 'Indicates, the request was successful.'})@ApiResponse({status: 404, description: 'Indicates, the post doesn't exist.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:186\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(page?: number, limit?: number, slug?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')@ApiOperation({summary: 'Get all posts', description: 'Get all posts'})@ApiQuery({name: 'page', type: Number, required: false})@ApiQuery({name: 'limit', type: Number, required: false})@ApiQuery({name: 'slug', type: String, required: false})@ApiResponse({status: 200, description: 'Indicates, the request was successful.'})@ApiResponse({status: 404, description: 'Indicates, that there are no posts.'})@ApiResponse({status: 422, description: 'Indicates, the query parameters are not valid'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getRelatedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRelatedPosts(getRelatedPostsDto: GetRelatedPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/relations')@ApiOperation({summary: 'Post Relationships', parameters: undefined, description: 'Get Relationships of a post'})@ApiResponse({status: 200, description: 'Indicates, the request was successful.'})@ApiResponse({status: 400, description: 'Indicates, the provided post id was invalid'})@ApiResponse({status: 404, description: 'Indicates, the post doesn't exist.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:268\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getRelatedPostsDto\n                                            \n                                                            GetRelatedPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, HttpException, HttpStatus, UseGuards, Request } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiParam, ApiQuery, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { PostService } from \"./post.service\";\nimport { CreatePostDto } from \"./dto/create-post.dto\";\nimport { BlogPost } from \"@/schemas/post.schema\";\nimport {\n  PostCircularRelationship,\n  PostDoesNotExist,\n  PostDoesNotHaveComments,\n  PostIdValidationError,\n  PostInsufficientPermissionsError,\n  PostRelationConflict,\n  PostSlugValidationError,\n} from \"./post.errors\";\nimport { CreateRelationshipDto } from \"./dto/create-relationship.dto\";\nimport { CreatedBlogPost } from \"./types/post.types\";\nimport { CreateCommentDto } from \"./dto/create-comment.dto\";\nimport { BlogPostComment } from \"@/schemas/comment.schema\";\nimport { JwtAuthGuard } from \"@/auth/jwt-auth.guard\";\nimport { BlogPostSanitizedResponse, ExpressRequestWithBlogPostUser } from \"./interfaces/post.interface\";\nimport { GetRelatedPostsDto } from \"./dto/get-related-posts.dto\";\n\n@ApiBearerAuth()\n@ApiTags(\"Post Management\")\n@Controller(\"/api/v1/posts\")\nexport class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @Post(\"\")\n  @ApiOperation({\n    summary: \"Create post\",\n    description: \"Get a post\",\n  })\n  @ApiBody({\n    type: CreatePostDto,\n    description: \"The input data to create a new blog post\",\n    required: true,\n    schema: {\n      type: \"object\",\n      properties: {\n        title: {\n          description: \"Title of the blog post\",\n          type: \"string\",\n          default: \"How to configure Swagger 101\",\n        },\n        content: {\n          description: \"Content of the blog post\",\n          type: \"string\",\n          default: \"How to configure Swagger 101\",\n        },\n        imagePath: {\n          description: \"Url of the image of the blog post\",\n          type: \"string\",\n          default: \"https://static1.smartbear.co/swagger/media/assets/images/swagger_logo.svg\",\n        },\n      },\n      required: [\"status\"],\n    },\n    examples: {\n      successExample: {\n        value: {\n          title: \"My new blog post\",\n          content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n          imagePath: \"https://static1.smartbear.co/swagger/media/assets/images/swagger_logo.svg\",\n        },\n        description: \"Example blog post data\",\n      },\n      failExample: {\n        value: {\n          title: \"My new blog post\",\n          content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n          imagePath: \"\",\n        },\n        description: \"Example blog post data\",\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Indicates that the user is not authorized.\",\n  })\n  @ApiResponse({\n    status: 409,\n    description: \"Indicates, the post already exists.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  @UseGuards(JwtAuthGuard)\n  async create(@Body() createPostDto: CreatePostDto, @Request() req: ExpressRequestWithBlogPostUser): Promise {\n    try {\n      const blogPostUser = req.user;\n      const result = await this.postService.createBlogPost(createPostDto, blogPostUser._id);\n      return result;\n    } catch (error) {\n      if (error instanceof PostRelationConflict) {\n        throw new HttpException(error.message, HttpStatus.CONFLICT);\n      } else if (error instanceof PostDoesNotExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Get(\"\")\n  @ApiOperation({\n    summary: \"Get all posts\",\n    description: \"Get all posts\",\n  })\n  @ApiQuery({\n    name: \"page\",\n    type: Number,\n    required: false,\n  })\n  @ApiQuery({\n    name: \"limit\",\n    type: Number,\n    required: false,\n  })\n  @ApiQuery({\n    name: \"slug\",\n    type: String,\n    required: false,\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, that there are no posts.\",\n  })\n  @ApiResponse({\n    status: 422,\n    description: \"Indicates, the query parameters are not valid\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async getPosts(@Query(\"page\") page?: number, @Query(\"limit\") limit?: number, @Query(\"slug\") slug?: string): Promise {\n    try {\n      if (page !== undefined && limit !== undefined) {\n        const posts = await this.postService.getPostsByPagination(page, limit);\n        return posts;\n      }\n      if (slug !== undefined) {\n        const post = await this.postService.getPostBySlug(slug);\n        return post;\n      }\n      const posts = await this.postService.getAllPosts();\n      return posts;\n    } catch (error) {\n      if (error instanceof PostRelationConflict) {\n        throw new HttpException(error.message, HttpStatus.CONFLICT);\n      } else if (error instanceof PostDoesNotExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostSlugValidationError) {\n        throw new HttpException(error.message, HttpStatus.UNPROCESSABLE_ENTITY);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    summary: \"Get post\",\n    description: \"Get a post based on the id\",\n    operationId: \"getPost\",\n  })\n  @ApiParam({\n    name: \"id\",\n    description: \"The id of the post\",\n    required: true,\n    type: String,\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, the post doesn't exist.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async getPostById(@Param(\"id\") id: string): Promise {\n    try {\n      const post = await this.postService.getPostById(id);\n      return post;\n    } catch (error) {\n      if (error instanceof PostDoesNotExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    summary: \"Delete post\",\n    description: \"Delete a post based on the id\",\n    operationId: \"deletePost\",\n  })\n  @ApiParam({\n    name: \"id\",\n    description: \"ID of post to delete\",\n    required: true,\n    type: String,\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Indicates that the user is not authorized.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, the post doesn't exist.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  @UseGuards(JwtAuthGuard)\n  async deletePost(@Param(\"id\") id: string, @Request() req: ExpressRequestWithBlogPostUser): Promise {\n    try {\n      const blogPostUser = req.user;\n      await this.postService.deletePost(id, blogPostUser._id);\n      return { result: \"success\" };\n    } catch (error) {\n      if (error instanceof PostDoesNotExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostInsufficientPermissionsError) {\n        throw new HttpException(error.message, HttpStatus.UNAUTHORIZED);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Get(\"/:id/relations\")\n  @ApiOperation({\n    summary: \"Post Relationships\",\n    parameters: [\n      {\n        in: \"query\",\n        name: \"sourcePostId\",\n        required: true,\n        description: \"sourcePostId to use\",\n      },\n    ],\n    description: \"Get Relationships of a post\",\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Indicates, the provided post id was invalid\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, the post doesn't exist.\",\n  })\n  @ApiResponse({\n    status: 500,\n    description: \"Indicates, the request failed.\",\n  })\n  async getRelatedPosts(@Param() getRelatedPostsDto: GetRelatedPostsDto): Promise {\n    try {\n      const post = await this.postService.getRelatedPosts(getRelatedPostsDto.id);\n      return { relatedPosts: post.relatedPosts };\n    } catch (error) {\n      if (error instanceof PostDoesNotExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Post(\"/relation/\")\n  @ApiOperation({\n    summary: \"Set Post Relationship\",\n    parameters: [\n      {\n        in: \"query\",\n        name: \"sourcePostId\",\n        required: true,\n        description: \"sourcePostId to use\",\n      },\n      {\n        in: \"query\",\n        name: \"relationPostId\",\n        required: true,\n\n        description: \"relationPostId to use\",\n      },\n    ],\n    description: \"Set Relationship between two posts\",\n  })\n  @ApiResponse({\n    status: 201,\n    description: \"Indicates, the request was successful.\",\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Indicates, the request failed.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Indicates that the user is not authorized.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates, the post doesn't exist.\",\n  })\n  @ApiResponse({\n    status: 409,\n    description: \"Indicates, the relationship already exists.\",\n  })\n  @ApiResponse({\n    status: 422,\n    description: \"Indicates, the query parameters are not valid\",\n  })\n  @ApiResponse({\n    status: 500,\n    description: \"Indicates, the request failed.\",\n  })\n  @UseGuards(JwtAuthGuard)\n  async createRelation(@Query() createRelationshipDto: CreateRelationshipDto): Promise {\n    try {\n      const post = await this.postService.createRelation(createRelationshipDto.sourcePostId, createRelationshipDto.relationPostId);\n      return { success: true, data: post };\n    } catch (error) {\n      if (error instanceof PostRelationConflict) {\n        throw new HttpException(error.message, HttpStatus.CONFLICT);\n      } else if (error instanceof PostDoesNotExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostCircularRelationship) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      } else if (error instanceof PostIdValidationError) {\n        throw new HttpException(error.message, HttpStatus.UNPROCESSABLE_ENTITY);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Get(\"/:id/comments\")\n  @ApiOperation({\n    summary: \"Get comments for a post\",\n    description: \"Retrieve all comments associated with a specific blog post by its ID\",\n  })\n  @ApiParam({\n    name: \"id\",\n    description: \"Id of the blog post\",\n    required: true,\n    schema: {\n      type: \"string\",\n    },\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Successfully retrieved comments\",\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Invalid post ID\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Post not found\",\n  })\n  @ApiResponse({\n    status: 500,\n    description: \"Indicates, the request failed.\",\n  })\n  async getComments(@Param(\"id\") postId: string): Promise {\n    try {\n      const result = await this.postService.getComments(postId);\n      return result;\n    } catch (error) {\n      if (error instanceof PostDoesNotExist || PostDoesNotHaveComments) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostIdValidationError) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Post(\"/:id/comments\")\n  @ApiOperation({\n    summary: \"Add comment to post\",\n    description: \"Add a comment to a blog post\",\n  })\n  @ApiBody({\n    type: CreateCommentDto,\n    description: \"The input data to create a new comment\",\n    required: true,\n    schema: {\n      type: \"object\",\n      properties: {\n        author: {\n          description: \"Author of the comment\",\n          type: \"string\",\n          default: \"John Doe\",\n        },\n        content: {\n          description: \"Content of the comment\",\n          type: \"string\",\n          default: \"Great post!\",\n        },\n      },\n      required: [\"author\", \"content\"],\n    },\n    examples: {\n      successExample: {\n        value: {\n          author: \"John Doe\",\n          content: \"Great post!\",\n        },\n        description: \"Example comment data\",\n      },\n      failExample: {\n        value: {\n          author: \"\",\n          content: \"Great post!\",\n        },\n        description: \"Example comment data with missing author\",\n      },\n      failExample2: {\n        value: {\n          author: \"John Doe\",\n          content: \"\",\n        },\n        description: \"Example comment data with missing content\",\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: \"Indicates the comment was successfully added.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Indicates the post was not found.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async addComment(@Param(\"id\") postId: string, @Body() createCommentDto: CreateCommentDto): Promise {\n    try {\n      const result = await this.postService.addComment(postId, createCommentDto);\n      return result;\n    } catch (error) {\n      if (error instanceof PostDoesNotExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostIdValidationError) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Delete(\"/:postId/comments/:commentId\")\n  @ApiOperation({\n    summary: \"Delete a comment from a post\",\n    description: \"Remove a specific comment from a blog post by its ID\",\n  })\n  @ApiParam({\n    name: \"postId\",\n    description: \"ID of the blog post\",\n    required: true,\n    schema: {\n      type: \"string\",\n    },\n  })\n  @ApiParam({\n    name: \"commentId\",\n    description: \"ID of the comment to be deleted\",\n    required: true,\n    schema: {\n      type: \"string\",\n    },\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Successfully deleted comment\",\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Invalid post or comment id\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Indicates that the user is not authorized.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Post or comment not found\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  @UseGuards(JwtAuthGuard)\n  async deleteComment(\n    @Param(\"postId\") postId: string,\n    @Param(\"commentId\") commentId: string,\n    @Request() req: ExpressRequestWithBlogPostUser,\n  ): Promise {\n    try {\n      const blogPostUser = req.user;\n      const result = await this.postService.deleteComment(postId, commentId, blogPostUser._id);\n      return result;\n    } catch (error) {\n      if (error instanceof PostDoesNotExist) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      } else if (error instanceof PostIdValidationError) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      }\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDoesNotExist.html":{"url":"classes/PostDoesNotExist.html","title":"class - PostDoesNotExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDoesNotExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDoesNotHaveComments.html":{"url":"classes/PostDoesNotHaveComments.html","title":"class - PostDoesNotHaveComments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDoesNotHaveComments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for posts without comments.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostError.html":{"url":"classes/PostError.html","title":"class - PostError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom error class for post-related errors.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.errors.ts:5\n                            \n                        \n\n                \n                    \n                            Creates an instance of PostError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostIdValidationError.html":{"url":"classes/PostIdValidationError.html","title":"class - PostIdValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostIdValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post ID validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostInsufficientPermissionsError.html":{"url":"classes/PostInsufficientPermissionsError.html","title":"class - PostInsufficientPermissionsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostInsufficientPermissionsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post insufficient permissions.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPostService\n\nPostService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\nimport { PostService } from \"./post.service\";\nimport { PostController } from \"./post.controller\";\nimport { BlogPost, BlogPostSchema } from \"../schemas/post.schema\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: BlogPost.name, schema: BlogPostSchema }])],\n  controllers: [PostController],\n  providers: [PostService],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostRelationConflict.html":{"url":"classes/PostRelationConflict.html","title":"class - PostRelationConflict","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostRelationConflict\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post relation conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createBlogPost\n                            \n                            \n                                    Async\n                                createRelation\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getComments\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostBySlug\n                            \n                            \n                                    Async\n                                getPostsByPagination\n                            \n                            \n                                    Async\n                                getRelatedPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blogPostModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        blogPostModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    addComment(postId: string, createCommentDto: CreateCommentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:200\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createBlogPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBlogPost(createPostDto: CreatePostDto, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRelation(sourcePostId: string, relationPostId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sourcePostId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relationPostId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(postId: string, commentId: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComments(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostBySlug\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostBySlug(slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostsByPagination\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostsByPagination(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRelatedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRelatedPosts(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\nimport { plainToClass } from \"class-transformer\";\n\nimport { CreatePostDto } from \"./dto/create-post.dto\";\nimport { BlogPost, BlogPostDocument } from \"@/schemas/post.schema\";\nimport { BlogPostComment } from \"@/schemas/comment.schema\";\nimport {\n  PostRelationConflict,\n  PostDoesNotExist,\n  PostError,\n  PostCircularRelationship,\n  PostSlugValidationError,\n  PostIdValidationError,\n  CommentDoesNotExist,\n  PostDoesNotHaveComments,\n  PostInsufficientPermissionsError,\n  CommentInsufficientPermissionsError,\n} from \"./post.errors\";\nimport { CreatedBlogPost } from \"./types/post.types\";\nimport { CreateCommentDto } from \"./dto/create-comment.dto\";\nimport { BlogPostSanitizedResponse } from \"./interfaces/post.interface\";\nimport { sanitizeBlogPost, sanitizeBlogPosts } from \"./utils/post.utils\";\n\n@Injectable()\nexport class PostService {\n  constructor(@InjectModel(BlogPost.name) private blogPostModel: Model) {}\n\n  async createBlogPost(@Body() createPostDto: CreatePostDto, userId: mongoose.Types.ObjectId): Promise {\n    const post = plainToClass(BlogPost, createPostDto);\n    const existingPost = await this.blogPostModel.findOne({\n      title: post.title,\n    });\n    if (existingPost) {\n      throw new PostRelationConflict(`Post with title \\\"${post.title}\\\" already exists.`);\n    }\n\n    const objectIdUserId = new mongoose.Types.ObjectId(userId);\n\n    const newPost = new this.blogPostModel({\n      ...post,\n      createdBy: objectIdUserId,\n    });\n\n    const savedPost = await newPost.save();\n\n    return {\n      result: \"success\",\n      title: savedPost.title,\n      content: savedPost.content,\n      imagePath: savedPost.imagePath,\n    };\n  }\n\n  async getAllPosts(): Promise {\n    const posts = await this.blogPostModel.find().select(\"-__v\").exec();\n    if (posts.length  post.toObject()));\n  }\n\n  async getPostBySlug(slug: string): Promise {\n    const isSlugValid = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/.test(slug);\n    if (isSlugValid === true) {\n      const post = await this.blogPostModel\n        .findOne({ slug: { $eq: slug } })\n        .populate({ path: \"createdBy\", select: \"username -_id\" })\n        .populate({ path: \"updatedBy\", select: \"username -_id\" })\n        .select(\"-__v -_id\")\n        .exec();\n      if (!post) {\n        throw new PostDoesNotExist(`Post with slug \\\"${slug}\\\" doesn't exist.`);\n      }\n      return sanitizeBlogPost(post.toObject());\n    } else {\n      throw new PostSlugValidationError(\"Provided slug is not valid\");\n    }\n  }\n\n  async getPostsByPagination(page: number, limit: number): Promise {\n    const skip = page * limit;\n    const postCount = await this.blogPostModel.countDocuments();\n    if (postCount === 0) {\n      throw new PostDoesNotExist(\"Posts are empty!\");\n    }\n\n    const posts = await this.blogPostModel\n      .find()\n      .skip(skip)\n      .limit(limit)\n      .sort(\"-createdAt\")\n      .populate({ path: \"createdBy\", select: \"username -_id\" })\n      .populate({ path: \"updatedBy\", select: \"username -_id\" })\n      .select(\"-__v\")\n      .exec();\n    return sanitizeBlogPosts(posts.map(post => post.toObject()));\n  }\n\n  async getPostById(id: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new PostIdValidationError(\"Provided id is not valid\");\n    }\n    const post = await this.blogPostModel.findById(id, \"-__v -_id\").exec();\n\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \"${id}\" doesn't exist.`);\n    }\n\n    await post.populate({ path: \"createdBy\", select: \"username -_id\" });\n    await post.populate({ path: \"updatedBy\", select: \"username -_id\" });\n\n    return sanitizeBlogPost(post.toObject());\n  }\n\n  async deletePost(id: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new PostIdValidationError(\"Provided id is not valid\");\n    }\n    const post = await this.blogPostModel.findOne({ _id: id }).select(\"-__v -_id\");\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    }\n\n    if (!post.createdBy._id.equals(userId)) {\n      throw new PostInsufficientPermissionsError(`You are not authorized to delete this post.`);\n    }\n\n    const result = await this.blogPostModel.deleteOne({ _id: id }).exec();\n    if (result.deletedCount === 0) {\n      throw new PostError(`Didn't delete post with \\\"${id}\\\" .`);\n    }\n    return result.deletedCount;\n  }\n\n  async getRelatedPosts(id: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new PostIdValidationError(\"Provided id is not valid\");\n    }\n    const post = await this.blogPostModel.findOne({ _id: id }).select(\"-__v -_id\");\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    }\n    return { relatedPosts: post.relatedPosts };\n  }\n\n  async createRelation(sourcePostId: string, relationPostId: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(sourcePostId)) {\n      throw new PostIdValidationError(\"Provided sourcePostId is not valid\");\n    }\n    if (!mongoose.Types.ObjectId.isValid(relationPostId)) {\n      throw new PostIdValidationError(\"Provided relationPostId is not valid\");\n    }\n    if (sourcePostId === relationPostId) {\n      throw new PostCircularRelationship(\"Can't make a relation using only one post\");\n    }\n\n    const sourcePost: BlogPostDocument = await this.blogPostModel.findOne({\n      _id: sourcePostId,\n    });\n    if (!sourcePost) {\n      throw new PostDoesNotExist(\"Post doesn't exist cant create a relationship with other Post\");\n    }\n\n    const relationPost: BlogPostDocument = await this.blogPostModel.findOne({\n      _id: relationPostId,\n    });\n    if (!relationPost) {\n      throw new PostDoesNotExist(\"Relationship Post doesn't exist cant create a relationship with Post.\");\n    }\n    const relationExists = sourcePost.relatedPosts.some(relatedPost => relatedPost._id.equals(relationPost._id));\n\n    if (relationExists) {\n      throw new PostRelationConflict(\"Relationship between posts already exists!\");\n    }\n    sourcePost.relatedPosts.push(relationPost);\n    const updatedPost = await sourcePost.save();\n    await sourcePost.populate({ path: \"createdBy\", select: \"username -_id\" });\n    await sourcePost.populate({ path: \"updatedBy\", select: \"username -_id\" });\n    return sanitizeBlogPost(updatedPost.toObject());\n  }\n\n  async getComments(postId: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.blogPostModel.findById(postId, \"comments\");\n\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \"${postId}\" doesn't exist.`);\n    }\n    if (!post.comments || post.comments.length === 0) {\n      throw new PostDoesNotHaveComments(`Post comments are empty!`);\n    }\n    return post.comments;\n  }\n\n  async addComment(postId: string, createCommentDto: CreateCommentDto): Promise {\n    if (!mongoose.Types.ObjectId.isValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.blogPostModel.findById(postId);\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${postId}\\\" doesn't exist.`);\n    }\n\n    const comment = {\n      _id: new mongoose.Types.ObjectId(),\n      author: createCommentDto.author,\n      content: createCommentDto.content,\n      date: new Date(),\n    };\n\n    post.comments.push(comment);\n    await post.save();\n\n    await post.populate({ path: \"createdBy\", select: \"username -_id\" });\n    await post.populate({ path: \"updatedBy\", select: \"username -_id\" });\n\n    return sanitizeBlogPost(post.toObject());\n  }\n\n  async deleteComment(postId: string, commentId: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!mongoose.Types.ObjectId.isValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.blogPostModel.findById(postId);\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${postId}\\\" doesn't exist.`);\n    }\n\n    const commentIndex = post.comments.findIndex(comment => comment._id.toString() === commentId);\n    if (commentIndex === -1) {\n      throw new CommentDoesNotExist(`Comment with id \\\"${commentId}\\\" doesn't exist.`);\n    }\n    if (post.createdBy._id.equals(userId)) {\n      throw new CommentInsufficientPermissionsError(\"You are not authorized to delete comments on this post.\");\n    }\n\n    post.comments.splice(commentIndex, 1);\n    await post.save();\n\n    return { success: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostSlugValidationError.html":{"url":"classes/PostSlugValidationError.html","title":"class - PostSlugValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostSlugValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post slug validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the user', example: 'john_doe@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's real or display name', example: 'John Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for the user account, must contain at least one uppercase letter, one lowercase letter, one number, and one special character', example: 'StrongP@ssw0rd!'})@IsString()@IsNotEmpty()@Length(8, 64)@Matches(/(?=.*[a-z])/, {message: 'Password must contain at least one lowercase letter'})@Matches(/(?=.*[A-Z])/, {message: 'Password must contain at least one uppercase letter'})@Matches(/(?=.*[0-9])/, {message: 'Password must contain at least one number'})@Matches(/(?=.*[!@#$%^&*])/, {message: 'Password must contain at least one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique username for the user', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsString, Length, Matches } from \"class-validator\";\n\nexport class RegisterUserDto {\n  @ApiProperty({\n    description: \"Unique username for the user\",\n    example: \"john_doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: \"Password for the user account, must contain at least one uppercase letter, one lowercase letter, one number, and one special character\",\n    example: \"StrongP@ssw0rd!\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(8, 64)\n  @Matches(/(?=.*[a-z])/, { message: \"Password must contain at least one lowercase letter\" })\n  @Matches(/(?=.*[A-Z])/, { message: \"Password must contain at least one uppercase letter\" })\n  @Matches(/(?=.*[0-9])/, { message: \"Password must contain at least one number\" })\n  @Matches(/(?=.*[!@#$%^&*])/, { message: \"Password must contain at least one special character\" })\n  password: string;\n\n  @ApiProperty({\n    description: \"Email address of the user\",\n    example: \"john_doe@example.com\",\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: \"The user's real or display name\",\n    example: \"John Doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new name of the user', example: 'John Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"The new name of the user\",\n    example: \"John Doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\nimport { BlogPostUserSchema, BlogPostUser } from \"../schemas/user.schema\";\nimport { UserService } from \"./user.service\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: BlogPostUser.name, schema: BlogPostUserSchema }])],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findByUsernameOrEmail\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserName\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(password: string, hashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsernameOrEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsernameOrEmail(identifier: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                identifier\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserName(userId: mongoose.Types.ObjectId, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, ConflictException, UnauthorizedException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\nimport * as bcrypt from \"bcrypt\";\n\nimport { BlogPostUser, BlogPostUserDocument } from \"../schemas/user.schema\";\nimport { RegisterUserDto } from \"@/auth/dto/register-user.dto\";\nimport { UpdateUserDto } from \"../auth/dto/update-user.dto\";\nimport { LoginUserDto } from \"@/auth/dto/login-user.dto\";\n\n@Injectable()\nexport class UserService {\n  constructor(@InjectModel(BlogPostUser.name) private userModel: Model) {}\n\n  public async register(registerUserDto: RegisterUserDto): Promise> {\n    const { username, password, email, name } = registerUserDto;\n    const existingUser = await this.userModel.findOne({ $or: [{ username }, { email }] }).exec();\n    if (existingUser) {\n      throw new ConflictException(\"User with this username or email already exists.\");\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const newUser = new this.userModel({\n      username,\n      password: hashedPassword,\n      email,\n      name,\n    });\n    const savedUser = await newUser.save();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: _, ...userWithoutPassword } = savedUser.toObject();\n    return userWithoutPassword;\n  }\n\n  public async comparePassword(password: string, hashedPassword: string): Promise {\n    return await bcrypt.compare(password, hashedPassword);\n  }\n\n  async findByUsername(username: string): Promise {\n    return await this.userModel.findOne({ username }).exec();\n  }\n\n  async findByUsernameOrEmail(identifier: string): Promise {\n    return await this.userModel.findOne({ $or: [{ username: identifier }, { email: identifier }] }).exec();\n  }\n\n  async findById(userId: string): Promise {\n    const user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n    return user;\n  }\n\n  async validateUser(loginUserDto: LoginUserDto): Promise {\n    const user = await this.findByUsernameOrEmail(loginUserDto.email ?? loginUserDto.username);\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n    const passwordMatches = await this.comparePassword(loginUserDto.password, user.password);\n    if (!passwordMatches) {\n      throw new UnauthorizedException(\"Invalid password\");\n    }\n    return user;\n  }\n\n  public async updateUserName(userId: mongoose.Types.ObjectId, updateUserDto: UpdateUserDto): Promise> {\n    const { name } = updateUserDto;\n\n    const user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n\n    user.name = name; // Update the user's name\n    const updatedUser = await user.save();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: _, ...userWithoutPassword } = updatedUser.toObject();\n    return userWithoutPassword;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/decorators/hasUsernameOrEmail.decorator.ts\n            \n            function\n            hasUsernameOrEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/post/dto/create-comment.dto.stub.ts\n            \n            variable\n            CreatePostDtoStub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/post/dto/create-post.dto.stub.ts\n            \n            variable\n            CreatePostDtoStub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/post/dto/create-relationship.dto.ts\n            \n            class\n            CreateRelationshipDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dto/get-related-posts.dto.ts\n            \n            class\n            GetRelatedPostsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/interfaces/post.interface.ts\n            \n            interface\n            BlogPostSanitizedResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/interfaces/post.interface.ts\n            \n            interface\n            ExpressRequestWithBlogPostUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            CommentDoesNotExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            CommentInsufficientPermissionsError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostCircularRelationship\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostDoesNotExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostDoesNotHaveComments\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostIdValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostInsufficientPermissionsError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostRelationConflict\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostSlugValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/post/types/post.types.ts\n            \n            type alias\n            CreatedBlogPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/post/utils/post.utils.ts\n            \n            function\n            sanitizeBlogPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/post/utils/post.utils.ts\n            \n            function\n            sanitizeBlogPosts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/comment.schema.ts\n            \n            class\n            BlogPostComment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/schemas/comment.schema.ts\n            \n            variable\n            BlogPostCommentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/comment.schema.ts\n            \n            type alias\n            BlogPostCommentDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/post.schema.ts\n            \n            class\n            BlogPost\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            function\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            variable\n            BlogPostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            type alias\n            BlogPostDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            class\n            BlogPostUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            variable\n            BlogPostUserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            type alias\n            BlogPostUserDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^3.1.1\n        \n            @nestjs/common : ^10.4.6\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.4.6\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mongoose : ^10.1.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.4.6\n        \n            @nestjs/swagger : ^8.0.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @swc/helpers : ^0.5.13\n        \n            @typescript-eslint/eslint-plugin : ^8.12.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            mongoose : ^8.7.3\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            slugify : ^1.6.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateSlug   (src/.../post.schema.ts)\n                        \n                        \n                            hasUsernameOrEmail   (src/.../hasUsernameOrEmail.decorator.ts)\n                        \n                        \n                            sanitizeBlogPost   (src/.../post.utils.ts)\n                        \n                        \n                            sanitizeBlogPosts   (src/.../post.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    src/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(blogPostTitle: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                blogPostTitle\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/auth/decorators/hasUsernameOrEmail.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hasUsernameOrEmail\n                        \n                    \n                \n            \n            \n                \nhasUsernameOrEmail(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/post/utils/post.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sanitizeBlogPost\n                        \n                    \n                \n            \n            \n                \nsanitizeBlogPost(post: BlogPost)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                post\n                                            \n                                                            BlogPost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BlogPostSanitizedResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sanitizeBlogPosts\n                        \n                    \n                \n            \n            \n                \nsanitizeBlogPosts(posts)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                posts\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BlogPostSanitizedResponse[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📝 Headless CMS\nThis is a toy project for a headless CMS that allows you to create, delete, and partially manage posts for your blog, as well as create relations between posts. The headless CMS is built using NestJS and MongoDB.\n🚀 Getting Started\nTo get started with this project, you can choose to either run the project natively on your machine, or with Docker.\n🏠 Running natively\nTo run the project natively, you will need to have Node.js v22.9.0 or higher and npm v10.8.3 or higher installed on your machine.\n\n🍴 Clone this repository to your local machine.\n💻 Run npm install to install the necessary dependencies.\n🚀 Start a MongoDB instance on your machine by following the instructions provided by MongoDB for your specific operating system. You can download the MongoDB Community Server from here.\n📝 Rename .env.example to .env and replace the values with your own MongoDB connection details and desired api port.\n🚀 Run npm start to start the server.\n\n🐳 Running with Docker\nTo run the project with Docker, you will need to have Docker installed on your machine.\n\n🍴 Clone this repository to your local machine.\n📝 Copy the .env.example file and rename it to .env. Open the .env file and specify the desired values for MONGODB_URI and PORT variables.\nFor example:Example :# The MongoDB connection string for the BlogPost database\nMONGODB_URI=\"mongodb://mongodb/test\"\n# The port on which the Blog CMS API will run\nPORT=\"3000\"\n# The seed string to be used for the JwtStrategy\nJWT_SECRET=\"42\"\n🐳 Run docker compose build to build the containers.\n🐳 Run docker compose up to start the containers.\n🌍 The API will be available at http://localhost:3000/.\n\n📖 Usage\nOnce the server is running, you can use the following endpoints to manage your blog posts:\n\nGET /api/v1/posts: Returns a list of all posts.\nPOST /api/v1/posts: Creates a new post.\nGET /api/v1/posts?page&limit: Get Posts with pagination based on created date.\nGET /api/v1/posts?slug=:slug: Returns a specific post by slug.\nGET /api/v1/posts/:id: Returns a specific post by post ID.\nDELETE /api/v1/posts/:id: Deletes a post by post ID.\nGET /api/v1/posts/:id/relations: Returns relationship posts by post ID\nPOST /api/v1/posts/relation/?sourcePostId&relationPostId: Sets a relationship between two posts.\nGET /heath: Returns useful system information, such as server uptime and memory usage. This endpoint can be used to monitor the health of the application.\n\nNote: The current pagination implementation is based on the page and limit query parameters and orders the results based on created date in ascending order.\n🚀 Future Improvements\nHere are some potential improvements that could be made to this project:\n\n Add support for updating post content\n Add support for media uploads (images, videos, etc.).\n Add support for more auth providers (Auth0,OAuth2 etc)\n Create a frontend interface for post management.\n Implement a more robust pagination solution that allows for custom sorting and filtering.\n Add support for different languages and locales.\n Write jest tests\n Add a process manager\n Add Github Actions to publish image to Docker Hub, Github Registry etc.\n\n✅ Completed Tasks\nHere are the tasks that have already been completed in this project:\n\n✅ Further optimize the Docker images to reduce size, making the deployment process faster and more efficient.\n✅ Rewrite the project in TypeScript for better type safety.\n✅ Refactor the project using the NestJs framework for better code organization and modularity.\n✅ Add support for comments in each post: Users and non-users can add comments to posts and engage in discussions.\n✅ Implement authentication to secure the API.\n✅ Add support for user: Users can create accounts, log in, and manage their profile.\n✅ Have multiple users create their own posts: Each user can create their own posts and manage them.\n\n🤝 Contributing\nContributions to this project are welcome! If you have any suggestions, bug reports, or feature requests, please open an issue or submit a pull request.\n📝 License\nThis project is licensed under the Apache License, Version 2.0. See the LICENSE file for details.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright 2024 Nikolaos Grigoropoulos\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : A basic headless CMS to create your own blog with the help of mongodb and nestjs(express).\n        \n            Keywords : \n        \n            License : Apache-2.0\n        \n            Author : Nikolaos Grigoropoulos\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogPostCommentDocument   (src/.../comment.schema.ts)\n                        \n                        \n                            BlogPostDocument   (src/.../post.schema.ts)\n                        \n                        \n                            BlogPostUserDocument   (src/.../user.schema.ts)\n                        \n                        \n                            CreatedBlogPost   (src/.../post.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/comment.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostCommentDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/schemas/post.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostUserDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/post/types/post.types.ts\n    \n    \n        \n            \n                \n                    \n                    CreatedBlogPost\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogPostCommentSchema   (src/.../comment.schema.ts)\n                        \n                        \n                            BlogPostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            BlogPostUserSchema   (src/.../user.schema.ts)\n                        \n                        \n                            CreatePostDtoStub   (src/.../create-comment.dto.stub.ts)\n                        \n                        \n                            CreatePostDtoStub   (src/.../create-post.dto.stub.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/comment.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostCommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostComment)\n                    \n                \n\n\n        \n    \n\n    src/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPost)\n                    \n                \n\n\n        \n    \n\n    src/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostUserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostUser)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostUser)\n                    \n                \n\n\n        \n    \n\n    src/post/dto/create-comment.dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CreatePostDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CreateCommentDto => ({\n  author: \"John Doe\",\n  content: \"Great Post!\",\n})\n                    \n                \n\n\n        \n    \n\n    src/post/dto/create-post.dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CreatePostDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CreatePostDto => ({\n  title: \"My new blog post\",\n  content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  imagePath: \"/images/my-new-post.jpg\",\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

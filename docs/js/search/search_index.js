var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,2.047,1,2.567]],["body/controllers/AppController.html",[0,3.87,1,4.314,2,2.639,3,0.322,4,0.291,5,0.23,6,4.352,7,0.599,8,4.743,9,3.97,10,6.193,11,4.743,12,6.193,13,2.312,14,0.805,15,2.864,16,5.984,17,1.991,18,0.019,19,1.215,20,5.067,21,4.743,22,4.743,23,4.853,24,3.44,25,4.743,26,2.312,27,0.791,28,5.319,29,4.743,30,4.743,31,2.864,32,0.842,33,1.798,34,3.881,35,2.216,36,3.979,37,4.352,38,5.067,39,5.067,40,0.322,41,0.173,42,3.881,43,2.814,44,1.798,45,5.067,46,0.015,47,0.015]],["title/modules/AppModule.html",[48,1.244,49,2.567]],["body/modules/AppModule.html",[1,4.575,2,3.146,3,0.309,4,0.279,5,0.221,18,0.019,32,0.937,33,1.726,36,4.283,37,4.178,40,0.309,41,0.166,46,0.015,47,0.015,48,2.217,49,5.305,50,2.249,51,2.015,52,2.894,53,2.894,54,2.533,55,3.648,56,2.894,57,4.178,58,4.178,59,4.178,60,4.615,61,4.615,62,4.615,63,4.283,64,3.593,65,2.384,66,2.702,67,4.864,68,3.146,69,4.864,70,3.726,71,3.726,72,2.384,73,4.864,74,4.864,75,4.864,76,4.864,77,4.178,78,4.864,79,4.864]],["title/injectables/AppService.html",[36,2.193,80,1.074]],["body/injectables/AppService.html",[3,0.241,4,0.218,5,0.173,7,0.609,9,4.318,14,0.604,16,3.266,18,0.019,19,1.5,22,5.275,23,4.064,24,3.241,25,4.469,26,2.615,27,0.828,28,3.266,30,4.469,31,2.698,32,0.648,33,1.349,36,3.887,40,0.241,41,0.176,42,2.912,43,2.112,44,2.219,46,0.013,47,0.013,70,2.912,80,1.5,81,1.758,82,3.266,83,3.473,84,3.942,85,4.008,86,6.165,87,3.585,88,5.147,89,5.59,90,5.835,91,5.835,92,1.575,93,3.802,94,7.005,95,3.802,96,1.429,97,1.575,98,1.575,99,0.958,100,0.604,101,1.419,102,3.942,103,4.691,104,3.802,105,3.802,106,5.147,107,4.421,108,5.011,109,3.942,110,6.253,111,3.802,112,3.802,113,3.585,114,3.942,115,4.551,116,3.241,117,3.802,118,3.942,119,3.3,120,2.859,121,3.3,122,6.534,123,2.681,124,5.785,125,1.736,126,1.163,127,2.112,128,2.112,129,5.147,130,3.802,131,2.522,132,1.663,133,1.575,134,3.802,135,1.921,136,3.802,137,6.253,138,3.802,139,1.758,140,3.802,141,2.262,142,1.98,143,2.912,144,3.802,145,2.112,146,3.802,147,4.421,148,3.942,149,3.802,150,3.266,151,2.112,152,3.802,153,3.266,154,2.648,155,3.802,156,3.802,157,3.802]],["title/controllers/AuthController.html",[0,2.047,158,2.567]],["body/controllers/AuthController.html",[0,2.821,2,1.534,3,0.187,4,0.169,5,0.134,7,0.86,8,2.256,13,2.085,14,0.468,15,1.989,17,1.996,18,0.019,19,1.218,26,2.451,29,3.294,32,0.857,33,1.045,34,2.256,35,1.288,40,0.187,41,0.147,43,1.636,44,1.802,46,0.011,47,0.011,83,2.389,87,2.995,92,1.22,96,0.818,97,0.901,98,2.104,99,1.562,100,0.944,101,1.896,120,2.389,126,1.898,128,3.445,145,3.646,158,3.89,159,2.53,160,2.53,161,2.946,162,2.358,163,3.256,164,2.108,165,3.89,166,4.106,167,3.488,168,3.022,169,4.363,170,2.53,171,3.906,172,2.946,173,5.585,174,3.89,175,4.301,176,1.881,177,2.946,178,5.585,179,5.585,180,4.301,181,4.301,182,4.137,183,2.946,184,4.301,185,3.89,186,2.946,187,3.694,188,3.256,189,4.278,190,2.65,191,2.57,192,2.082,193,3.58,194,3.307,195,3.69,196,2.53,197,4.209,198,2.946,199,4.797,200,2.946,201,4.301,202,2.461,203,3.022,204,3.256,205,3.89,206,2.946,207,3.694,208,1.885,209,3.694,210,3.23,211,2.946,212,4.293,213,5.585,214,3.534,215,2.946,216,2.946,217,3.694,218,3.906,219,2.757,220,1.989,221,1.752,222,0.609,223,2.946,224,2.946,225,4.301,226,6.566,227,3.534,228,2.53,229,2.53,230,3.89,231,2.946,232,2.946,233,2.052,234,2.946,235,2.946,236,1.989,237,1.636,238,3.094,239,2.256,240,2.946,241,2.946,242,2.53,243,1.444,244,2.256,245,1.881,246,4.301,247,2.53,248,2.052,249,3.256,250,2.946,251,4.106,252,2.946,253,2.946,254,2.052,255,2.53,256,2.946,257,1.288,258,2.53,259,2.946,260,2.946,261,2.946,262,2.946,263,2.256,264,2.256,265,2.946,266,2.946,267,2.946,268,2.946]],["title/modules/AuthModule.html",[48,1.244,60,2.363]],["body/modules/AuthModule.html",[2,3.18,3,0.314,4,0.284,5,0.225,18,0.019,32,0.91,33,1.757,40,0.314,41,0.169,46,0.015,47,0.015,48,2.235,50,2.29,51,2.051,52,2.946,53,2.946,54,2.579,55,3.677,56,3.939,60,4.838,63,4.302,64,3.633,65,2.427,66,2.75,68,3.18,77,4.253,158,4.612,227,4.509,228,4.253,269,4.253,270,4.951,271,4.253,272,4.253,273,4.302,274,4.951,275,4.951,276,3.792,277,4.951,278,4.951,279,4.951,280,4.951,281,4.253,282,4.951,283,4.951,284,4.951]],["title/injectables/AuthService.html",[80,1.074,227,2.193]],["body/injectables/AuthService.html",[3,0.259,4,0.234,5,0.185,7,0.714,8,4.127,14,0.647,15,2.492,18,0.019,19,1.293,26,2.011,29,4.923,32,0.809,33,1.445,40,0.259,41,0.184,44,1.445,46,0.013,47,0.013,80,1.57,81,1.883,83,3.815,92,2.232,96,1.496,97,1.649,98,2.232,99,1.357,100,0.856,101,2.011,119,3.454,126,1.848,128,2.261,135,2.254,145,3.57,162,2.286,163,3.454,164,2.641,166,4.615,167,3.145,170,4.628,171,4.168,182,2.836,187,4.628,188,4.404,189,5.261,190,2.011,191,2.232,192,1.967,193,4.286,194,3.092,195,3.206,202,2.502,210,2.806,227,3.977,229,3.497,230,3.118,238,3.705,239,3.118,243,2.641,244,4.127,245,2.356,249,2.61,254,2.836,258,4.628,276,3.118,285,3.497,286,4.628,287,4.626,288,3.497,289,7.199,290,4.071,291,4.628,292,5.388,293,4.628,294,4.071,295,4.127,296,3.454,297,3.206,298,4.071,299,2.261,300,4.071,301,3.497,302,4.071,303,3.497,304,4.071,305,4.071]],["title/classes/BlogPost.html",[41,0.126,306,1.527]],["body/classes/BlogPost.html",[3,0.18,4,0.163,5,0.129,7,0.336,14,0.791,17,2.608,18,0.019,19,1.641,26,1.061,27,0.819,32,0.737,40,0.316,41,0.097,44,1.008,46,0.01,47,0.01,72,1.392,100,1.144,101,1.563,109,3.208,123,2.591,126,0.869,131,2.69,132,2.401,135,1.563,139,3.33,162,1.764,164,2.053,176,2.901,208,1.414,220,2.539,222,1.535,236,1.314,243,2.053,295,3.208,297,1.69,306,2.749,307,0.716,308,1.821,309,2.492,310,2.655,311,2.181,312,2.492,313,1.937,314,3.266,315,3.208,316,2.539,317,1.524,318,3.12,319,2.354,320,3.401,321,3.208,322,2.364,323,2.959,324,3.514,325,2.763,326,4.272,327,2.477,328,3.266,329,3.251,330,4.715,331,5.027,332,2.841,333,4.715,334,2.685,335,2.181,336,4.205,337,2.841,338,2.685,339,3.048,340,5.241,341,5.853,342,3.185,343,2.841,344,2.401,345,5.49,346,4.077,347,2.841,348,3.208,349,2.841,350,1.832,351,2.492,352,3.824,353,2.841,354,1.853,355,4.188,356,3.597,357,4.188,358,3.597,359,2.841,360,2.841,361,4.272,362,4.272,363,4.188,364,2.841,365,2.841,366,2.326,367,5.168,368,2.176,369,2.917,370,2.859,371,3.597,372,2.917,373,2.841,374,2.841,375,2.44,376,3.597,377,2.326,378,1.979,379,1.979,380,1.821,381,1.979,382,1.821,383,1.117,384,1.821,385,1.578,386,1.979,387,2.44,388,2.44,389,2.176,390,2.44,391,2.917,392,2.44,393,2.841,394,2.841,395,2.841,396,2.841,397,1.979,398,2.44,399,1.821,400,1.314,401,2.176,402,2.841,403,2.841,404,3.597,405,4.188,406,2.841,407,2.841,408,2.841,409,2.841]],["title/classes/BlogPostComment.html",[41,0.126,329,2.047]],["body/classes/BlogPostComment.html",[3,0.251,4,0.227,5,0.18,7,0.468,14,0.629,17,2.498,18,0.019,19,1.525,27,0.806,32,0.666,40,0.378,41,0.135,46,0.013,47,0.013,72,1.941,99,1.333,100,1.167,109,4.052,123,2.755,131,1.941,132,2.313,135,1.478,139,3.218,164,2.593,176,2.98,208,1.337,222,1.093,297,3.147,307,0.998,309,3.147,310,1.877,312,3.147,313,2.446,314,3.782,315,4.052,316,3.152,317,1.765,319,2.469,324,3.848,329,3.785,330,3.401,331,3.401,335,3.901,336,4.052,342,3.116,344,2.313,348,4.052,367,5.074,368,3.033,369,3.684,370,3.102,372,2.758,375,3.401,377,2.938,378,2.758,379,2.758,380,2.539,381,2.758,382,2.539,383,1.556,384,2.539,385,2.199,399,3.391,400,2.446,410,2.758,411,4.461,412,5.116,413,6.357,414,3.684,415,3.96,416,3.684,417,3.96,418,4.052,419,3.96,420,3.96,421,3.96,422,3.401,423,3.033,424,3.401]],["title/interfaces/BlogPostSanitizedResponse.html",[425,1.376,426,2.047]],["body/interfaces/BlogPostSanitizedResponse.html",[3,0.262,4,0.237,5,0.188,7,0.489,13,2.271,14,0.657,18,0.019,27,0.89,32,0.766,40,0.386,46,0.013,47,0.013,100,1.158,162,2.293,176,1.807,192,1.264,202,2.678,210,2.152,214,3.237,218,3.846,219,2.649,220,2.516,222,1.506,237,2.295,306,2.52,309,3.619,310,2.586,317,1.511,318,2.516,319,1.931,320,3.022,323,3.997,325,2.295,328,3.997,339,3.367,344,2.938,350,1.807,351,2.458,366,3.022,425,2.575,426,3.379,427,2.152,428,2.878,429,3.488,430,3.619,431,3.488,432,4.167,433,2.448,434,4.167,435,3.488,436,2.649,437,2.878,438,3.165,439,3.165,440,2.649,441,2.152,442,2.458,443,3.237,444,3.022,445,2.458,446,2.878,447,2.878,448,2.295,449,2.878]],["title/classes/BlogPostUser.html",[41,0.126,236,1.704]],["body/classes/BlogPostUser.html",[3,0.26,4,0.235,5,0.186,7,0.484,14,0.651,17,2.531,18,0.019,19,1.545,27,0.842,32,0.681,40,0.409,41,0.14,46,0.013,47,0.013,48,1.382,68,2.132,72,2.006,99,1.767,100,1.115,123,3.709,132,2.648,135,2.018,139,3.414,162,2.407,164,2.65,168,2.435,176,3.114,202,2.907,203,4.174,222,1.118,236,3.244,296,4.498,307,1.031,309,3.217,310,1.919,311,2.816,312,3.217,313,2.501,314,3.832,315,4.142,316,2.979,317,1.788,336,4.933,339,2.132,342,3.157,367,5.13,368,3.135,369,3.766,370,3.355,377,2.273,378,2.851,379,2.851,380,2.624,381,2.851,382,2.624,383,1.609,384,2.624,385,2.273,450,2.851,451,4.093,452,4.644,453,4.093,454,4.093,455,4.644,456,4.093,457,3.135,458,4.644,459,2.851]],["title/classes/CommentDoesNotExist.html",[41,0.126,460,1.448]],["body/classes/CommentDoesNotExist.html",[3,0.272,4,0.246,5,0.195,7,0.506,18,0.019,27,0.659,40,0.466,41,0.265,46,0.014,47,0.014,96,1.189,97,1.311,125,1.546,126,1.311,133,1.774,222,1.466,307,1.079,322,2.311,327,1.599,354,1.446,433,2.71,460,2.189,461,1.873,462,2.637,463,2.311,464,3.007,465,1.981,466,1.981,467,1.873,468,1.981,469,1.683,470,1.683,471,1.981,472,1.873,473,1.683,474,1.79,475,2.436,476,1.683,477,1.311,478,1.683,479,1.683,480,2.576,481,2.436,482,1.683,483,1.683]],["title/classes/CommentInsufficientPermissionsError.html",[41,0.126,483,1.448]],["body/classes/CommentInsufficientPermissionsError.html",[3,0.272,4,0.245,5,0.195,7,0.506,18,0.019,27,0.658,40,0.466,41,0.264,46,0.014,47,0.014,96,1.187,97,1.309,125,1.545,126,1.309,133,1.772,222,1.486,307,1.077,322,2.077,327,1.597,354,1.444,433,2.709,460,1.681,461,1.87,462,2.637,463,2.077,464,3.006,465,1.978,466,1.978,467,1.87,468,1.978,469,1.681,470,1.681,471,1.978,472,1.87,473,1.681,474,1.788,475,2.434,476,1.681,477,1.309,478,1.681,479,1.681,480,2.861,481,2.705,482,1.681,483,2.187]],["title/interfaces/CompoDocConfig.html",[425,1.376,484,2.363]],["body/interfaces/CompoDocConfig.html",[3,0.159,4,0.143,5,0.265,14,0.235,18,0.019,27,0.765,31,0.685,32,0.535,40,0.094,41,0.051,43,0.822,44,1.901,46,0.006,47,0.006,51,0.613,65,1.587,85,0.949,92,0.613,99,0.373,100,1.089,101,2.724,115,1.739,116,4.148,120,2.111,121,0.949,125,0.411,127,1.387,131,1.863,135,2.178,139,1.497,141,1.485,142,1.98,151,0.822,167,2.68,174,1.031,194,2.129,208,1.433,220,0.685,221,0.881,245,2.551,251,0.949,299,3.163,311,0.771,317,0.899,319,1.506,324,1.3,338,1.6,344,0.647,350,1.092,366,1.387,383,1.272,397,2.255,399,0.949,414,2.255,425,1.208,427,0.771,430,3.72,441,0.771,445,0.881,448,1.387,462,1.965,463,0.553,484,2.075,485,0.725,486,0.822,487,1.031,488,2.912,489,2.912,490,2.912,491,2.912,492,2.912,493,2.912,494,2.912,495,2.912,496,2.912,497,2.912,498,2.912,499,2.912,500,2.912,501,2.912,502,2.912,503,2.912,504,2.912,505,2.912,506,2.912,507,2.912,508,2.912,509,2.912,510,3.251,511,1.485,512,1.912,513,1.134,514,2.48,515,1.912,516,0.822,517,1.912,518,1.031,519,1.3,520,3.662,521,1.031,522,1.3,523,2.075,524,1.031,525,1.3,526,0.881,527,1.031,528,1.031,529,2.721,530,1.912,531,1.031,532,3.74,533,0.881,534,1.134,535,1.134,536,3.251,537,1.912,538,1.912,539,1.134,540,4.103,541,2.075,542,3.651,543,1.6,544,1.912,545,1.134,546,1.031,547,1.134,548,4.906,549,0.881,550,0.881,551,2.255,552,0.881,553,0.949,554,1.134,555,1.134,556,0.949,557,1.031,558,1.134,559,1.134,560,1.134,561,1.134,562,1.739,563,2.48,564,1.134,565,1.912,566,2.48,567,1.134,568,1.134,569,1.031,570,2.957,571,1.912,572,0.949,573,3.819,574,4.957,575,2.255,576,2.48,577,2.48,578,1.134,579,4.461,580,1.739,581,1.134,582,1.134,583,1.134,584,1.134,585,1.134,586,1.031,587,1.031,588,2.957,589,2.48,590,2.48,591,1.926,592,3.752,593,3.526,594,3.752,595,4.064,596,3.526,597,2.912,598,4.355,599,2.912,600,4.41,601,2.648,602,3.412,603,3.412,604,3.526,605,2.912,606,3.857,607,3.752,608,4.41,609,3.251,610,1.134,611,1.739,612,1.134,613,3.251,614,1.134,615,2.48,616,1.031,617,4.103,618,1.134,619,1.912,620,2.48,621,1.134,622,2.48,623,1.912,624,1.134,625,2.912,626,2.48,627,1.134,628,3.24,629,1.6,630,1.912,631,1.134,632,1.134,633,1.134,634,1.134,635,1.134,636,3.412,637,1.134,638,1.031,639,1.98,640,1.134,641,2.48,642,1.134,643,2.255,644,1.134,645,3.14,646,1.134,647,2.48,648,1.134,649,2.721,650,2.48,651,2.255,652,1.031,653,1.134,654,1.134,655,2.255,656,1.134,657,1.134,658,1.912,659,1.912,660,2.48,661,1.031,662,1.912,663,1.134,664,1.134,665,2.255,666,3.206,667,1.134,668,1.912,669,1.912,670,1.031,671,3.526,672,1.134,673,2.648,674,1.739,675,1.912,676,1.134,677,1.134,678,1.134,679,1.031,680,1.134,681,1.134,682,1.134,683,3.942,684,1.134,685,1.134,686,1.912,687,1.134,688,1.134,689,1.134,690,1.134,691,1.134,692,1.134,693,1.134,694,1.134,695,1.134,696,1.134,697,1.134,698,1.134,699,1.134,700,1.134,701,0.881,702,1.134,703,1.134,704,1.912,705,1.134,706,1.134,707,1.134,708,1.134,709,2.648,710,1.134,711,1.134,712,1.134,713,1.031,714,1.134,715,1.134,716,1.134,717,4.242,718,1.134,719,1.134,720,1.134,721,1.134,722,1.031,723,3.206,724,1.134,725,1.134,726,1.134,727,1.134,728,2.957,729,3.251,730,1.134,731,1.134,732,2.48,733,1.912,734,1.134,735,1.134,736,2.912,737,3.526,738,1.134,739,1.134,740,1.926,741,2.48,742,1.134,743,1.134,744,1.134,745,1.134,746,1.031,747,1.134,748,1.134,749,2.912,750,1.134,751,1.134,752,1.134,753,1.912,754,1.134,755,1.031,756,1.134,757,0.881,758,1.134,759,0.949,760,1.134,761,1.134,762,1.134,763,1.134,764,1.134,765,1.3,766,1.134,767,2.262,768,1.134,769,1.031,770,2.48,771,1.134,772,1.134,773,1.134,774,1.134,775,1.134,776,1.134,777,1.134,778,1.134,779,1.134,780,1.134,781,0.881,782,1.134,783,1.912,784,1.134,785,1.134,786,1.912,787,1.134,788,1.031,789,1.134,790,1.134,791,1.134,792,1.134,793,0.949,794,1.134,795,1.134,796,1.134,797,1.031,798,1.031,799,1.134,800,1.134,801,1.134,802,1.134,803,0.771,804,1.031,805,1.134,806,2.437,807,1.134,808,0.949,809,1.134,810,1.031,811,1.134,812,1.134,813,1.739,814,1.134,815,1.912,816,1.134,817,2.648,818,1.134,819,1.134,820,1.912,821,1.134,822,1.134,823,1.134,824,1.912,825,1.134,826,1.134,827,1.134,828,1.6,829,1.134,830,1.031,831,1.031,832,1.031,833,1.031,834,1.031,835,1.031,836,1.134,837,1.134,838,1.134,839,1.134,840,1.134,841,1.134,842,1.134]],["title/classes/CreateCommentDto.html",[41,0.126,843,2.363]],["body/classes/CreateCommentDto.html",[3,0.281,4,0.254,5,0.201,7,0.744,14,0.704,17,2.236,18,0.019,19,1.365,27,0.872,32,0.716,35,1.936,40,0.281,41,0.227,46,0.014,47,0.014,99,1.672,100,0.904,125,1.843,132,2.488,164,2.789,190,2.478,191,2.357,192,1.741,222,1.176,257,2.903,307,1.115,313,2.631,317,1.58,319,2.635,335,3.889,342,2.789,383,2.236,411,4.76,474,1.828,843,3.648,844,4.031,845,3.802,846,3.963,847,5.69,848,3.963,849,3.648,850,3.963,851,4.426,852,5.69,853,4.642,854,4.426,855,5.084,856,4.887,857,5.69,858,5.69,859,5.69,860,4.426,861,4.426,862,3.493,863,3.741,864,3.741,865,2.305,866,3.083]],["title/classes/CreatePostDto.html",[41,0.126,867,2.363]],["body/classes/CreatePostDto.html",[3,0.258,4,0.233,5,0.185,7,0.759,9,3.448,14,0.645,17,2.37,18,0.019,19,1.447,27,0.851,32,0.677,35,1.776,40,0.258,41,0.22,46,0.013,47,0.013,100,1.091,190,2.397,191,2.228,192,1.646,208,2.453,222,1.567,257,3.224,307,1.023,310,2.69,312,3.2,313,2.487,317,1.493,318,3.238,319,2.485,325,3.35,350,2.808,351,3.82,383,2.114,474,1.728,844,4.116,846,3.746,848,3.746,862,3.566,863,3.82,864,3.82,865,2.115,867,3.448,868,3.488,869,4.62,870,6.031,871,5.18,872,5.18,873,5.18,874,5.18,875,5.18,876,5.18,877,5.18,878,5.18,879,4.061,880,5.18,881,5.18,882,4.061,883,4.061]],["title/classes/CreateRelationshipDto.html",[41,0.126,884,2.823]],["body/classes/CreateRelationshipDto.html",[3,0.243,4,0.422,5,0.174,7,0.692,14,0.607,17,2.03,18,0.019,19,1.239,27,0.829,32,0.65,35,1.671,40,0.243,41,0.214,46,0.013,47,0.013,100,0.821,113,3.597,120,2.868,123,2.69,125,1.739,190,2.339,191,2.139,192,1.58,222,1.58,243,3.521,257,3.067,307,0.963,310,2.623,312,3.072,313,2.388,317,1.434,354,2.115,463,2.339,474,2.013,477,2.311,591,4.013,844,3.75,846,3.597,848,3.597,853,4.017,862,3.249,863,3.48,864,3.48,865,1.99,869,4.436,884,3.956,885,3.282,886,5.372,887,4.364,888,4.436,889,4.436,890,5.164,891,5.164,892,4.436,893,5.164,894,5.024,895,5.024,896,5.164,897,5.164,898,5.164,899,5.85,900,3.821,901,6.266,902,5.164,903,5.164,904,5.85,905,3.821,906,5.164,907,5.164,908,4.436,909,3.311,910,3.311]],["title/interfaces/CreatedBlogPostResponse.html",[425,1.376,443,2.193]],["body/interfaces/CreatedBlogPostResponse.html",[3,0.256,4,0.231,5,0.183,7,0.477,13,1.999,14,0.641,18,0.019,27,0.898,32,0.757,40,0.382,46,0.013,47,0.013,100,1.171,162,2.142,176,1.764,192,1.234,202,2.218,210,2.101,214,3.186,218,3.81,219,2.586,220,1.865,222,1.512,237,2.24,306,2.49,309,3.576,310,2.596,317,1.487,318,3.168,319,2.431,320,3.339,323,3.186,325,3.557,328,3.186,339,3.335,344,3.057,350,2.342,351,3.186,366,2.24,425,2.557,426,2.974,427,2.101,428,2.809,429,2.586,430,3.576,431,2.586,432,3.09,433,2.365,434,3.09,435,3.433,436,2.586,437,2.809,438,3.09,439,3.09,440,2.586,441,2.789,442,3.186,443,3.576,444,3.805,445,3.186,446,3.73,447,3.73,448,2.974,449,3.73]],["title/interfaces/ExpressRequestWithBlogPostUser.html",[214,2.193,425,1.376]],["body/interfaces/ExpressRequestWithBlogPostUser.html",[3,0.267,4,0.242,5,0.192,7,0.498,13,2.292,14,0.669,18,0.019,27,0.877,32,0.773,40,0.39,46,0.014,47,0.014,100,1.152,162,2.328,176,1.842,192,1.686,202,2.283,210,2.87,214,3.653,218,4.203,219,3.532,220,1.948,222,1.46,237,2.339,306,2.544,309,3.278,310,2.507,317,1.53,318,2.548,319,1.955,320,3.41,323,3.278,325,2.339,328,3.278,339,3.679,344,2.848,350,1.842,351,2.506,366,2.339,425,2.588,426,3.06,427,2.194,428,2.934,429,2.7,430,3.278,431,2.7,432,3.226,433,2.507,434,3.226,435,3.937,436,2.7,437,3.838,438,4.22,439,3.226,440,2.7,441,2.194,442,2.506,443,3.278,444,3.06,445,2.506,446,2.934,447,2.934,448,2.339,449,2.934]],["title/classes/GetRelatedPostsDto.html",[41,0.126,911,2.823]],["body/classes/GetRelatedPostsDto.html",[3,0.285,4,0.258,5,0.204,7,0.679,14,0.714,17,1.765,18,0.019,19,1.077,27,0.679,32,0.723,35,1.964,40,0.285,41,0.228,46,0.014,47,0.014,100,0.714,119,3.682,123,3.476,125,1.247,151,3.19,182,4,190,2.144,191,2.379,192,1.757,218,3.417,222,1.458,243,3.623,257,2.919,307,1.131,310,2.577,312,3.417,313,2.656,316,3.19,317,1.595,340,5.283,354,2.451,400,2.656,416,4.648,442,3.767,474,1.846,477,2.244,848,4,849,2.879,862,3.19,865,2.339,908,3.858,909,2.879,910,4.422,911,4.399,912,4.933,913,3.858,914,4.399,915,4.399,916,5.744,917,6.674,918,6.674,919,4.492,920,4,921,4.492,922,5.744,923,5.744]],["title/injectables/HbsRenderService.html",[80,1.074,525,1.919]],["body/injectables/HbsRenderService.html",[3,0.364,4,0.345,5,0.244,7,0.737,13,1.012,14,0.643,15,2.654,18,0.019,19,1.444,26,2.002,27,0.811,31,1.253,32,0.341,40,0.172,41,0.093,44,2.402,46,0.01,47,0.01,48,1.365,50,1.87,80,1.178,81,1.253,92,2.004,97,0.829,98,1.123,99,1.516,100,0.853,101,1.012,116,1.505,127,1.505,131,1.328,132,1.185,135,2.446,142,1.411,151,1.505,168,3.814,190,2.142,208,0.915,221,2.406,245,2.865,257,2.51,313,1.253,317,1.593,318,1.87,334,1.737,377,1.505,383,1.589,398,2.327,444,3.464,462,2.036,477,1.48,485,3.056,511,3.581,516,1.505,520,3.474,525,2.106,531,3.369,532,1.737,533,1.612,542,1.737,543,1.737,549,2.406,557,1.887,562,2.817,569,1.887,570,4.564,572,2.592,579,2.817,580,2.817,586,2.817,587,2.817,595,3.369,598,2.817,600,3.369,601,1.887,602,2.817,603,3.369,608,1.887,628,3.187,629,3.859,636,3.369,638,3.369,639,2.106,643,3.997,661,1.887,665,1.887,670,4.192,722,2.817,723,2.817,728,1.887,765,2.106,767,3.191,793,2.592,803,1.411,804,1.887,828,1.737,924,4.777,925,2.076,926,4.837,927,5.364,928,5.364,929,5.364,930,4.044,931,4.044,932,2.71,933,2.71,934,2.71,935,4.044,936,2.71,937,2.71,938,2.076,939,2.076,940,2.71,941,2.71,942,2.71,943,2.327,944,2.71,945,2.71,946,2.327,947,6.236,948,2.71,949,4.044,950,2.327,951,4.607,952,5.364,953,6.019,954,6.019,955,2.327,956,2.71,957,4.837,958,2.71,959,4.044,960,2.71,961,2.71,962,2.71,963,4.044,964,2.71,965,2.327,966,2.71,967,2.71,968,4.044,969,4.837,970,4.044,971,4.044,972,2.71,973,2.71,974,2.71,975,2.71,976,2.71,977,2.71,978,3.097,979,4.044,980,2.71,981,2.71,982,5.739,983,5.364,984,2.71,985,2.71,986,2.71,987,2.71,988,4.044,989,2.71,990,2.71,991,2.71,992,3.097,993,2.71,994,4.044,995,2.71,996,2.327,997,4.044,998,5.739,999,2.71,1000,2.71,1001,2.327,1002,2.71,1003,2.71,1004,2.327,1005,4.044,1006,2.71,1007,2.71,1008,2.076,1009,2.076,1010,2.71,1011,4.837,1012,2.71,1013,2.71,1014,2.71,1015,2.71,1016,2.71,1017,2.076,1018,2.327,1019,4.044,1020,2.71,1021,2.327,1022,2.71,1023,2.71,1024,2.71,1025,2.71,1026,4.837]],["title/controllers/HealthController.html",[0,2.047,1027,2.567]],["body/controllers/HealthController.html",[0,3.394,2,2.173,3,0.265,4,0.239,5,0.19,7,0.493,14,0.663,15,2.532,17,1.64,18,0.019,19,1.001,26,2.044,32,0.77,33,1.48,34,3.195,35,1.824,40,0.265,41,0.187,44,1.48,46,0.014,47,0.014,83,2.317,92,1.728,96,1.158,97,1.276,113,4.909,126,2.062,160,3.583,164,2.683,194,3.376,195,3.257,245,2.947,249,2.674,316,3.116,350,1.824,441,3.51,444,3.041,611,4.52,713,3.814,769,2.906,1008,5.54,1027,4.52,1028,3.583,1029,6.423,1030,4.703,1031,4.172,1032,4.172,1033,5.475,1034,5.475,1035,5.475,1036,5.788,1037,6.739,1038,6.112,1039,6.112,1040,5.475,1041,6.112,1042,6.112,1043,6.112,1044,4.172,1045,4.172,1046,3.195,1047,4.172,1048,4.172,1049,4.172,1050,4.172,1051,4.172,1052,3.583,1053,4.172,1054,4.172,1055,4.172,1056,7.048,1057,4.172,1058,4.172,1059,4.172,1060,4.172]],["title/modules/HealthModule.html",[48,1.244,61,2.363]],["body/modules/HealthModule.html",[2,3.431,3,0.357,4,0.322,5,0.255,18,0.019,32,0.908,33,1.993,40,0.357,41,0.192,46,0.016,47,0.016,48,2.224,50,2.598,61,4.223,68,2.926,1027,4.869,1046,4.303,1061,5.618,1062,6.588,1063,4.825,1064,6.588,1065,5.618]],["title/injectables/JwtAuthGuard.html",[80,1.074,233,2.567]],["body/injectables/JwtAuthGuard.html",[3,0.343,4,0.31,5,0.246,7,0.762,11,4.934,18,0.019,24,3.004,32,0.811,33,1.919,40,0.343,41,0.22,46,0.016,47,0.016,80,1.877,81,2.501,163,3.467,188,4.411,233,4.792,433,2.441,552,3.218,1066,4.645,1067,4.645,1068,6.88,1069,5.533,1070,4.934,1071,6.117,1072,5.533,1073,6.442,1074,6.442,1075,4.142,1076,5.408]],["title/injectables/JwtStrategy.html",[80,1.074,273,2.193]],["body/injectables/JwtStrategy.html",[3,0.256,4,0.231,5,0.183,7,0.711,13,2.39,14,0.641,15,2.476,18,0.019,19,1.285,21,4.102,24,2.974,26,1.999,27,0.757,32,0.839,33,1.431,40,0.256,41,0.183,42,3.09,43,2.24,44,1.431,46,0.013,47,0.013,80,1.561,81,1.865,83,2.974,92,2.218,96,1.487,97,1.638,98,2.218,99,1.349,100,1.018,101,1.999,126,1.638,128,2.24,135,1.506,142,2.101,145,2.974,162,2.332,167,3.131,185,3.09,188,4.722,192,1.638,194,3.082,195,3.186,202,2.218,208,1.362,210,2.789,219,3.433,236,1.865,237,2.24,238,3.697,239,3.09,249,2.586,254,4.187,273,3.965,281,3.464,287,4.604,288,3.464,293,4.599,299,2.24,301,5.884,303,4.599,320,3.339,321,4.102,385,3.557,433,2.133,588,3.73,740,2.4,914,4.102,1070,3.09,1071,6.004,1075,3.09,1077,3.464,1078,5.355,1079,5.355,1080,5.355,1081,5.355,1082,5.355,1083,5.5,1084,5.355,1085,4.604,1086,4.034,1087,5.355,1088,5.355,1089,4.034,1090,5.355,1091,4.034,1092,4.034,1093,4.034,1094,4.034,1095,4.034,1096,4.034,1097,4.034]],["title/classes/LoginUserDto.html",[41,0.126,171,2.193]],["body/classes/LoginUserDto.html",[3,0.247,4,0.223,5,0.177,7,0.843,14,0.617,17,2.479,18,0.019,19,1.513,27,0.866,32,0.743,35,1.699,40,0.247,41,0.202,46,0.013,47,0.013,100,1.003,101,2.662,125,1.078,141,3.107,162,2.38,163,2.49,166,2.49,171,3.509,190,1.45,191,1.609,192,1.189,193,2.49,202,3.117,203,4.477,242,4.485,257,3.202,296,4.572,307,0.978,317,1.45,342,2.559,346,2.706,400,2.728,474,1.895,556,3.348,849,3.782,862,3.503,863,3.753,864,3.107,865,2.023,909,4.345,920,4.721,1072,4.485,1098,5.653,1099,2.706,1100,4,1101,5.222,1102,6.308,1103,3.885,1104,3.885,1105,5.222,1106,6.125,1107,3.885,1108,3.885,1109,3.885,1110,3.885,1111,3.885,1112,3.885,1113,5.899,1114,4,1115,3.885,1116,4.485,1117,4.485,1118,4.485,1119,2.311,1120,3.336,1121,3.885]],["title/classes/PostCircularRelationship.html",[41,0.126,473,1.448]],["body/classes/PostCircularRelationship.html",[3,0.272,4,0.245,5,0.195,7,0.506,18,0.019,27,0.658,40,0.466,41,0.264,46,0.014,47,0.014,96,1.187,97,1.309,125,1.545,126,1.309,133,1.772,222,1.486,307,1.077,322,2.077,327,1.597,354,1.444,433,2.709,460,1.681,461,1.87,462,2.637,463,2.077,464,3.006,465,1.978,466,1.978,467,1.87,468,1.978,469,1.681,470,1.681,471,2.574,472,2.434,473,2.187,474,1.788,475,2.434,476,1.681,477,1.309,478,1.681,479,1.681,480,2.574,481,2.434,482,1.681,483,1.681]],["title/classes/PostDoesNotExist.html",[41,0.126,470,1.448]],["body/classes/PostDoesNotExist.html",[3,0.272,4,0.246,5,0.195,7,0.506,18,0.019,27,0.659,40,0.466,41,0.265,46,0.014,47,0.014,96,1.189,97,1.311,125,1.546,126,1.311,133,1.774,222,1.486,307,1.079,322,2.079,327,1.599,354,1.446,433,2.71,460,1.683,461,1.873,462,2.637,463,2.311,464,3.007,465,1.981,466,1.981,467,1.873,468,1.981,469,1.683,470,2.189,471,1.981,472,1.873,473,1.683,474,1.79,475,2.436,476,1.683,477,1.311,478,1.683,479,1.683,480,2.576,481,2.436,482,1.683,483,1.683]],["title/classes/PostDoesNotHaveComments.html",[41,0.126,479,1.448]],["body/classes/PostDoesNotHaveComments.html",[3,0.272,4,0.245,5,0.195,7,0.506,18,0.019,27,0.658,40,0.466,41,0.264,46,0.014,47,0.014,96,1.187,97,1.309,125,1.545,126,1.309,133,2.306,222,1.466,307,1.077,322,2.309,327,1.597,354,1.879,433,2.709,460,1.681,461,1.87,462,2.637,463,2.077,464,3.006,465,1.978,466,1.978,467,1.87,468,1.978,469,1.681,470,1.681,471,1.978,472,1.87,473,1.681,474,1.788,475,2.434,476,1.681,477,1.309,478,1.681,479,2.187,480,2.574,481,2.434,482,1.681,483,1.681]],["title/classes/PostError.html",[41,0.126,464,1.448]],["body/classes/PostError.html",[3,0.265,4,0.239,5,0.189,7,0.647,18,0.019,19,0.999,27,0.767,40,0.463,41,0.264,46,0.014,47,0.014,92,1.726,96,1.519,97,1.674,98,1.726,99,1.049,100,0.662,101,1.555,125,1.801,126,1.275,133,1.726,222,1.478,243,2.042,307,1.049,322,2.042,327,1.555,354,1.406,433,2.703,460,1.637,461,1.822,462,2.653,463,2.042,464,3.005,465,2.53,466,1.927,467,1.822,468,1.927,469,1.637,470,1.637,471,1.927,472,1.822,473,1.637,474,1.758,475,2.671,476,1.637,477,1.275,478,1.637,479,1.637,480,2.53,481,2.392,482,1.637,483,1.637,1119,2.478,1122,4.166]],["title/classes/PostIdValidationError.html",[41,0.126,478,1.448]],["body/classes/PostIdValidationError.html",[3,0.271,4,0.245,5,0.194,7,0.505,18,0.019,27,0.657,40,0.465,41,0.264,46,0.014,47,0.014,96,1.186,97,1.307,125,1.544,126,1.307,133,1.769,222,1.486,307,1.076,322,2.075,327,1.594,354,1.442,433,2.709,460,1.679,461,1.868,462,2.636,463,2.075,464,3.006,465,1.975,466,1.975,467,1.868,468,1.975,469,1.679,470,1.679,471,1.975,472,1.868,473,1.679,474,1.986,475,2.704,476,1.679,477,1.701,478,2.185,479,1.679,480,2.571,481,2.432,482,1.679,483,1.679]],["title/classes/PostInsufficientPermissionsError.html",[41,0.126,482,1.448]],["body/classes/PostInsufficientPermissionsError.html",[3,0.272,4,0.245,5,0.195,7,0.506,18,0.019,27,0.658,40,0.466,41,0.264,46,0.014,47,0.014,96,1.187,97,1.309,125,1.545,126,1.309,133,1.772,222,1.486,307,1.077,322,2.077,327,1.597,354,1.444,433,2.709,460,1.681,461,1.87,462,2.637,463,2.077,464,3.006,465,1.978,466,1.978,467,1.87,468,1.978,469,1.681,470,1.681,471,1.978,472,1.87,473,1.681,474,1.788,475,2.434,476,1.681,477,1.309,478,1.681,479,1.681,480,2.861,481,2.705,482,2.187,483,1.681]],["title/modules/PostModule.html",[48,1.244,62,2.363]],["body/modules/PostModule.html",[2,3.306,3,0.335,4,0.303,5,0.24,18,0.019,32,0.91,33,1.873,40,0.335,41,0.18,46,0.016,47,0.016,48,2.298,50,2.44,51,2.186,52,3.14,53,3.14,54,2.748,55,3.781,56,3.14,62,4.706,64,3.777,65,2.586,66,2.931,68,2.748,71,4.042,72,2.586,99,1.329,176,2.308,306,2.186,386,4.421,436,3.383,1123,4.532,1124,4.532,1125,4.706,1126,5.277,1127,5.848,1128,5.277,1129,5.277,1130,4.532,1131,5.277]],["title/classes/PostRelationConflict.html",[41,0.126,469,1.448]],["body/classes/PostRelationConflict.html",[3,0.272,4,0.245,5,0.195,7,0.506,18,0.019,27,0.658,40,0.466,41,0.264,46,0.014,47,0.014,96,1.187,97,1.309,125,1.545,126,1.309,133,1.772,222,1.486,307,1.077,322,2.077,327,1.597,354,1.444,433,2.709,460,1.681,461,1.87,462,2.637,463,2.077,464,3.006,465,1.978,466,1.978,467,2.434,468,2.574,469,2.187,470,1.681,471,1.978,472,1.87,473,1.681,474,1.788,475,2.434,476,1.681,477,1.309,478,1.681,479,1.681,480,2.574,481,2.434,482,1.681,483,1.681]],["title/injectables/PostService.html",[80,1.074,1125,2.363]],["body/injectables/PostService.html",[3,0.088,4,0.177,5,0.063,7,0.675,14,0.22,15,1.685,18,0.019,19,1.369,21,4.372,24,0.77,26,2.446,27,0.842,32,0.719,33,0.492,40,0.088,41,0.14,44,1.917,46,0.006,47,0.006,72,0.68,80,0.689,81,0.642,83,1.312,92,0.575,96,1.012,98,2.306,99,1.402,100,0.885,101,2.077,102,2.791,118,1.81,126,1.929,127,3.304,128,3.741,135,2.482,139,1.093,145,2.471,162,1.607,167,3.627,190,1.36,191,1.51,192,1.53,194,3.22,202,2.238,204,2.336,205,4.372,208,2.397,220,1.685,221,0.825,222,1.562,243,2.18,245,0.607,248,1.646,263,1.81,299,3.693,306,1.279,310,2.539,318,1.685,319,0.838,320,2.024,322,2.017,323,2.647,324,1.231,325,0.77,326,1.192,327,2.178,328,2.432,329,0.77,335,3.319,344,1.033,350,2.363,352,2.15,354,2.332,370,1.898,383,0.929,400,2.196,411,0.889,412,5.474,426,0.77,429,3.206,436,0.889,443,0.825,444,1.312,448,2.024,460,0.929,464,0.929,467,1.788,469,1.213,470,2.187,473,0.929,476,0.929,477,2.276,478,1.965,479,0.929,482,0.929,483,0.929,591,1.836,628,1.714,639,1.898,645,2.852,740,4.03,746,4.144,781,1.406,803,2.473,843,3.344,846,2.538,853,1.515,867,3.344,886,2.364,887,1.646,894,4.078,895,3.511,910,3.992,914,1.81,915,4.138,1125,3.044,1132,1.192,1133,2.363,1134,2.363,1135,2.363,1136,2.363,1137,2.363,1138,2.363,1139,2.363,1140,3.644,1141,2.363,1142,2.363,1143,2.363,1144,2.363,1145,2.363,1146,1.387,1147,3.637,1148,1.387,1149,2.363,1150,3.086,1151,2.363,1152,1.387,1153,2.363,1154,5.709,1155,2.363,1156,3.407,1157,1.387,1158,4.903,1159,5.012,1160,1.387,1161,2.363,1162,1.387,1163,3.086,1164,2.363,1165,4.449,1166,1.387,1167,3.13,1168,3.644,1169,5.012,1170,3.644,1171,2.029,1172,2.363,1173,2.363,1174,1.387,1175,1.387,1176,2.363,1177,1.387,1178,1.646,1179,2.363,1180,1.387,1181,2.363,1182,1.387,1183,2.363,1184,3.511,1185,1.387,1186,2.029,1187,3.644,1188,2.363,1189,2.363,1190,1.387,1191,1.192,1192,1.387,1193,1.192,1194,2.363,1195,1.387,1196,1.387,1197,1.387,1198,1.387,1199,1.063,1200,1.063,1201,1.387,1202,1.387,1203,1.063,1204,1.387,1205,1.387,1206,1.387,1207,1.387,1208,2.363,1209,4.088,1210,2.363,1211,1.387,1212,2.363,1213,1.387,1214,1.387,1215,3.086,1216,1.387,1217,1.387,1218,1.387,1219,1.387,1220,1.387,1221,5.836,1222,1.387,1223,1.387,1224,1.387,1225,2.363,1226,2.363,1227,2.363,1228,2.363,1229,0.966,1230,1.387,1231,1.387,1232,1.387,1233,3.644,1234,4.088,1235,2.651,1236,4.748,1237,4.64,1238,3.086,1239,1.387,1240,1.387,1241,2.363,1242,1.387,1243,1.387,1244,1.192,1245,1.387,1246,1.387,1247,1.387,1248,1.387,1249,1.387,1250,2.651,1251,5.001,1252,1.387,1253,1.387,1254,3.644,1255,2.029,1256,1.387,1257,1.387,1258,2.363,1259,1.387,1260,1.387,1261,2.363,1262,1.387,1263,1.387,1264,1.387,1265,1.387,1266,1.387,1267,1.387,1268,1.192,1269,0.966,1270,2.363,1271,1.387,1272,2.363,1273,2.363,1274,1.387,1275,2.363,1276,1.387,1277,1.387,1278,1.387,1279,1.387,1280,1.387,1281,1.387,1282,2.363,1283,1.387,1284,3.086,1285,3.086,1286,2.363,1287,1.387,1288,1.387,1289,1.387,1290,1.387,1291,1.387,1292,2.363,1293,2.363,1294,1.387,1295,1.387,1296,1.387,1297,1.387,1298,1.387]],["title/classes/PostSlugValidationError.html",[41,0.126,476,1.448]],["body/classes/PostSlugValidationError.html",[3,0.271,4,0.245,5,0.194,7,0.505,18,0.019,27,0.657,40,0.465,41,0.264,46,0.014,47,0.014,96,1.186,97,1.307,125,1.544,126,1.307,133,1.769,222,1.486,307,1.076,322,2.075,327,2.075,354,1.442,433,2.709,460,1.679,461,1.868,462,2.636,463,2.075,464,3.006,465,1.975,466,1.975,467,1.868,468,1.975,469,1.679,470,1.679,471,1.975,472,1.868,473,1.679,474,1.986,475,2.704,476,2.185,477,1.307,478,1.679,479,1.679,480,2.571,481,2.432,482,1.679,483,1.679]],["title/classes/RegisterUserDto.html",[41,0.126,197,2.363]],["body/classes/RegisterUserDto.html",[3,0.22,4,0.198,5,0.157,7,0.833,13,1.8,14,0.549,17,2.361,18,0.019,19,1.441,27,0.849,32,0.607,35,1.512,40,0.22,41,0.19,46,0.012,47,0.012,99,1.691,100,0.955,123,2.891,125,1.901,127,3.508,132,2.108,162,2.308,165,3.867,190,1.29,191,1.432,192,1.058,193,2.216,197,3.559,202,2.781,203,4.074,210,2.891,257,3.22,296,4.697,307,0.871,317,1.338,342,3.409,346,4.4,400,2.23,442,2.057,452,4.768,573,3.559,651,4.4,652,4.845,849,3.85,850,3.867,853,3.091,862,3.508,863,3.573,864,3.758,865,1.8,866,3.358,909,3.85,910,2.216,1085,3.693,1099,2.408,1100,3.693,1106,4.768,1116,4.141,1117,4.141,1118,4.141,1229,3.358,1269,5.249,1299,5.425,1300,4.821,1301,3.457,1302,3.457,1303,5.551,1304,2.969,1305,3.457,1306,7.12,1307,6.542,1308,5.619,1309,5.011,1310,3.457,1311,3.457,1312,6.006,1313,3.457,1314,3.457,1315,3.457,1316,3.457,1317,3.457,1318,2.969,1319,4.821,1320,3.457,1321,4.821,1322,3.457,1323,3.457,1324,4.821,1325,3.457]],["title/interfaces/Session.html",[425,1.376,529,2.363]],["body/interfaces/Session.html",[3,0.172,4,0.156,5,0.274,14,0.26,18,0.019,27,0.767,31,0.756,32,0.565,40,0.104,41,0.056,43,0.908,44,1.976,46,0.007,47,0.007,51,0.677,65,1.704,85,1.048,92,0.677,99,0.412,100,0.769,115,1.89,116,3.85,120,0.908,121,1.048,125,1.124,127,1.507,131,1.984,135,2.248,139,1.608,141,1.614,142,2.108,151,0.908,167,2.795,174,1.139,194,2.239,208,1.515,220,0.756,221,0.973,245,2.633,251,1.048,299,3.272,311,0.852,317,0.965,319,1.593,324,1.413,338,1.739,344,0.715,350,1.187,366,1.507,383,1.367,397,2.422,399,1.048,414,2.422,425,1.298,427,0.852,430,3.815,441,0.852,445,0.973,448,2.493,462,2.037,463,0.61,484,1.739,485,0.801,486,0.908,487,1.139,488,1.252,489,1.252,490,1.252,491,1.252,492,1.252,493,1.252,494,1.252,495,1.252,496,1.252,497,1.252,498,1.252,499,1.252,500,1.252,501,1.252,502,1.252,503,1.252,504,1.252,505,1.252,506,1.252,507,1.252,508,1.252,509,1.252,510,2.078,511,1.614,512,2.078,513,1.252,514,2.664,515,2.078,516,0.908,517,2.078,518,1.139,519,1.413,520,3.712,521,1.139,522,1.413,523,2.229,524,1.139,525,1.413,526,0.973,527,1.139,528,1.139,529,3.103,530,3.438,531,1.139,532,3.86,533,0.973,534,1.252,535,1.252,536,3.438,537,2.078,538,2.078,539,1.252,540,4.265,541,2.229,542,3.777,543,1.739,544,2.078,545,1.252,546,1.139,547,1.252,548,5.02,549,0.973,550,0.973,551,2.422,552,0.973,553,1.048,554,1.252,555,1.252,556,1.048,557,1.139,558,1.252,559,1.252,560,1.252,561,1.252,562,1.89,563,2.664,564,1.252,565,2.078,566,2.664,567,1.252,568,1.252,569,1.139,570,3.127,571,2.078,572,1.048,573,3.934,574,5.067,575,2.422,576,2.664,577,2.664,578,1.252,579,4.565,580,1.89,581,1.252,582,1.252,583,1.252,584,1.252,585,1.252,586,1.139,587,1.139,588,3.127,589,2.664,590,2.664,591,2.069,592,3.928,593,3.708,594,3.928,595,4.194,596,3.708,597,3.1,598,4.466,599,3.1,600,4.518,601,2.819,602,3.572,603,3.572,604,3.708,605,3.1,606,3.999,607,3.928,608,4.518,609,3.438,610,1.252,611,1.89,612,1.252,613,3.438,614,1.252,615,2.664,616,1.139,617,4.265,618,1.252,619,2.078,620,2.664,621,1.252,622,2.664,623,2.078,624,1.252,625,3.1,626,2.664,627,1.252,628,3.344,629,1.739,630,2.078,631,1.252,632,1.252,633,1.252,634,1.252,635,1.252,636,3.572,637,1.252,638,1.139,639,2.108,640,1.252,641,2.664,642,1.252,643,2.422,644,1.252,645,3.288,646,1.252,647,2.664,648,1.252,649,2.878,650,2.664,651,2.422,652,1.139,653,1.252,654,1.252,655,2.422,656,1.252,657,1.252,658,2.078,659,2.078,660,2.664,661,1.139,662,2.078,663,1.252,664,1.252,665,2.422,666,3.372,667,1.252,668,2.078,669,2.078,670,1.139,671,3.708,672,1.252,673,2.819,674,1.89,675,2.078,676,1.252,677,1.252,678,1.252,679,1.139,680,1.252,681,1.252,682,1.252,683,4.111,684,1.252,685,1.252,686,2.078,687,1.252,688,1.252,689,1.252,690,1.252,691,1.252,692,1.252,693,1.252,694,1.252,695,1.252,696,1.252,697,1.252,698,1.252,699,1.252,700,1.252,701,0.973,702,1.252,703,1.252,704,2.078,705,1.252,706,1.252,707,1.252,708,1.252,709,2.819,710,1.252,711,1.252,712,1.252,713,1.139,714,1.252,715,1.252,716,1.252,717,4.398,718,1.252,719,1.252,720,1.252,721,1.252,722,1.139,723,3.372,724,1.252,725,1.252,726,1.252,727,1.252,728,3.127,729,3.438,730,1.252,731,1.252,732,2.664,733,2.078,734,1.252,735,1.252,736,3.1,737,3.708,738,1.252,739,1.252,740,2.069,741,2.664,742,1.252,743,1.252,744,1.252,745,1.252,746,1.139,747,1.252,748,1.252,749,3.1,750,1.252,751,1.252,752,1.252,753,2.078,754,1.252,755,1.139,756,1.252,757,0.973,758,1.252,759,1.048,760,1.252,761,1.252,762,1.252,763,1.252,764,1.252,765,1.413,766,1.252,767,2.408,768,1.252,769,1.139,770,2.664,771,1.252,772,1.252,773,1.252,774,1.252,775,1.252,776,1.252,777,1.252,778,1.252,779,1.252,780,1.252,781,0.973,782,1.252,783,2.078,784,1.252,785,1.252,786,2.078,787,1.252,788,1.139,789,1.252,790,1.252,791,1.252,792,1.252,793,1.048,794,1.252,795,1.252,796,1.252,797,1.139,798,1.139,799,1.252,800,1.252,801,1.252,802,1.252,803,0.852,804,1.139,805,1.252,806,2.595,807,1.252,808,1.048,809,1.252,810,1.139,811,1.252,812,1.252,813,1.89,814,1.252,815,2.078,816,1.252,817,2.819,818,1.252,819,1.252,820,2.078,821,1.252,822,1.252,823,1.252,824,2.078,825,1.252,826,1.252,827,1.252,828,1.739,829,1.252,830,1.139,831,1.139,832,1.139,833,1.139,834,1.139,835,1.139,836,1.252,837,1.252,838,1.252,839,1.252,840,1.252,841,1.252,842,1.252]],["title/interfaces/Template.html",[425,1.376,520,1.919]],["body/interfaces/Template.html",[3,0.172,4,0.155,5,0.274,14,0.259,18,0.019,27,0.767,31,0.755,32,0.565,40,0.104,41,0.056,43,0.906,44,1.975,46,0.007,47,0.007,51,0.676,65,1.702,85,1.046,92,0.676,99,1.018,100,0.884,115,1.886,116,3.807,120,0.906,121,1.046,125,0.453,127,1.504,131,1.981,135,2.246,139,1.606,141,1.611,142,2.105,151,0.906,167,2.793,174,1.136,194,2.236,208,1.514,220,0.755,221,0.971,245,2.632,251,1.046,299,3.27,311,0.85,317,0.964,319,1.591,324,1.411,338,1.736,344,0.714,350,1.961,366,1.504,383,1.365,397,2.418,399,1.046,414,2.418,425,1.296,427,0.85,430,3.813,441,0.85,445,0.971,448,1.504,462,2.036,463,0.609,484,1.736,485,0.8,486,0.906,487,1.136,488,1.25,489,1.25,490,1.25,491,1.25,492,1.25,493,1.25,494,1.25,495,1.25,496,1.25,497,1.25,498,1.25,499,1.25,500,1.25,501,1.25,502,1.25,503,1.25,504,1.25,505,1.25,506,1.25,507,1.25,508,1.25,509,1.25,510,2.074,511,1.611,512,2.074,513,1.25,514,2.659,515,2.074,516,0.906,517,2.074,518,1.136,519,1.411,520,3.744,521,1.136,522,1.411,523,2.226,524,1.136,525,1.411,526,0.971,527,1.136,528,2.418,529,2.874,530,2.074,531,1.136,532,3.858,533,0.971,534,1.25,535,1.25,536,3.434,537,2.074,538,2.074,539,1.25,540,4.262,541,2.226,542,3.774,543,1.736,544,2.074,545,1.25,546,1.136,547,1.25,548,5.018,549,0.971,550,0.971,551,2.418,552,0.971,553,1.046,554,1.25,555,1.25,556,1.046,557,1.136,558,1.25,559,1.25,560,1.25,561,1.25,562,1.886,563,2.659,564,1.25,565,2.074,566,2.659,567,1.25,568,1.25,569,1.136,570,3.123,571,2.074,572,1.046,573,3.932,574,5.065,575,2.418,576,2.659,577,2.659,578,1.25,579,4.563,580,1.886,581,1.25,582,1.25,583,1.25,584,1.25,585,1.25,586,1.136,587,1.136,588,3.123,589,2.659,590,2.659,591,2.066,592,3.924,593,3.704,594,3.924,595,4.191,596,3.704,597,3.096,598,4.464,599,3.096,600,4.516,601,2.815,602,3.568,603,3.568,604,3.704,605,3.096,606,3.996,607,3.924,608,4.516,609,3.434,610,1.25,611,1.886,612,1.25,613,3.434,614,1.25,615,2.659,616,1.136,617,4.262,618,1.25,619,2.074,620,2.659,621,1.25,622,2.659,623,2.074,624,1.25,625,3.096,626,2.659,627,1.25,628,3.342,629,1.736,630,2.074,631,1.25,632,1.25,633,1.25,634,1.25,635,1.25,636,3.568,637,1.25,638,1.136,639,2.105,640,1.25,641,2.659,642,1.25,643,2.418,644,1.25,645,3.284,646,1.25,647,2.659,648,1.25,649,2.874,650,2.659,651,2.418,652,1.136,653,1.25,654,1.25,655,2.418,656,1.25,657,1.25,658,2.074,659,2.074,660,2.659,661,1.136,662,2.074,663,1.25,664,1.25,665,2.418,666,3.368,667,1.25,668,2.074,669,2.074,670,1.136,671,3.704,672,1.25,673,2.815,674,1.886,675,2.074,676,1.25,677,1.25,678,1.25,679,1.136,680,1.25,681,1.25,682,1.25,683,4.107,684,1.25,685,1.25,686,2.074,687,1.25,688,1.25,689,1.25,690,1.25,691,1.25,692,1.25,693,1.25,694,1.25,695,1.25,696,1.25,697,1.25,698,1.25,699,1.25,700,1.25,701,0.971,702,1.25,703,1.25,704,2.074,705,1.25,706,1.25,707,1.25,708,1.25,709,2.815,710,1.25,711,1.25,712,1.25,713,1.136,714,1.25,715,1.25,716,1.25,717,4.394,718,1.25,719,1.25,720,1.25,721,1.25,722,1.136,723,3.368,724,1.25,725,1.25,726,1.25,727,1.25,728,3.123,729,3.434,730,1.25,731,1.25,732,2.659,733,2.074,734,1.25,735,1.25,736,3.096,737,3.704,738,1.25,739,1.25,740,2.066,741,2.659,742,1.25,743,1.25,744,1.25,745,1.25,746,1.136,747,1.25,748,1.25,749,3.096,750,1.25,751,1.25,752,1.25,753,2.074,754,1.25,755,1.136,756,1.25,757,0.971,758,1.25,759,1.046,760,1.25,761,1.25,762,1.25,763,1.25,764,1.25,765,1.411,766,1.25,767,2.405,768,1.25,769,1.136,770,2.659,771,1.25,772,1.25,773,1.25,774,1.25,775,1.25,776,1.25,777,1.25,778,1.25,779,1.25,780,1.25,781,0.971,782,1.25,783,2.074,784,1.25,785,1.25,786,2.074,787,1.25,788,1.136,789,1.25,790,1.25,791,1.25,792,1.25,793,1.046,794,1.25,795,1.25,796,1.25,797,1.136,798,1.136,799,1.25,800,1.25,801,1.25,802,1.25,803,0.85,804,1.136,805,1.25,806,2.591,807,1.25,808,1.046,809,1.25,810,1.136,811,1.25,812,1.25,813,1.886,814,1.25,815,2.074,816,1.25,817,2.815,818,1.25,819,1.25,820,2.074,821,1.25,822,1.25,823,1.25,824,2.074,825,1.25,826,1.25,827,1.25,828,1.736,829,1.25,830,1.136,831,1.136,832,1.136,833,1.136,834,1.136,835,1.136,836,1.25,837,1.25,838,1.25,839,1.25,840,1.25,841,1.25,842,1.25]],["title/injectables/TemplateEditorService.html",[80,1.074,519,1.919]],["body/injectables/TemplateEditorService.html",[3,0.195,4,0.176,5,0.139,14,0.488,15,2.048,18,0.02,19,1.593,26,2.348,27,0.845,32,0.386,40,0.195,41,0.105,44,2.232,46,0.011,47,0.011,80,1.291,81,1.418,98,2.358,99,1.434,100,1,101,2.125,131,2.17,135,1.94,139,2.999,141,1.825,142,2.707,168,2.635,189,3.392,199,2.634,204,1.966,245,3.074,317,1.229,319,1.088,322,1.653,335,2.707,391,2.136,404,3.804,477,0.938,485,3.315,486,3.757,516,1.704,519,2.307,526,1.825,533,2.635,546,2.136,666,2.136,673,4.204,679,2.136,709,4.204,755,3.085,757,1.825,759,1.966,765,3.144,767,3.95,938,2.349,939,2.349,950,2.634,951,5.185,978,4.624,992,3.392,1018,3.804,1119,1.825,1147,2.349,1326,2.349,1327,5.198,1328,5.692,1329,4.429,1330,5.692,1331,4.429,1332,4.429,1333,3.067,1334,4.429,1335,3.067,1336,6.036,1337,4.429,1338,5.198,1339,3.067,1340,3.067,1341,4.429,1342,3.067,1343,4.429,1344,3.067,1345,4.429,1346,3.067,1347,3.067,1348,3.981,1349,3.067,1350,5.692,1351,3.067,1352,5.185,1353,3.067,1354,3.067,1355,3.067,1356,3.067,1357,4.429,1358,3.067,1359,3.067,1360,3.067,1361,3.067,1362,3.067,1363,3.067,1364,3.067,1365,3.067,1366,3.067,1367,3.067,1368,2.634,1369,3.067,1370,2.634,1371,3.067,1372,3.067,1373,3.804,1374,3.067,1375,3.067,1376,3.067,1377,3.067,1378,3.067,1379,3.067,1380,3.067,1381,4.429,1382,3.067,1383,2.634,1384,3.067,1385,3.067,1386,3.067,1387,3.067,1388,3.804,1389,3.067,1390,2.634,1391,2.634,1392,3.067,1393,2.634,1394,3.067,1395,3.067,1396,3.067,1397,3.067,1398,3.067,1399,4.429,1400,3.067,1401,5.198,1402,3.067,1403,3.067,1404,3.067,1405,3.067,1406,3.067,1407,4.429,1408,5.198,1409,5.198,1410,5.692,1411,3.067,1412,3.067,1413,3.067,1414,2.634,1415,3.067,1416,5.898,1417,6.639,1418,3.067,1419,3.067]],["title/modules/TemplatePlaygroundModule.html",[48,1.244,1420,2.567]],["body/modules/TemplatePlaygroundModule.html",[3,0.301,4,0.272,5,0.216,18,0.019,32,0.932,40,0.301,41,0.162,46,0.015,47,0.015,48,1.601,50,2.193,51,1.965,52,2.822,53,3.863,54,3.382,55,3.607,56,2.822,64,3.537,65,2.325,66,2.634,68,2.47,485,2.325,486,2.634,516,2.634,518,3.304,519,3.726,520,3.096,521,3.304,522,3.726,523,3.041,524,3.304,525,3.726,526,2.822,527,3.304,701,4.484,1420,5.271,1421,4.074,1422,4.074,1423,4.074,1424,4.074,1425,4.743,1426,5.945,1427,5.945,1428,4.743,1429,4.074,1430,5.945,1431,4.743,1432,5.945,1433,4.743,1434,5.945,1435,4.743]],["title/classes/UpdateUserDto.html",[41,0.126,212,2.363]],["body/classes/UpdateUserDto.html",[3,0.314,4,0.284,5,0.225,7,0.817,13,1.848,14,0.787,17,1.946,18,0.019,19,1.188,27,0.783,32,0.769,35,2.165,40,0.314,41,0.226,46,0.015,47,0.015,99,1.846,100,0.787,132,2.67,162,2.221,190,1.848,191,2.051,192,1.515,208,2.397,210,3.18,212,4.245,257,3.023,264,4.677,307,1.247,317,1.695,342,2.993,346,3.449,400,2.824,781,2.946,849,3.174,850,4.612,853,3.174,862,3.391,863,3.633,864,3.633,865,2.579,866,4.253,909,3.174,1085,4.677,1099,3.449,1100,4.677,1156,4.677,1304,4.253,1318,4.253,1436,5.245,1437,5.245]],["title/modules/UserModule.html",[48,1.244,63,2.193]],["body/modules/UserModule.html",[3,0.334,4,0.302,5,0.239,18,0.019,32,0.889,33,1.866,40,0.334,41,0.18,46,0.016,47,0.016,48,2.295,50,2.432,51,2.179,52,3.129,53,3.129,54,2.739,55,3.776,56,4.044,63,4.414,64,3.769,65,2.577,66,2.921,68,2.739,71,4.028,72,2.577,99,1.325,176,2.3,236,2.432,237,2.921,238,3.977,376,4.517,459,4.412,1130,4.517,1438,4.517,1439,4.517,1440,4.517,1441,5.259,1442,5.259]],["title/injectables/UserService.html",[80,1.074,238,1.919]],["body/injectables/UserService.html",[3,0.141,4,0.128,5,0.101,7,0.732,13,1.807,14,0.353,15,1.608,18,0.019,19,1.444,26,2.51,27,0.834,32,0.758,33,0.789,40,0.141,41,0.119,44,2.065,46,0.009,47,0.009,72,1.09,80,1.013,81,1.028,84,2.663,92,0.921,96,0.965,97,1.064,98,2.494,99,1.727,100,0.957,101,2.247,102,2.663,116,1.931,126,1.937,128,2.917,135,2.48,145,3.092,162,2.448,164,1.704,165,3.371,166,3.103,167,3.694,168,2.068,169,2.986,171,3.461,176,1.52,182,1.549,185,5.02,190,2.48,191,2.307,192,1.704,193,3.103,194,3.43,195,4,196,2.986,197,3.86,202,2.905,203,3.899,204,3.103,205,3.707,207,2.986,208,2.137,209,2.986,212,4.058,217,4.157,220,1.608,230,3.278,236,1.979,237,1.235,238,3.03,243,1.704,244,2.663,245,0.972,247,2.986,248,1.549,254,2.421,255,4.157,264,2.663,287,4.74,296,4.569,299,3.582,311,1.811,339,1.158,344,1.52,370,2.521,377,3.344,385,2.377,416,3.371,431,3.103,455,4.157,474,1.117,477,1.704,649,3.103,740,3.124,946,4.157,1017,2.663,1083,2.986,1147,4.456,1158,4.157,1159,4.157,1171,2.986,1191,1.91,1235,3.676,1244,4.782,1443,1.91,1444,2.421,1445,3.476,1446,3.476,1447,3.476,1448,3.476,1449,3.476,1450,2.223,1451,2.223,1452,4.28,1453,4.28,1454,4.28,1455,3.476,1456,5.818,1457,2.223,1458,3.476,1459,4.84,1460,2.986,1461,3.476,1462,2.986,1463,3.476,1464,2.223,1465,5.568,1466,3.476,1467,2.223,1468,3.476,1469,2.223,1470,2.223,1471,3.476,1472,2.421,1473,3.476,1474,2.223,1475,3.476,1476,2.223,1477,3.476,1478,2.986,1479,3.476,1480,2.986,1481,2.223,1482,2.223,1483,2.223,1484,2.223,1485,3.476,1486,4.28,1487,2.223,1488,2.223,1489,2.223,1490,2.223,1491,2.223,1492,2.223,1493,2.223,1494,3.476,1495,4.84,1496,2.223,1497,2.223,1498,3.476,1499,4.28,1500,2.223,1501,2.223,1502,3.476,1503,2.223,1504,2.223,1505,2.223,1506,2.223,1507,2.223,1508,2.223,1509,2.223]],["title/injectables/ZipExportService.html",[80,1.074,522,1.919]],["body/injectables/ZipExportService.html",[3,0.243,4,0.219,5,0.285,13,1.428,14,0.608,15,2.39,18,0.019,19,1.404,23,2.665,26,2.185,27,0.774,31,2.707,32,0.482,40,0.243,41,0.131,44,1.358,46,0.013,47,0.013,80,1.506,81,1.769,98,2.141,99,1.302,100,0.93,101,1.929,114,2.93,135,2.444,145,3.251,208,1.292,245,2.951,286,3.286,291,3.286,297,2.276,311,1.993,313,2.39,338,2.453,350,1.673,389,2.93,485,3.072,516,2.125,520,3.265,522,2.692,523,4.197,526,2.276,528,2.665,532,2.453,533,2.276,541,2.453,542,4.648,543,4.422,572,3.753,639,2.692,655,2.665,759,2.453,765,2.692,767,3.075,798,3.6,803,1.993,813,4.7,817,4.366,828,3.314,830,2.665,831,2.665,832,2.665,833,2.665,834,2.665,835,2.665,938,2.93,939,2.93,992,2.93,1009,2.93,1119,3.482,1368,4.439,1373,3.286,1388,5.028,1390,4.439,1391,5.028,1444,2.665,1472,3.6,1510,4.802,1511,2.93,1512,5.169,1513,5.169,1514,6.269,1515,5.169,1516,3.826,1517,5.169,1518,3.826,1519,6.025,1520,3.826,1521,3.959,1522,4.483,1523,3.826,1524,3.826,1525,3.826,1526,5.028,1527,3.826,1528,3.826,1529,3.826,1530,3.826,1531,3.826,1532,3.826,1533,3.826,1534,3.826,1535,3.286,1536,3.826,1537,3.826,1538,5.169,1539,3.826,1540,5.169,1541,3.286,1542,3.286,1543,3.826,1544,6.269,1545,3.826,1546,3.286,1547,3.826,1548,3.826,1549,3.826,1550,3.826,1551,3.826,1552,3.826,1553,3.826,1554,3.826,1555,3.286,1556,3.286,1557,3.826,1558,3.826,1559,3.826,1560,3.286,1561,3.826,1562,5.169,1563,3.826,1564,3.286,1565,3.826,1566,2.93,1567,3.826,1568,3.826,1569,3.826,1570,3.826,1571,3.826,1572,3.826,1573,3.826]],["title/coverage.html",[553,3.23]],["body/coverage.html",[0,3.305,1,2.357,5,0.154,6,2.907,18,0.019,31,1.565,36,2.013,41,0.255,46,0.012,47,0.012,54,1.762,80,2.017,82,2.907,100,0.946,158,2.357,159,2.907,171,2.013,197,2.169,208,1.142,212,2.169,214,2.013,227,2.013,233,2.357,236,1.565,238,1.762,243,1.658,273,2.013,285,2.907,306,1.402,308,3.815,329,1.879,339,1.762,352,2.357,372,2.357,386,2.357,391,4.648,410,3.822,416,2.357,423,2.592,425,2.426,426,1.879,428,3.822,443,2.013,450,4.145,457,2.592,459,2.357,460,1.33,461,3.067,464,1.33,469,1.33,470,1.33,473,1.33,476,1.33,478,1.33,479,1.33,482,1.33,483,1.33,484,2.169,485,3.438,486,3.609,487,4.145,511,2.013,519,1.762,520,1.762,522,1.762,525,1.762,529,2.169,553,2.169,628,3.896,701,2.013,765,1.762,843,2.169,844,4.018,845,2.907,867,2.169,868,2.907,884,2.592,885,2.907,911,2.592,912,2.907,913,2.907,924,3.638,925,3.638,1027,2.357,1028,2.907,1066,2.907,1067,2.907,1077,2.907,1098,2.907,1099,3.822,1114,2.592,1125,2.169,1127,2.907,1132,2.907,1199,2.592,1200,2.592,1203,2.592,1299,2.907,1326,3.638,1348,2.592,1436,2.907,1443,2.907,1510,3.638,1511,3.638,1521,2.592,1574,3.384,1575,3.384,1576,6.923,1577,5.488,1578,3.384,1579,3.384,1580,3.384,1581,5.488,1582,7.75,1583,6.674,1584,4.75,1585,6.267,1586,2.907,1587,7.57,1588,6.267,1589,2.907,1590,2.907,1591,2.907,1592,2.907,1593,2.907,1594,3.384,1595,4.75,1596,3.384,1597,4.08,1598,5.488,1599,2.907,1600,3.384,1601,4.08,1602,2.907,1603,3.384,1604,3.384]],["title/dependencies.html",[51,1.837,806,1.97]],["body/dependencies.html",[18,0.019,33,1.909,35,2.353,41,0.22,46,0.016,47,0.016,51,2.229,70,4.12,72,2.637,188,3.449,276,4.12,370,2.802,371,4.621,435,3.449,865,2.802,1046,4.12,1063,4.621,1070,4.12,1075,4.12,1193,4.621,1480,4.621,1605,6.421,1606,6.865,1607,5.38,1608,5.38,1609,5.38,1610,5.38,1611,5.38,1612,5.38,1613,5.38,1614,5.38,1615,5.38,1616,5.38,1617,5.38,1618,5.38,1619,5.38,1620,5.38,1621,5.38,1622,5.38,1623,5.38,1624,5.38,1625,5.38,1626,5.38]],["title/miscellaneous/functions.html",[1627,1.828,1628,3.809]],["body/miscellaneous/functions.html",[7,0.796,9,3.736,13,1.416,14,0.603,18,0.018,22,2.905,26,2.569,27,0.814,30,2.905,31,1.754,46,0.013,47,0.013,54,3.035,86,3.257,89,2.905,96,1.053,98,2.788,99,1.695,100,0.926,101,2.569,108,3.257,113,4.059,116,2.106,123,1.975,125,1.426,128,2.106,139,1.754,142,1.975,143,2.905,162,2.007,165,2.642,166,2.431,190,1.416,192,1.16,194,2.376,195,2.256,202,2.414,203,2.256,222,1.423,249,2.431,251,2.431,295,2.905,297,2.256,306,2.129,307,0.955,308,2.431,310,2.484,314,2.256,316,3.112,318,2.376,323,3.716,327,2.175,328,3.716,333,5.005,334,3.294,340,4.784,342,1.859,354,2.109,361,3.257,362,3.257,388,3.257,389,2.905,390,3.257,391,4.059,392,3.257,400,2.376,401,2.905,426,2.854,429,3.294,440,4.004,441,2.676,447,2.642,462,2.518,474,1.651,475,2.247,477,1.16,550,2.256,556,2.431,629,2.431,757,2.256,808,3.294,887,2.642,889,3.257,910,3.736,915,2.905,1008,2.905,1021,3.257,1069,3.257,1114,3.936,1119,2.256,1120,3.257,1178,3.579,1199,3.936,1200,3.936,1203,3.936,1237,3.257,1250,3.257,1269,2.642,1309,2.905,1370,3.257,1462,3.257,1478,3.257,1555,3.257,1586,3.257,1589,3.257,1597,3.257,1599,4.413,1601,3.257,1602,4.413,1627,2.256,1628,3.257,1629,3.793,1630,2.905,1631,5.138,1632,3.793,1633,5.138,1634,3.793,1635,3.793,1636,3.257,1637,3.793,1638,3.257,1639,3.793,1640,3.793,1641,3.793,1642,3.793,1643,3.793,1644,3.793,1645,5.827,1646,3.793,1647,3.257,1648,3.793,1649,3.793,1650,3.793,1651,3.793,1652,3.793,1653,3.793,1654,3.793,1655,3.793,1656,3.793,1657,3.793,1658,3.793,1659,3.793,1660,3.793,1661,3.793,1662,3.793,1663,3.793,1664,3.793,1665,5.827,1666,3.257,1667,3.793,1668,3.793,1669,3.793,1670,3.793,1671,5.138,1672,5.138,1673,5.138,1674,3.793,1675,3.793,1676,3.793,1677,3.793,1678,5.138,1679,5.138,1680,4.413,1681,3.793,1682,3.793]],["title/index.html",[14,0.586,1526,3.165]],["body/index.html",[5,0.245,9,2.104,11,2.514,13,1.225,18,0.019,23,2.286,24,1.823,25,4.496,26,2.313,27,0.55,46,0.013,47,0.012,51,1.36,55,1.823,87,3.238,89,4.134,96,0.911,97,1.004,98,1.36,100,0.522,103,2.286,107,5.805,114,4.134,119,3.46,124,2.819,132,2.033,147,2.819,148,4.134,150,3.992,151,1.823,153,4.636,154,2.286,162,1.494,163,2.104,204,2.104,208,1.108,218,1.953,222,1.471,257,2.033,273,1.953,306,1.36,310,1.649,311,2.811,316,2.975,319,1.649,321,4.746,322,2.015,324,2.421,327,1.225,334,2.98,344,2.033,348,2.514,351,1.953,354,2.321,356,2.819,383,2.435,384,3.763,385,1.823,400,1.518,401,2.514,418,2.514,425,1.225,446,3.238,472,1.435,477,1.651,541,2.104,550,1.953,591,2.765,606,2.286,616,2.286,645,2.104,757,1.953,781,1.953,788,2.286,793,2.98,797,3.238,803,1.709,808,3.763,810,2.286,855,2.514,886,3.56,887,2.286,888,2.819,892,2.819,1029,2.819,1030,2.819,1036,2.819,1052,2.819,1119,1.953,1156,3.56,1167,2.819,1169,3.992,1178,3.759,1184,2.819,1186,4.636,1393,2.819,1416,3.992,1437,2.819,1444,3.759,1472,2.286,1522,5.265,1542,3.992,1546,2.819,1560,4.636,1566,2.514,1636,3.992,1666,2.819,1683,3.992,1684,3.282,1685,7.05,1686,3.282,1687,3.282,1688,3.282,1689,4.648,1690,4.648,1691,2.819,1692,3.282,1693,2.819,1694,5.397,1695,6.434,1696,6.759,1697,4.648,1698,3.282,1699,3.282,1700,4.648,1701,5.397,1702,3.282,1703,4.648,1704,4.648,1705,4.648,1706,4.648,1707,4.648,1708,5.87,1709,3.992,1710,3.282,1711,3.282,1712,4.648,1713,4.648,1714,5.397,1715,3.282,1716,4.648,1717,4.648,1718,2.819,1719,3.282,1720,3.282,1721,3.282,1722,3.282,1723,3.282,1724,4.648,1725,4.648,1726,4.648,1727,2.514,1728,3.282,1729,3.282,1730,4.648,1731,3.282,1732,3.282,1733,4.648,1734,3.282,1735,3.282,1736,3.282,1737,2.819,1738,3.282,1739,3.282,1740,3.282,1741,3.282,1742,3.282,1743,3.282,1744,3.282,1745,4.648,1746,3.282,1747,4.928,1748,2.819,1749,3.282,1750,4.648,1751,3.282,1752,3.282,1753,3.282,1754,3.282,1755,3.282,1756,3.282,1757,3.282,1758,3.282,1759,2.819,1760,3.282,1761,3.282,1762,3.282,1763,3.282,1764,3.282,1765,3.282,1766,4.648,1767,3.282,1768,3.282,1769,3.282,1770,4.648,1771,4.648,1772,3.282,1773,3.282,1774,3.282,1775,3.282,1776,3.282,1777,3.282,1778,3.282,1779,4.648,1780,3.282,1781,3.282,1782,3.282,1783,3.282,1784,3.282,1785,3.282,1786,3.282,1787,3.282,1788,3.282,1789,3.282,1790,2.819,1791,3.282,1792,3.282,1793,3.282,1794,3.282,1795,2.819,1796,2.819,1797,3.282,1798,3.759,1799,2.819,1800,2.819,1801,2.514,1802,2.514,1803,2.819]],["title/license.html",[1798,3.51]],["body/license.html",[4,0.374,5,0.271,7,0.256,13,0.809,18,0.014,19,0.52,24,1.204,31,1.947,32,0.273,41,0.074,46,0.008,47,0.008,66,1.204,83,1.204,84,1.661,85,1.39,87,1.51,99,0.859,118,2.611,119,1.39,120,1.204,121,1.39,133,2.15,143,4.22,154,2.933,164,3.009,191,0.898,192,1.686,248,1.51,257,2.088,263,2.611,297,2.028,318,1.003,319,0.769,320,1.204,324,1.129,334,3.06,335,1.129,342,2.339,358,5.127,377,1.204,380,4.733,382,2.185,400,2.4,418,2.611,422,1.862,427,1.129,431,2.7,435,2.185,437,2.933,440,1.39,442,1.29,444,1.204,449,1.51,481,1.842,550,2.505,573,2.185,575,1.51,639,1.129,649,3.06,674,1.51,803,1.129,855,3.226,920,1.51,943,1.862,955,4.1,965,1.862,1001,5.274,1009,1.661,1017,3.656,1178,1.51,1229,1.51,1255,1.862,1268,1.862,1269,1.51,1308,1.862,1309,1.661,1352,1.862,1383,1.862,1414,2.927,1444,1.51,1460,2.927,1472,4.377,1519,3.617,1522,2.611,1535,1.862,1541,4.457,1556,2.927,1564,2.927,1566,1.661,1638,1.862,1647,1.862,1680,2.927,1691,1.862,1693,1.862,1709,3.617,1718,3.617,1727,1.661,1737,5.955,1747,1.661,1748,1.862,1759,1.862,1790,3.617,1795,1.862,1796,1.862,1798,5.142,1799,1.862,1800,5.274,1801,3.656,1802,3.226,1803,1.862,1804,2.168,1805,2.168,1806,2.168,1807,6.14,1808,6.605,1809,4.774,1810,5.189,1811,6.759,1812,6.284,1813,2.168,1814,6.284,1815,6.513,1816,5.189,1817,6.284,1818,2.168,1819,5.189,1820,2.168,1821,2.168,1822,2.168,1823,4.774,1824,2.168,1825,4.1,1826,3.408,1827,2.168,1828,4.211,1829,3.408,1830,3.408,1831,3.408,1832,2.168,1833,3.408,1834,2.168,1835,2.168,1836,2.168,1837,2.168,1838,2.168,1839,2.168,1840,4.211,1841,2.168,1842,3.408,1843,6.605,1844,2.168,1845,5.509,1846,4.774,1847,3.408,1848,2.168,1849,2.168,1850,2.168,1851,2.168,1852,2.168,1853,4.211,1854,2.168,1855,2.168,1856,3.408,1857,2.168,1858,6.934,1859,6.981,1860,2.168,1861,2.168,1862,2.168,1863,2.168,1864,2.168,1865,2.168,1866,3.408,1867,2.168,1868,2.168,1869,2.168,1870,2.168,1871,4.774,1872,5.189,1873,2.168,1874,3.408,1875,4.774,1876,3.408,1877,5.189,1878,3.408,1879,2.168,1880,2.168,1881,4.211,1882,2.168,1883,2.168,1884,2.168,1885,2.168,1886,3.408,1887,2.168,1888,2.168,1889,4.211,1890,2.168,1891,2.168,1892,2.168,1893,2.168,1894,2.168,1895,4.774,1896,6.284,1897,2.168,1898,2.168,1899,3.408,1900,4.211,1901,3.408,1902,3.408,1903,3.408,1904,3.408,1905,3.408,1906,3.408,1907,4.211,1908,3.408,1909,3.408,1910,3.408,1911,3.408,1912,2.168,1913,3.408,1914,2.168,1915,2.168,1916,5.189,1917,5.763,1918,4.211,1919,3.408,1920,2.168,1921,3.408,1922,3.408,1923,4.211,1924,3.408,1925,2.168,1926,2.168,1927,2.168,1928,4.211,1929,2.168,1930,2.168,1931,2.168,1932,3.408,1933,2.168,1934,2.168,1935,2.168,1936,2.168,1937,2.168,1938,2.168,1939,2.168,1940,3.408,1941,2.168,1942,2.168,1943,2.168,1944,2.168,1945,2.168,1946,2.168,1947,2.168,1948,2.168,1949,2.168,1950,2.168,1951,2.168,1952,2.168,1953,2.168,1954,5.969,1955,2.168,1956,2.168,1957,2.168,1958,2.168,1959,2.168,1960,4.774,1961,3.408,1962,4.774,1963,2.168,1964,2.168,1965,2.168,1966,2.168,1967,4.211,1968,2.168,1969,2.168,1970,3.408,1971,3.408,1972,2.168,1973,2.168,1974,2.168,1975,2.168,1976,2.168,1977,2.168,1978,2.168,1979,2.168,1980,2.168,1981,2.168,1982,2.168,1983,2.168,1984,2.168,1985,2.168,1986,2.168,1987,2.168,1988,2.168,1989,2.168,1990,2.168,1991,2.168,1992,2.168,1993,3.408,1994,2.168,1995,3.408,1996,2.168,1997,2.168,1998,2.168,1999,2.168,2000,2.168,2001,2.168,2002,2.168,2003,2.168,2004,4.774,2005,4.211,2006,4.211,2007,4.211,2008,3.408,2009,4.211,2010,3.408,2011,3.408,2012,3.408,2013,2.168,2014,2.168,2015,2.168,2016,2.168,2017,2.168,2018,2.168,2019,3.408,2020,2.168,2021,2.168,2022,2.168,2023,5.189,2024,2.168,2025,2.168,2026,2.168,2027,2.168,2028,2.168,2029,2.168,2030,2.168,2031,2.168,2032,2.168,2033,5.189,2034,2.168,2035,2.168,2036,2.168,2037,2.168,2038,2.168,2039,2.168,2040,2.168,2041,2.168,2042,2.168,2043,2.168,2044,2.168,2045,2.168,2046,2.168,2047,2.168,2048,4.211,2049,2.168,2050,2.168,2051,2.168,2052,3.408,2053,2.168,2054,2.168,2055,2.168,2056,2.168,2057,2.168,2058,2.168,2059,2.168,2060,2.168,2061,2.168,2062,2.168,2063,2.168,2064,2.168,2065,2.168,2066,2.168,2067,2.168,2068,3.408,2069,2.168,2070,2.168,2071,3.408,2072,2.168,2073,2.168,2074,2.168,2075,2.168,2076,2.168,2077,2.168,2078,2.168,2079,2.168,2080,2.168,2081,1.862,2082,1.862,2083,2.168,2084,2.168,2085,2.168,2086,2.168,2087,2.168]],["title/modules.html",[50,2.33]],["body/modules.html",[18,0.016,46,0.016,47,0.016,49,3.979,50,2.642,60,3.662,61,3.662,62,3.662,63,3.398,551,3.979,1420,3.979,1429,6.34,1727,4.375,1747,5.654,2088,7.382,2089,7.473]],["title/overview.html",[549,2.998]],["body/overview.html",[2,2.451,18,0.019,36,3.85,46,0.015,47,0.015,48,1.589,49,5.244,50,2.177,51,1.95,52,2.8,53,2.8,54,2.451,55,2.614,56,2.8,57,4.042,58,4.042,59,4.042,60,4.775,61,4.148,62,4.485,63,4.312,64,3.52,65,2.307,66,2.614,81,2.177,227,4.312,238,3.774,269,4.042,271,4.042,272,4.042,273,3.85,307,1.186,427,2.451,511,2.8,519,3.37,522,3.37,525,3.37,549,2.8,628,2.614,639,2.451,701,4.312,1123,4.042,1124,4.042,1125,4.148,1229,3.278,1420,5.218,1421,4.042,1422,4.042,1423,4.042,1424,4.042,1438,4.042,1439,4.042,1440,4.042,2090,5.916,2091,4.707,2092,4.707]],["title/properties.html",[317,1.231,806,1.97]],["body/properties.html",[7,0.683,18,0.019,46,0.017,47,0.017,148,4.425,154,4.024,310,2.05,316,2.672,317,1.604,383,2.271,411,3.704,996,4.962,1683,4.962,1798,4.024,1801,4.425,1802,4.425,2081,4.962,2082,4.962,2093,5.777,2094,5.777,2095,5.777,2096,5.777]],["title/routes.html",[552,2.998]],["body/routes.html",[18,0.017,46,0.017,47,0.017,552,3.594]],["title/miscellaneous/typealiases.html",[1627,1.828,2097,4.435]],["body/miscellaneous/typealiases.html",[14,0.86,18,0.016,46,0.016,47,0.016,100,1.186,132,3.009,162,1.738,222,1.118,236,2.501,306,2.241,308,3.467,310,1.919,314,4.093,316,3.182,329,3.004,335,2.817,339,3.355,352,4.487,369,4.792,370,3.355,377,4.041,378,4.792,379,4.792,380,4.411,381,4.792,410,3.767,423,4.934,450,3.767,1627,3.218,1630,4.142,2098,5.408,2099,4.645,2100,4.645]],["title/miscellaneous/variables.html",[103,3.089,1627,1.828]],["body/miscellaneous/variables.html",[14,0.706,18,0.019,46,0.014,47,0.014,48,1.499,68,2.312,96,1.583,100,1.001,103,3.092,131,3.447,132,3.076,162,1.832,168,2.641,176,3.168,190,2.128,192,1.744,208,1.924,222,1.373,236,2.636,306,1.839,308,2.846,310,2.023,313,2.636,314,3.746,316,2.912,318,2.053,319,2.023,325,2.465,329,2.465,335,2.969,370,3.579,372,3.971,382,4.037,383,2.475,384,4.037,385,3.497,386,3.971,387,3.813,410,3.092,411,2.846,424,3.813,450,3.092,457,4.366,458,4.896,459,3.971,485,3.086,486,2.465,765,2.969,843,3.655,844,3.655,850,3.092,856,3.813,866,3.092,867,3.655,871,3.813,872,3.813,873,3.813,874,3.813,875,3.813,876,3.813,877,3.813,878,3.813,880,3.813,881,3.813,920,3.971,924,3.4,925,4.366,978,5.387,1004,4.896,1326,4.366,1348,4.366,1510,3.4,1511,4.366,1521,4.366,1590,4.896,1591,4.896,1592,4.896,1593,4.896,1627,2.641,1630,3.4,1825,4.896,2099,3.813,2100,4.896,2101,5.701,2102,4.439,2103,4.439,2104,4.439,2105,5.701,2106,5.701]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":628,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{},"overview.html":{}}}],["0.125rem",{"_index":677,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.14.2",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["0.15s",{"_index":662,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.2.2",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["0.25rem",{"_index":686,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.375rem",{"_index":684,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.3s",{"_index":621,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.5.1",{"_index":1618,"title":{},"body":{"dependencies.html":{}}}],["0.5.17",{"_index":1616,"title":{},"body":{"dependencies.html":{}}}],["0.5px",{"_index":654,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.5rem",{"_index":617,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.7",{"_index":669,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.75rem",{"_index":671,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.875rem",{"_index":607,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0/1",{"_index":1577,"title":{},"body":{"coverage.html":{}}}],["0/25",{"_index":1580,"title":{},"body":{"coverage.html":{}}}],["0/28",{"_index":1579,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1581,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1575,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1578,"title":{},"body":{"coverage.html":{}}}],["004085",{"_index":692,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0056b3",{"_index":691,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["007bff",{"_index":665,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1",{"_index":639,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{},"license.html":{},"overview.html":{}}}],["1.0.0",{"_index":2093,"title":{},"body":{"properties.html":{}}}],["1.5rem",{"_index":656,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1.6.6",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1587,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1489,"title":{},"body":{"injectables/UserService.html":{}}}],["10/10",{"_index":1595,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1582,"title":{},"body":{"coverage.html":{}}}],["100vh",{"_index":578,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1024",{"_index":1056,"title":{},"body":{"controllers/HealthController.html":{}}}],["10px",{"_index":1003,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["11.0.0",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1609,"title":{},"body":{"dependencies.html":{}}}],["11.0.3",{"_index":1610,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1611,"title":{},"body":{"dependencies.html":{}}}],["11.1.7",{"_index":1606,"title":{},"body":{"dependencies.html":{}}}],["11.2.1",{"_index":1613,"title":{},"body":{"dependencies.html":{}}}],["128",{"_index":1060,"title":{},"body":{"controllers/HealthController.html":{}}}],["12px",{"_index":678,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["13/13",{"_index":1596,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1360,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["1c7430",{"_index":699,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1e7e34",{"_index":698,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1fr",{"_index":635,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1h",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["1px",{"_index":602,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1rem",{"_index":596,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["2",{"_index":1368,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["2.0",{"_index":1802,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["2/2",{"_index":1583,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2092,"title":{},"body":{"overview.html":{}}}],["2004",{"_index":1805,"title":{},"body":{"license.html":{}}}],["200px",{"_index":624,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["201",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["2025",{"_index":2080,"title":{},"body":{"license.html":{}}}],["20px",{"_index":998,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["24",{"_index":1660,"title":{},"body":{"miscellaneous/functions.html":{}}}],["250px",{"_index":642,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["28a745",{"_index":615,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["2rem",{"_index":597,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["3",{"_index":1561,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["3/3",{"_index":1585,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":713,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"controllers/HealthController.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["3000",{"_index":110,"title":{},"body":{"injectables/AppService.html":{}}}],["300ms",{"_index":714,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["4",{"_index":2091,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1605,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1607,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1584,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["401",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["409",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["495057",{"_index":648,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["4e555b",{"_index":696,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["4px",{"_index":661,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["5/5",{"_index":1588,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":674,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"license.html":{}}}],["500",{"_index":687,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["5000",{"_index":1054,"title":{},"body":{"controllers/HealthController.html":{}}}],["545b62",{"_index":695,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["6",{"_index":2090,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["600",{"_index":647,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["60f6c2d3a8341c8f0a5865c4",{"_index":923,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["60f6c2d3a8341c8f0a5865c4'})@ismongoid({message",{"_index":919,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["60f72b2f9b1e8d001c8f4e80",{"_index":904,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["60f72b2f9b1e8d001c8f4e81",{"_index":899,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["64",{"_index":1323,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["64)@matches(/(?=.*[a",{"_index":1311,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["6c757d",{"_index":609,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["8",{"_index":535,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["8.19.2",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1229,"title":{},"body":{"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"license.html":{},"overview.html":{}}}],["9/9",{"_index":1600,"title":{},"body":{"coverage.html":{}}}],["9]+)*$/.test(slug",{"_index":1230,"title":{},"body":{"injectables/PostService.html":{}}}],["_",{"_index":1494,"title":{},"body":{"injectables/UserService.html":{}}}],["__v",{"_index":1234,"title":{},"body":{"injectables/PostService.html":{}}}],["__v\").exec",{"_index":1223,"title":{},"body":{"injectables/PostService.html":{}}}],["_hasusernameoremail",{"_index":1102,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["_id",{"_index":412,"title":{},"body":{"classes/BlogPostComment.html":{},"injectables/PostService.html":{}}}],["_id\").exec",{"_index":1253,"title":{},"body":{"injectables/PostService.html":{}}}],["a.click",{"_index":834,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["a.download",{"_index":832,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["a.href",{"_index":831,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["a.style.display",{"_index":1572,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["above",{"_index":1985,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":2050,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":2048,"title":{},"body":{"license.html":{}}}],["acceptsuggestiononenter",{"_index":1376,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["access",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accessors",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["accesstoken",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["account",{"_index":1106,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["accounts",{"_index":1786,"title":{},"body":{"index.html":{}}}],["act",{"_index":2056,"title":{},"body":{"license.html":{}}}],["acting",{"_index":1821,"title":{},"body":{"license.html":{}}}],["action",{"_index":794,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["actions",{"_index":616,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["active",{"_index":802,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["acts",{"_index":2031,"title":{},"body":{"license.html":{}}}],["add",{"_index":1522,"title":{},"body":{"injectables/ZipExportService.html":{},"index.html":{},"license.html":{}}}],["addcomment",{"_index":1135,"title":{},"body":{"injectables/PostService.html":{}}}],["addcomment(postid",{"_index":1151,"title":{},"body":{"injectables/PostService.html":{}}}],["added",{"_index":1155,"title":{},"body":{"injectables/PostService.html":{}}}],["addendum",{"_index":1976,"title":{},"body":{"license.html":{}}}],["additional",{"_index":1541,"title":{},"body":{"injectables/ZipExportService.html":{},"license.html":{}}}],["additions",{"_index":1873,"title":{},"body":{"license.html":{}}}],["address",{"_index":452,"title":{},"body":{"classes/BlogPostUser.html":{},"classes/RegisterUserDto.html":{}}}],["adds",{"_index":1153,"title":{},"body":{"injectables/PostService.html":{}}}],["adipiscing",{"_index":877,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["advised",{"_index":2046,"title":{},"body":{"license.html":{}}}],["again",{"_index":804,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["against",{"_index":1460,"title":{},"body":{"injectables/UserService.html":{},"license.html":{}}}],["agree",{"_index":2059,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":2007,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1990,"title":{},"body":{"license.html":{}}}],["alias",{"_index":1598,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":2098,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":592,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["alleging",{"_index":1937,"title":{},"body":{"license.html":{}}}],["allowing",{"_index":1452,"title":{},"body":{"injectables/UserService.html":{}}}],["allows",{"_index":356,"title":{},"body":{"classes/BlogPost.html":{},"index.html":{}}}],["alone",{"_index":1929,"title":{},"body":{"license.html":{}}}],["along",{"_index":1968,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":1975,"title":{},"body":{"license.html":{}}}],["already",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["always",{"_index":1373,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["amet",{"_index":875,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["amount",{"_index":1676,"title":{},"body":{"miscellaneous/functions.html":{}}}],["and/or",{"_index":2053,"title":{},"body":{"license.html":{}}}],["angular/common",{"_index":1431,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["angular/common/http",{"_index":518,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{}}}],["angular/core",{"_index":516,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{}}}],["angular/forms",{"_index":1433,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["angular/platform",{"_index":1428,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["annotations",{"_index":1863,"title":{},"body":{"license.html":{}}}],["apache",{"_index":1801,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["api.to",{"_index":149,"title":{},"body":{"injectables/AppService.html":{}}}],["api/session/${this.sessionid}/docs",{"_index":718,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["api/v1",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/v1/posts",{"_index":1730,"title":{},"body":{"index.html":{}}}],["api/v1/posts/:id",{"_index":1733,"title":{},"body":{"index.html":{}}}],["api/v1/posts/:id/relations",{"_index":1734,"title":{},"body":{"index.html":{}}}],["api/v1/posts/relation/?sourcepostid&relationpostid",{"_index":1735,"title":{},"body":{"index.html":{}}}],["api/v1/posts?page&limit",{"_index":1731,"title":{},"body":{"index.html":{}}}],["api/v1/posts?slug=:slug",{"_index":1732,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":862,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":849,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiresponse",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{}}}],["apitags(\"authentication",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"health",{"_index":1047,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"information",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["app",{"_index":1013,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["app.controller",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appear",{"_index":1973,"title":{},"body":{"license.html":{}}}],["appearance",{"_index":1539,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["appendix",{"_index":1856,"title":{},"body":{"license.html":{}}}],["apple",{"_index":581,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["applicable",{"_index":2005,"title":{},"body":{"license.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applies",{"_index":1638,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["apply",{"_index":2068,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":49,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1647,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["appropriateness",{"_index":2018,"title":{},"body":{"license.html":{}}}],["appservice",{"_index":36,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archives",{"_index":2079,"title":{},"body":{"license.html":{}}}],["args",{"_index":975,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["args.slice(0",{"_index":977,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["args[args.length",{"_index":976,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["arial",{"_index":997,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["arising",{"_index":2036,"title":{},"body":{"license.html":{}}}],["array",{"_index":333,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["ascending",{"_index":1742,"title":{},"body":{"index.html":{}}}],["asserted",{"_index":2065,"title":{},"body":{"license.html":{}}}],["associated",{"_index":320,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"license.html":{}}}],["assume",{"_index":2020,"title":{},"body":{"license.html":{}}}],["async",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{}}}],["attach",{"_index":2069,"title":{},"body":{"license.html":{}}}],["attached",{"_index":1855,"title":{},"body":{"license.html":{}}}],["attempting",{"_index":1170,"title":{},"body":{"injectables/PostService.html":{}}}],["attribute.name",{"_index":1408,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["attribute.value",{"_index":1410,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["attribution",{"_index":1960,"title":{},"body":{"license.html":{}}}],["auth",{"_index":1752,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":1067,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/login",{"_index":1482,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/dto/register",{"_index":1483,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/dto/update",{"_index":1481,"title":{},"body":{"injectables/UserService.html":{}}}],["auth0,oauth2",{"_index":1753,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":158,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1072,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/LoginUserDto.html":{}}}],["authenticated",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{}}}],["authenticates",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authenticating",{"_index":1078,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authentication",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginUserDto.html":{},"index.html":{}}}],["authguard",{"_index":1074,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":1073,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":60,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":411,"title":{},"body":{"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"injectables/PostService.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorization",{"_index":1082,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authorized",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostService.html":{},"license.html":{}}}],["authorship",{"_index":1853,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":227,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":414,"title":{},"body":{"classes/BlogPostComment.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["autoclosingbrackets",{"_index":1372,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["autoclosingpairs",{"_index":1415,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["autoclosingquotes",{"_index":1374,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["automatically",{"_index":399,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["automaticlayout",{"_index":1355,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["available",{"_index":1727,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["await",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{}}}],["b",{"_index":1950,"title":{},"body":{"license.html":{}}}],["background",{"_index":598,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["backup",{"_index":1562,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["bad",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["badge",{"_index":676,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["badrequestexception",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["based",{"_index":119,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/GetRelatedPostsDto.html":{},"index.html":{},"license.html":{}}}],["bash",{"_index":1547,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["basic",{"_index":996,"title":{},"body":{"injectables/HbsRenderService.html":{},"properties.html":{}}}],["basis",{"_index":2008,"title":{},"body":{"license.html":{}}}],["bcrypt",{"_index":1480,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":1497,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(password",{"_index":1488,"title":{},"body":{"injectables/UserService.html":{}}}],["before",{"_index":1565,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["behalf",{"_index":1877,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":1669,"title":{},"body":{"miscellaneous/functions.html":{}}}],["being",{"_index":917,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["belongs",{"_index":1649,"title":{},"body":{"miscellaneous/functions.html":{}}}],["below",{"_index":1857,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":1839,"title":{},"body":{"license.html":{}}}],["better",{"_index":1779,"title":{},"body":{"index.html":{}}}],["between",{"_index":591,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["bind",{"_index":1870,"title":{},"body":{"license.html":{}}}],["blinkmacsystemfont",{"_index":582,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["blob",{"_index":813,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["blockcomment",{"_index":1413,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["blog",{"_index":310,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blogpost",{"_index":306,"title":{"classes/BlogPost.html":{}},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blogpost.createdby",{"_index":409,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpost.isnew",{"_index":407,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpost.name",{"_index":1131,"title":{},"body":{"modules/PostModule.html":{}}}],["blogpost.slug",{"_index":405,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpost.updatedby",{"_index":408,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpostcomment",{"_index":329,"title":{"classes/BlogPostComment.html":{}},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blogpostcommentdocument",{"_index":423,"title":{},"body":{"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostcommentschema",{"_index":372,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostdocument",{"_index":352,"title":{},"body":{"classes/BlogPost.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostmodel",{"_index":1150,"title":{},"body":{"injectables/PostService.html":{}}}],["blogpostsanitizedresponse",{"_index":426,"title":{"interfaces/BlogPostSanitizedResponse.html":{}},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["blogpostschema",{"_index":386,"title":{},"body":{"classes/BlogPost.html":{},"modules/PostModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostschema.pre(\"save",{"_index":403,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogposttitle",{"_index":388,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["blogpostuser",{"_index":236,"title":{"classes/BlogPostUser.html":{}},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostUser.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blogpostuser.name",{"_index":376,"title":{},"body":{"classes/BlogPost.html":{},"modules/UserModule.html":{}}}],["blogpostuserdocument",{"_index":339,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostuserschema",{"_index":459,"title":{},"body":{"classes/BlogPostUser.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostuser})@apiresponse({status",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["body",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["boilerplate",{"_index":2070,"title":{},"body":{"license.html":{}}}],["bold",{"_index":614,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["boolean",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1642,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstraps",{"_index":1635,"title":{},"body":{"miscellaneous/functions.html":{}}}],["border",{"_index":600,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["both",{"_index":890,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["bottom",{"_index":601,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["brackets",{"_index":1414,"title":{},"body":{"injectables/TemplateEditorService.html":{},"license.html":{}}}],["break",{"_index":952,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["browse",{"_index":2089,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1429,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"modules.html":{}}}],["browsermodule",{"_index":1427,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["btn",{"_index":683,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["bug",{"_index":1792,"title":{},"body":{"index.html":{}}}],["build",{"_index":1725,"title":{},"body":{"index.html":{}}}],["built",{"_index":1686,"title":{},"body":{"index.html":{}}}],["c",{"_index":1957,"title":{},"body":{"license.html":{}}}],["call",{"_index":807,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["callback",{"_index":1345,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["cant",{"_index":1272,"title":{},"body":{"injectables/PostService.html":{}}}],["carry",{"_index":1952,"title":{},"body":{"license.html":{}}}],["case",{"_index":951,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{}}}],["catch",{"_index":728,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["cause",{"_index":1830,"title":{},"body":{"license.html":{}}}],["center",{"_index":594,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["change",{"_index":759,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["changed",{"_index":1956,"title":{},"body":{"license.html":{}}}],["changes",{"_index":1567,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["character",{"_index":1309,"title":{},"body":{"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["charge",{"_index":1907,"title":{},"body":{"license.html":{}}}],["check",{"_index":1008,"title":{},"body":{"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"miscellaneous/functions.html":{}}}],["checking",{"_index":1477,"title":{},"body":{"injectables/UserService.html":{}}}],["checks",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"miscellaneous/functions.html":{}}}],["choose",{"_index":1693,"title":{},"body":{"index.html":{},"license.html":{}}}],["circular",{"_index":471,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["claim",{"_index":1934,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1924,"title":{},"body":{"license.html":{}}}],["class",{"_index":41,"title":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":307,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["clear",{"_index":768,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["cleartimeout(this.savetimeout",{"_index":733,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["click",{"_index":1022,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["clone",{"_index":1704,"title":{},"body":{"index.html":{}}}],["close",{"_index":1417,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["cluster_appmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":1123,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":1124,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_templateplaygroundmodule",{"_index":1421,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"overview.html":{}}}],["cluster_templateplaygroundmodule_bootstrap",{"_index":1422,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"overview.html":{}}}],["cluster_templateplaygroundmodule_declarations",{"_index":1423,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"overview.html":{}}}],["cluster_templateplaygroundmodule_providers",{"_index":1424,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1438,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1439,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1440,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cms",{"_index":148,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"properties.html":{}}}],["code",{"_index":550,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["collections",{"_index":1662,"title":{},"body":{"miscellaneous/functions.html":{}}}],["color",{"_index":608,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["colors",{"_index":1557,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["column",{"_index":576,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["columns",{"_index":631,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["combination",{"_index":1930,"title":{},"body":{"license.html":{}}}],["comment",{"_index":335,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["comment._id.tostring",{"_index":1295,"title":{},"body":{"injectables/PostService.html":{}}}],["comment.dto",{"_index":1195,"title":{},"body":{"injectables/PostService.html":{}}}],["comment.dto.stub.ts",{"_index":1590,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":845,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:21",{"_index":854,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:33",{"_index":861,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.schema",{"_index":373,"title":{},"body":{"classes/BlogPost.html":{}}}],["commentdoesnotexist",{"_index":460,"title":{"classes/CommentDoesNotExist.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["commentdoesnotexist(`comment",{"_index":1296,"title":{},"body":{"injectables/PostService.html":{}}}],["commentid",{"_index":1165,"title":{},"body":{"injectables/PostService.html":{}}}],["commentindex",{"_index":1293,"title":{},"body":{"injectables/PostService.html":{}}}],["commentinsufficientpermissionserror",{"_index":483,"title":{"classes/CommentInsufficientPermissionsError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["commentinsufficientpermissionserror(\"you",{"_index":1297,"title":{},"body":{"injectables/PostService.html":{}}}],["comments",{"_index":322,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"injectables/TemplateEditorService.html":{},"index.html":{}}}],["commercial",{"_index":2043,"title":{},"body":{"license.html":{}}}],["common",{"_index":943,"title":{},"body":{"injectables/HbsRenderService.html":{},"license.html":{}}}],["commonmodule",{"_index":1430,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["communication",{"_index":1881,"title":{},"body":{"license.html":{}}}],["community",{"_index":1711,"title":{},"body":{"index.html":{}}}],["compare",{"_index":946,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/UserService.html":{}}}],["comparepassword",{"_index":1445,"title":{},"body":{"injectables/UserService.html":{}}}],["comparepassword(password",{"_index":1455,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":1458,"title":{},"body":{"injectables/UserService.html":{}}}],["compiled",{"_index":1851,"title":{},"body":{"license.html":{}}}],["complete",{"_index":991,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["completed",{"_index":1770,"title":{},"body":{"index.html":{}}}],["compliance",{"_index":2083,"title":{},"body":{"license.html":{}}}],["complies",{"_index":1980,"title":{},"body":{"license.html":{}}}],["compodoc",{"_index":543,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["compodocconfig",{"_index":484,"title":{"interfaces/CompoDocConfig.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{}}}],["component",{"_index":511,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{},"overview.html":{}}}],["components",{"_index":969,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["compose",{"_index":1724,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":2041,"title":{},"body":{"license.html":{}}}],["conditional",{"_index":957,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["conditions",{"_index":1808,"title":{},"body":{"license.html":{}}}],["config",{"_index":540,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["configmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["configuration",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"license.html":{}}}],["confirm('are",{"_index":790,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["conflictexception",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["conflictexception(\"user",{"_index":1487,"title":{},"body":{"injectables/UserService.html":{}}}],["conflicts",{"_index":468,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["connection",{"_index":1716,"title":{},"body":{"index.html":{}}}],["consectetur",{"_index":876,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["consequential",{"_index":2035,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":2055,"title":{},"body":{"license.html":{}}}],["console.error('error",{"_index":729,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.error('no",{"_index":801,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.log('creating",{"_index":805,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.log('reset",{"_index":799,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.log('session",{"_index":739,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.log('template",{"_index":837,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.warn(`no",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["conspicuously",{"_index":1892,"title":{},"body":{"license.html":{}}}],["const",{"_index":135,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{}}}],["constitutes",{"_index":1938,"title":{},"body":{"license.html":{}}}],["construct",{"_index":819,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["constructor",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{}}}],["constructor(@injectmodel(blogpost.name",{"_index":1205,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(@injectmodel(blogpostuser.name",{"_index":1484,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(blogpostmodel",{"_index":1146,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(configservice",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(message",{"_index":465,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["constructor(private",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(usermodel",{"_index":1450,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["constructors",{"_index":559,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["constructs",{"_index":1149,"title":{},"body":{"injectables/PostService.html":{}}}],["construed",{"_index":1977,"title":{},"body":{"license.html":{}}}],["contain",{"_index":1306,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["contained",{"_index":1965,"title":{},"body":{"license.html":{}}}],["container",{"_index":679,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["containers",{"_index":1726,"title":{},"body":{"index.html":{}}}],["containing",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{}}}],["contains",{"_index":1533,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["content",{"_index":319,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contentdisposition",{"_index":820,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["contentdisposition.match(/filename",{"_index":825,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["contents",{"_index":1535,"title":{},"body":{"injectables/ZipExportService.html":{},"license.html":{}}}],["context",{"_index":959,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["contract",{"_index":1831,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":1789,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":1872,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":1928,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":1790,"title":{},"body":{"index.html":{},"license.html":{}}}],["contributor",{"_index":1896,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":1939,"title":{},"body":{"license.html":{}}}],["control",{"_index":1823,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":1824,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["controller(\"/api/v1",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"health",{"_index":1048,"title":{},"body":{"controllers/HealthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["conversions",{"_index":1852,"title":{},"body":{"license.html":{}}}],["copies",{"_index":1945,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1718,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":1815,"title":{},"body":{"license.html":{}}}],["correct",{"_index":1478,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["correspond",{"_index":901,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["counterclaim",{"_index":1935,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":553,"title":{"coverage.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{}}}],["create",{"_index":383,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"injectables/HbsRenderService.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["createblogpost",{"_index":1136,"title":{},"body":{"injectables/PostService.html":{}}}],["createblogpost(@body",{"_index":1206,"title":{},"body":{"injectables/PostService.html":{}}}],["createblogpost(createpostdto",{"_index":1157,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdto",{"_index":843,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createcommentdto.author",{"_index":1289,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdto.content",{"_index":1290,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdtostub",{"_index":1591,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":344,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{},"index.html":{}}}],["createdat",{"_index":1248,"title":{},"body":{"injectables/PostService.html":{}}}],["createdblogpostresponse",{"_index":443,"title":{"interfaces/CreatedBlogPostResponse.html":{}},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createdby",{"_index":323,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["createpostdto",{"_index":867,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createpostdtostub",{"_index":1593,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createrelation",{"_index":1137,"title":{},"body":{"injectables/PostService.html":{}}}],["createrelation(sourcepostid",{"_index":1161,"title":{},"body":{"injectables/PostService.html":{}}}],["createrelationshipdto",{"_index":884,"title":{"classes/CreateRelationshipDto.html":{}},"body":{"classes/CreateRelationshipDto.html":{},"coverage.html":{}}}],["creates",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["createsession",{"_index":734,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["creating",{"_index":846,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{}}}],["creation",{"_index":445,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["creator",{"_index":402,"title":{},"body":{"classes/BlogPost.html":{}}}],["credentials",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["credentials.'})@apiresponse({status",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["cross",{"_index":1933,"title":{},"body":{"license.html":{}}}],["css",{"_index":1388,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["current",{"_index":348,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"index.html":{}}}],["cursor",{"_index":658,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["custom",{"_index":1119,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/PostError.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["customary",{"_index":1999,"title":{},"body":{"license.html":{}}}],["customfavicon",{"_index":488,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["customization",{"_index":1553,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["customization.html",{"_index":1570,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["customize",{"_index":1555,"title":{},"body":{"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{}}}],["customized",{"_index":1534,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["customizing",{"_index":1538,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["d",{"_index":1963,"title":{},"body":{"license.html":{}}}],["damages",{"_index":2033,"title":{},"body":{"license.html":{}}}],["dark",{"_index":546,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["data",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":385,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":324,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/CompoDocConfig.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{},"license.html":{}}}],["date:'short",{"_index":539,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["ddd",{"_index":1000,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["debounce",{"_index":715,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["debounced",{"_index":758,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["declarations",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declare",{"_index":938,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["decoration",{"_index":688,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["decorator",{"_index":1120,"title":{},"body":{"classes/LoginUserDto.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["decorators/hasusernameoremail.decorator",{"_index":1115,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["dee2e6",{"_index":604,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["default",{"_index":131,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["defend",{"_index":2061,"title":{},"body":{"license.html":{}}}],["define",{"_index":847,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["defined",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"license.html":{}}}],["defines",{"_index":312,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{}}}],["definition",{"_index":382,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["definitions",{"_index":1383,"title":{},"body":{"injectables/TemplateEditorService.html":{},"license.html":{}}}],["delete",{"_index":1169,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["deletecomment",{"_index":1138,"title":{},"body":{"injectables/PostService.html":{}}}],["deletecomment(postid",{"_index":1164,"title":{},"body":{"injectables/PostService.html":{}}}],["deleted",{"_index":1168,"title":{},"body":{"injectables/PostService.html":{}}}],["deletepost",{"_index":1139,"title":{},"body":{"injectables/PostService.html":{}}}],["deletepost(id",{"_index":1173,"title":{},"body":{"injectables/PostService.html":{}}}],["deletes",{"_index":1167,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["deleting",{"_index":1133,"title":{},"body":{"injectables/PostService.html":{}}}],["deletion",{"_index":1256,"title":{},"body":{"injectables/PostService.html":{}}}],["deliberate",{"_index":2028,"title":{},"body":{"license.html":{}}}],["delimiter",{"_index":1409,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["demonstration",{"_index":1015,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["dependencies",{"_index":51,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/CompoDocConfig.html":{},"modules/PostModule.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployment",{"_index":1775,"title":{},"body":{"index.html":{}}}],["depth",{"_index":963,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["derivative",{"_index":1858,"title":{},"body":{"license.html":{}}}],["derived",{"_index":1860,"title":{},"body":{"license.html":{}}}],["describing",{"_index":2000,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":1894,"title":{},"body":{"license.html":{}}}],["desired",{"_index":1717,"title":{},"body":{"index.html":{}}}],["desk",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["destroy",{"_index":1328,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["details",{"_index":1156,"title":{},"body":{"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["determine",{"_index":1657,"title":{},"body":{"miscellaneous/functions.html":{}}}],["determining",{"_index":2017,"title":{},"body":{"license.html":{}}}],["developers",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["development",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["devinstructions",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["different",{"_index":1759,"title":{},"body":{"index.html":{},"license.html":{}}}],["direct",{"_index":1828,"title":{},"body":{"license.html":{}}}],["direction",{"_index":575,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"license.html":{}}}],["directly",{"_index":1105,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["directory",{"_index":1544,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["disable",{"_index":548,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableconstructors",{"_index":489,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablecoverage",{"_index":490,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disabledependencies",{"_index":491,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disabledomtree",{"_index":492,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablefilepath",{"_index":493,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablegraph",{"_index":494,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableinternal",{"_index":495,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablelifecyclehooks",{"_index":496,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablemaingraph",{"_index":497,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableoverview",{"_index":498,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableprivate",{"_index":499,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableproperties",{"_index":500,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableprotected",{"_index":501,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableroutesgraph",{"_index":502,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablesearch",{"_index":503,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablesourcecode",{"_index":504,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablestyletab",{"_index":505,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disabletemplatetab",{"_index":506,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disclaimer",{"_index":2003,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":1890,"title":{},"body":{"license.html":{}}}],["discussions",{"_index":1690,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1037,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1043,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":573,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"license.html":{}}}],["disposition",{"_index":822,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["distribute",{"_index":1916,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1967,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1810,"title":{},"body":{"license.html":{}}}],["docker",{"_index":1696,"title":{},"body":{"index.html":{}}}],["docs/.../hbs",{"_index":2102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["docs/.../template",{"_index":2104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["docs/.../zip",{"_index":2103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["docs/template",{"_index":485,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["doctype",{"_index":1402,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["document",{"_index":377,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/HbsRenderService.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["document.body.appendchild(a",{"_index":833,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["document.body.removechild(a",{"_index":835,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["document.createelement('a",{"_index":830,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["documentation",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["documentationmainname",{"_index":1010,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["documents",{"_index":314,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["doe",{"_index":866,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":1304,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["doe'})@isstring({message",{"_index":851,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["doesn't",{"_index":1237,"title":{},"body":{"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["dolor",{"_index":873,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["dom",{"_index":560,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["domain",{"_index":1645,"title":{},"body":{"miscellaneous/functions.html":{}}}],["don't",{"_index":2074,"title":{},"body":{"license.html":{}}}],["download",{"_index":541,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{},"index.html":{}}}],["downloadblob",{"_index":1512,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["downloadblob(blob",{"_index":1515,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["downloaded",{"_index":838,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["downloading",{"_index":839,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["dto",{"_index":1100,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":1194,"title":{},"body":{"injectables/PostService.html":{}}}],["dto/login",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["during",{"_index":1300,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["e.g",{"_index":447,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"miscellaneous/functions.html":{}}}],["e9ecef",{"_index":619,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["each",{"_index":334,"title":{},"body":{"classes/BlogPost.html":{},"injectables/HbsRenderService.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["ease",{"_index":622,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["easier",{"_index":2077,"title":{},"body":{"license.html":{}}}],["editor",{"_index":673,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["editor.service",{"_index":521,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{}}}],["editor.service.ts",{"_index":1326,"title":{},"body":{"injectables/TemplateEditorService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["editor.service.ts:10",{"_index":1347,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:12",{"_index":1339,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:167",{"_index":1333,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:59",{"_index":1342,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:67",{"_index":1344,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:71",{"_index":1335,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:87",{"_index":1340,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:9",{"_index":1346,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editorcontainer",{"_index":705,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["editorial",{"_index":1861,"title":{},"body":{"license.html":{}}}],["editorservice",{"_index":719,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["efficient",{"_index":1777,"title":{},"body":{"index.html":{}}}],["elaborations",{"_index":1864,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":1878,"title":{},"body":{"license.html":{}}}],["elementref",{"_index":514,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["elit",{"_index":878,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPostUser.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["empty",{"_index":853,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["empty.'})@isstring({message",{"_index":897,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["enabled",{"_index":1357,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["enabling",{"_index":1687,"title":{},"body":{"index.html":{}}}],["enclosed",{"_index":2071,"title":{},"body":{"license.html":{}}}],["end",{"_index":2067,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":810,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["endpoints",{"_index":1030,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["engage",{"_index":1689,"title":{},"body":{"index.html":{}}}],["enjoy",{"_index":155,"title":{},"body":{"injectables/AppService.html":{}}}],["enjoyed",{"_index":858,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["ensure",{"_index":1121,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["ensures",{"_index":916,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["ensuring",{"_index":891,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["entities",{"_index":1822,"title":{},"body":{"license.html":{}}}],["entity",{"_index":1817,"title":{},"body":{"license.html":{}}}],["env",{"_index":1714,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1713,"title":{},"body":{"index.html":{}}}],["environment",{"_index":86,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["eq",{"_index":1232,"title":{},"body":{"injectables/PostService.html":{}}}],["error",{"_index":462,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"miscellaneous/functions.html":{}}}],["error('failed",{"_index":741,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["error.message",{"_index":1007,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["errors",{"_index":475,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{}}}],["establish",{"_index":888,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"index.html":{}}}],["establishing",{"_index":903,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["etc",{"_index":1560,"title":{},"body":{"injectables/ZipExportService.html":{},"index.html":{}}}],["even",{"_index":2045,"title":{},"body":{"license.html":{}}}],["event",{"_index":2024,"title":{},"body":{"license.html":{}}}],["events",{"_index":1023,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["example",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"license.html":{}}}],["except",{"_index":1918,"title":{},"body":{"license.html":{}}}],["exceptions",{"_index":1648,"title":{},"body":{"miscellaneous/functions.html":{}}}],["excluding",{"_index":431,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/UserService.html":{},"license.html":{}}}],["exclusive",{"_index":1906,"title":{},"body":{"license.html":{}}}],["exec",{"_index":1235,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["executed",{"_index":1991,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":2022,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1841,"title":{},"body":{"license.html":{}}}],["exist",{"_index":1221,"title":{},"body":{"injectables/PostService.html":{}}}],["existing",{"_index":463,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateRelationshipDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["existingpost",{"_index":1208,"title":{},"body":{"injectables/PostService.html":{}}}],["existinguser",{"_index":1485,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["experience",{"_index":157,"title":{},"body":{"injectables/AppService.html":{}}}],["expiresin",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1982,"title":{},"body":{"license.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{}}}],["export.service",{"_index":524,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{}}}],["export.service.ts",{"_index":1511,"title":{},"body":{"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["export.service.ts:10",{"_index":1518,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["export.service.ts:29",{"_index":1520,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["export.service.ts:75",{"_index":1516,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["exports",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exporttemplates",{"_index":1513,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["exporttemplates(files",{"_index":1517,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["exportzip",{"_index":800,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["exposed",{"_index":1677,"title":{},"body":{"miscellaneous/functions.html":{}}}],["express",{"_index":435,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"dependencies.html":{},"license.html":{}}}],["expressrequestwithblogpostuser",{"_index":214,"title":{"interfaces/ExpressRequestWithBlogPostUser.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"coverage.html":{}}}],["extends",{"_index":433,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["extract",{"_index":1543,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["extractjwt",{"_index":1091,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1094,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":1081,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f0f8ff",{"_index":1002,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["f8f9fa",{"_index":599,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["failed",{"_index":1257,"title":{},"body":{"injectables/PostService.html":{}}}],["failure",{"_index":449,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"license.html":{}}}],["false",{"_index":142,"title":{},"body":{"injectables/AppService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"miscellaneous/functions.html":{}}}],["family",{"_index":580,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["faster",{"_index":1776,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1794,"title":{},"body":{"index.html":{}}}],["fee",{"_index":2049,"title":{},"body":{"license.html":{}}}],["ffc107",{"_index":612,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["fff5f5",{"_index":1006,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["field",{"_index":346,"title":{},"body":{"classes/BlogPost.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["fields",{"_index":440,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["fifty",{"_index":1834,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["file.content",{"_index":1525,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["filed",{"_index":1943,"title":{},"body":{"license.html":{}}}],["filename",{"_index":817,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["filenamematch",{"_index":824,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["filenamematch[1",{"_index":826,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["files",{"_index":1519,"title":{},"body":{"injectables/ZipExportService.html":{},"license.html":{}}}],["files.foreach(file",{"_index":1523,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["filetype",{"_index":1336,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["filtering",{"_index":1758,"title":{},"body":{"index.html":{}}}],["finalport",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["find",{"_index":1244,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["findbyid",{"_index":1446,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(userid",{"_index":1463,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername",{"_index":1447,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername(username",{"_index":1466,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusernameoremail",{"_index":1448,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusernameoremail(identifier",{"_index":1468,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":1231,"title":{},"body":{"injectables/PostService.html":{}}}],["finds",{"_index":1465,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":747,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["fit",{"_index":633,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["fitness",{"_index":2014,"title":{},"body":{"license.html":{}}}],["flag",{"_index":1545,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["flex",{"_index":574,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["following",{"_index":1709,"title":{},"body":{"index.html":{},"license.html":{}}}],["font",{"_index":579,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["fonts",{"_index":1558,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["fontsize",{"_index":1359,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["forbiddenexception",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["form",{"_index":1843,"title":{},"body":{"license.html":{}}}],["format",{"_index":442,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"classes/RegisterUserDto.html":{},"license.html":{}}}],["formatted",{"_index":390,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["formsmodule",{"_index":1432,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["found",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["frame",{"_index":682,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["framework",{"_index":1782,"title":{},"body":{"index.html":{}}}],["free",{"_index":1909,"title":{},"body":{"license.html":{}}}],["friendly",{"_index":362,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["frontend",{"_index":1754,"title":{},"body":{"index.html":{}}}],["function",{"_index":391,"title":{},"body":{"classes/BlogPost.html":{},"injectables/TemplateEditorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functionality",{"_index":798,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["functions",{"_index":1628,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1772,"title":{},"body":{"index.html":{}}}],["future",{"_index":1744,"title":{},"body":{"index.html":{}}}],["gap",{"_index":605,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["generate",{"_index":389,"title":{},"body":{"classes/BlogPost.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{}}}],["generated",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["generatereadme",{"_index":1514,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["generates",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["generateslug",{"_index":1599,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(blogpost.title",{"_index":406,"title":{},"body":{"classes/BlogPost.html":{}}}],["generateslug(blogposttitle",{"_index":392,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["generating",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ZipExportService.html":{}}}],["generation",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ZipExportService.html":{}}}],["generator",{"_index":545,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["generic",{"_index":1652,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get()@healthcheck",{"_index":1031,"title":{},"body":{"controllers/HealthController.html":{}}}],["getallposts",{"_index":1140,"title":{},"body":{"injectables/PostService.html":{}}}],["getcomments",{"_index":1141,"title":{},"body":{"injectables/PostService.html":{}}}],["getcomments(postid",{"_index":1176,"title":{},"body":{"injectables/PostService.html":{}}}],["getdevinstructions",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getisdev",{"_index":111,"title":{},"body":{"injectables/AppService.html":{}}}],["getlanguagefromfiletype",{"_index":1329,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["getlanguagefromfiletype(filetype",{"_index":1334,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["getmockdata",{"_index":927,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["getport",{"_index":104,"title":{},"body":{"injectables/AppService.html":{}}}],["getpostbyid",{"_index":1142,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyid(id",{"_index":1179,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyslug",{"_index":1143,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyslug(slug",{"_index":1181,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostsbypagination",{"_index":1144,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostsbypagination(page",{"_index":1183,"title":{},"body":{"injectables/PostService.html":{}}}],["getrelatedposts",{"_index":1145,"title":{},"body":{"injectables/PostService.html":{}}}],["getrelatedposts(id",{"_index":1189,"title":{},"body":{"injectables/PostService.html":{}}}],["getrelatedpostsdto",{"_index":911,"title":{"classes/GetRelatedPostsDto.html":{}},"body":{"classes/GetRelatedPostsDto.html":{},"coverage.html":{}}}],["gets",{"_index":106,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":1692,"title":{},"body":{"index.html":{}}}],["github",{"_index":1766,"title":{},"body":{"index.html":{}}}],["give",{"_index":1948,"title":{},"body":{"license.html":{}}}],["given",{"_index":915,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["global",{"_index":1639,"title":{},"body":{"miscellaneous/functions.html":{}}}],["goodwill",{"_index":2039,"title":{},"body":{"license.html":{}}}],["governing",{"_index":2086,"title":{},"body":{"license.html":{}}}],["grant",{"_index":1900,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1842,"title":{},"body":{"license.html":{}}}],["granting",{"_index":1818,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1903,"title":{},"body":{"license.html":{}}}],["graph",{"_index":551,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules.html":{}}}],["great",{"_index":856,"title":{},"body":{"classes/CreateCommentDto.html":{},"miscellaneous/variables.html":{}}}],["grid",{"_index":630,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["grigoropoulos",{"_index":2082,"title":{},"body":{"license.html":{},"properties.html":{}}}],["grossly",{"_index":2029,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1068,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["h3",{"_index":646,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["h4",{"_index":675,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["handle",{"_index":1021,"title":{},"body":{"injectables/HbsRenderService.html":{},"miscellaneous/functions.html":{}}}],["handlebars",{"_index":765,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handlebars.create",{"_index":942,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["handlebars_unescaped",{"_index":1400,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["handlebarsinstance",{"_index":926,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["handledomainerrors",{"_index":1602,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["handledomainerrors(error",{"_index":1643,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handles",{"_index":1644,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handling",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["harmless",{"_index":2063,"title":{},"body":{"license.html":{}}}],["hashed",{"_index":455,"title":{},"body":{"classes/BlogPostUser.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":1456,"title":{},"body":{"injectables/UserService.html":{}}}],["hasusernameoremail",{"_index":1114,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hasusernameoremail(validationoptions",{"_index":1664,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hasusernameoremail({message",{"_index":1103,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["hbs",{"_index":526,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{}}}],["hbsrenderservice",{"_index":525,"title":{"injectables/HbsRenderService.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"coverage.html":{},"overview.html":{}}}],["hbsservice",{"_index":721,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["header",{"_index":588,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/JwtStrategy.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["headers",{"_index":818,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["headless",{"_index":1683,"title":{},"body":{"index.html":{},"properties.html":{}}}],["health",{"_index":1029,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["health.controller",{"_index":1065,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1040,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":1045,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1038,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1027,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicatorresult",{"_index":1044,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthmodule",{"_index":61,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heath",{"_index":1736,"title":{},"body":{"index.html":{}}}],["height",{"_index":577,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["help",{"_index":2094,"title":{},"body":{"properties.html":{}}}],["helper",{"_index":947,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["helpers",{"_index":944,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["here",{"_index":153,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["hereby",{"_index":1902,"title":{},"body":{"license.html":{}}}],["herein",{"_index":1987,"title":{},"body":{"license.html":{}}}],["hexadecimal",{"_index":1661,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hidden",{"_index":626,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["hide",{"_index":544,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["hidedarkmodetoggle",{"_index":507,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["hidegenerator",{"_index":508,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["higher",{"_index":1700,"title":{},"body":{"index.html":{}}}],["hold",{"_index":2062,"title":{},"body":{"license.html":{}}}],["hook",{"_index":398,"title":{},"body":{"classes/BlogPost.html":{},"injectables/HbsRenderService.html":{}}}],["hooks",{"_index":558,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["horizontal",{"_index":1365,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["href",{"_index":1026,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["html",{"_index":992,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["htmlelement",{"_index":1338,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["http",{"_index":441,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/HealthController.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"miscellaneous/functions.html":{}}}],["http://localhost:3000",{"_index":1728,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":1806,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":2085,"title":{},"body":{"license.html":{}}}],["httpclient",{"_index":517,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["httpclientmodule",{"_index":1434,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["httpexception",{"_index":1650,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httphealthindicator",{"_index":1039,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":1062,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://betterstack.com/better",{"_index":1051,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://compodoc.app/guides/template",{"_index":1569,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["hub",{"_index":1768,"title":{},"body":{"index.html":{}}}],["hydrated",{"_index":379,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{}}}],["hydrateddocument",{"_index":369,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{}}}],["icon",{"_index":667,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["id",{"_index":477,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["identification",{"_index":2078,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":416,"title":{},"body":{"classes/BlogPostComment.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["identifiers",{"_index":889,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"miscellaneous/functions.html":{}}}],["identifying",{"_index":2073,"title":{},"body":{"license.html":{}}}],["ignoreexpiration",{"_index":1095,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ii",{"_index":1832,"title":{},"body":{"license.html":{}}}],["iii",{"_index":1838,"title":{},"body":{"license.html":{}}}],["image",{"_index":351,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"index.html":{}}}],["imagepath",{"_index":325,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["images",{"_index":1750,"title":{},"body":{"index.html":{}}}],["images/my",{"_index":880,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["implement",{"_index":797,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["implementation",{"_index":788,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["implements",{"_index":702,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["implied",{"_index":2011,"title":{},"body":{"license.html":{}}}],["import",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"license.html":{}}}],["imports",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/BlogPostUser.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["improvements",{"_index":1745,"title":{},"body":{"index.html":{}}}],["improving",{"_index":1891,"title":{},"body":{"license.html":{}}}],["inability",{"_index":2037,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":2034,"title":{},"body":{"license.html":{}}}],["include",{"_index":437,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"license.html":{}}}],["included",{"_index":1680,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["includes",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"license.html":{}}}],["includesname",{"_index":509,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["including",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"controllers/HealthController.html":{},"injectables/UserService.html":{},"license.html":{}}}],["inclusion",{"_index":1876,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":1899,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":2064,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":2060,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":2051,"title":{},"body":{"license.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":1854,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":1171,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["indicator",{"_index":611,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"controllers/HealthController.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["indirect",{"_index":1829,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1840,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{}}}],["information",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["informational",{"_index":1974,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":1927,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1940,"title":{},"body":{"license.html":{}}}],["initialize",{"_index":1349,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["initializeeditor",{"_index":755,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["initializeeditor(container",{"_index":1337,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["initializehandlebars",{"_index":928,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["initializes",{"_index":1634,"title":{},"body":{"miscellaneous/functions.html":{}}}],["initializing",{"_index":730,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["injectable",{"_index":80,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{}}}],["injectables",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"overview.html":{}}}],["injectmodel",{"_index":1191,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["inputs",{"_index":970,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["install",{"_index":1707,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1703,"title":{},"body":{"index.html":{}}}],["instance",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"injectables/UserService.html":{},"index.html":{}}}],["institute",{"_index":1931,"title":{},"body":{"license.html":{}}}],["instructions",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ZipExportService.html":{},"index.html":{}}}],["insufficient",{"_index":480,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["intentionally",{"_index":1874,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":1453,"title":{},"body":{"injectables/UserService.html":{}}}],["interface",{"_index":425,"title":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":427,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"license.html":{},"overview.html":{}}}],["interfaces/post.interface",{"_index":1197,"title":{},"body":{"injectables/PostService.html":{}}}],["internal",{"_index":556,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"classes/LoginUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"miscellaneous/functions.html":{}}}],["invalid",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/UserService.html":{}}}],["ipsum",{"_index":872,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["irrevocable",{"_index":1910,"title":{},"body":{"license.html":{}}}],["isdev",{"_index":90,"title":{},"body":{"injectables/AppService.html":{}}}],["isemail",{"_index":1319,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["isinitial",{"_index":988,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["isinitialtab",{"_index":986,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["ismongodbidvalid",{"_index":1203,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ismongodbidvalid(id",{"_index":1250,"title":{},"body":{"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["ismongodbidvalid(postid",{"_index":1284,"title":{},"body":{"injectables/PostService.html":{}}}],["ismongodbidvalid(relationpostid",{"_index":1266,"title":{},"body":{"injectables/PostService.html":{}}}],["ismongodbidvalid(sourcepostid",{"_index":1265,"title":{},"body":{"injectables/PostService.html":{}}}],["ismongoid",{"_index":922,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["isnotempty",{"_index":864,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring()@apiproperty({description",{"_index":870,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty({message",{"_index":896,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["isoptional",{"_index":1113,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isslugvalid",{"_index":1226,"title":{},"body":{"injectables/PostService.html":{}}}],["isstring",{"_index":863,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["issue",{"_index":1795,"title":{},"body":{"index.html":{},"license.html":{}}}],["istabenabled",{"_index":980,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["isvisible",{"_index":1016,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["it.'})@isstring({message",{"_index":860,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["italic",{"_index":672,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["item",{"_index":841,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["item.name",{"_index":842,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["items",{"_index":593,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["january",{"_index":1804,"title":{},"body":{"license.html":{}}}],["javascript",{"_index":1391,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["jest",{"_index":1763,"title":{},"body":{"index.html":{}}}],["john",{"_index":850,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["john_doe",{"_index":1116,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":1317,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":1111,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["john_doe@example.com",{"_index":1117,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["john_doe@example.com'})@isemail()@isnotempty",{"_index":1301,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["john_doe@example.com'})@isstring()@isoptional",{"_index":1107,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["js",{"_index":1390,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["json",{"_index":1079,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jszip",{"_index":1521,"title":{},"body":{"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["justify",{"_index":589,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["jwt",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.token.here",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt_secret=\"42",{"_index":1723,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":233,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1093,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":273,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keep",{"_index":1563,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["keeping",{"_index":1672,"title":{},"body":{"miscellaneous/functions.html":{}}}],["key",{"_index":968,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["keyword",{"_index":1399,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["keywords",{"_index":2096,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2010,"title":{},"body":{"license.html":{}}}],["known",{"_index":1651,"title":{},"body":{"miscellaneous/functions.html":{}}}],["label",{"_index":638,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["lang.id",{"_index":1395,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["language",{"_index":1352,"title":{},"body":{"injectables/TemplateEditorService.html":{},"license.html":{}}}],["languages",{"_index":1760,"title":{},"body":{"index.html":{}}}],["last",{"_index":366,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["lastsaved",{"_index":538,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["law",{"_index":2006,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":1936,"title":{},"body":{"license.html":{}}}],["layout",{"_index":1559,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["left",{"_index":670,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["legal",{"_index":1819,"title":{},"body":{"license.html":{}}}],["legend",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1320,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["length(8",{"_index":1322,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter",{"_index":652,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["letter'})@matches(/(?=.*[0",{"_index":1314,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter'})@matches(/(?=.*[a",{"_index":1313,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["level",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["li",{"_index":657,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["li.active",{"_index":664,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["li:hover",{"_index":663,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["liability",{"_index":2023,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2032,"title":{},"body":{"license.html":{}}}],["licensable",{"_index":1925,"title":{},"body":{"license.html":{}}}],["license",{"_index":1798,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1799,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":1941,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":1814,"title":{},"body":{"license.html":{}}}],["lifecycle",{"_index":557,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["limit",{"_index":1184,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["limit(limit",{"_index":1246,"title":{},"body":{"injectables/PostService.html":{}}}],["limitation",{"_index":2012,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":2087,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1846,"title":{},"body":{"license.html":{}}}],["linenumbers",{"_index":1362,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["link",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"license.html":{}}}],["linked",{"_index":902,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["linking",{"_index":357,"title":{},"body":{"classes/BlogPost.html":{}}}],["list",{"_index":645,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["listener",{"_index":1379,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["lists",{"_index":1885,"title":{},"body":{"license.html":{}}}],["literal",{"_index":1088,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["litigation",{"_index":1932,"title":{},"body":{"license.html":{}}}],["live",{"_index":569,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["loading",{"_index":566,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["loadsessionconfig",{"_index":751,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["loadsessiontemplates",{"_index":742,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["local",{"_index":1706,"title":{},"body":{"index.html":{}}}],["locales",{"_index":1761,"title":{},"body":{"index.html":{}}}],["log",{"_index":1787,"title":{},"body":{"index.html":{}}}],["logged",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["logic",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{}}}],["login",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["login(@body",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginuserdto",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":171,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["loginuserdto.username",{"_index":1501,"title":{},"body":{"injectables/UserService.html":{}}}],["logs",{"_index":130,"title":{},"body":{"injectables/AppService.html":{}}}],["lorem",{"_index":871,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":2038,"title":{},"body":{"license.html":{}}}],["losses",{"_index":2044,"title":{},"body":{"license.html":{}}}],["lower",{"_index":394,"title":{},"body":{"classes/BlogPost.html":{}}}],["lowercase",{"_index":1307,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["machine",{"_index":1695,"title":{},"body":{"index.html":{}}}],["made",{"_index":418,"title":{},"body":{"classes/BlogPostComment.html":{},"index.html":{},"license.html":{}}}],["mailing",{"_index":1884,"title":{},"body":{"license.html":{}}}],["main",{"_index":338,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["make",{"_index":1268,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["making",{"_index":1566,"title":{},"body":{"injectables/ZipExportService.html":{},"index.html":{},"license.html":{}}}],["malfunction",{"_index":2042,"title":{},"body":{"license.html":{}}}],["manage",{"_index":384,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":1888,"title":{},"body":{"license.html":{}}}],["management",{"_index":87,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"index.html":{},"license.html":{}}}],["manager",{"_index":1765,"title":{},"body":{"index.html":{}}}],["managing",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["mapping",{"_index":966,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["maps",{"_index":1646,"title":{},"body":{"miscellaneous/functions.html":{}}}],["margin",{"_index":636,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["marked",{"_index":1893,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1996,"title":{},"body":{"license.html":{}}}],["match",{"_index":1462,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["matches",{"_index":1321,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matches(/(?=.*[0",{"_index":1325,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matches(/(?=.*[a",{"_index":1324,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matching",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":623,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["mean",{"_index":1812,"title":{},"body":{"license.html":{}}}],["means",{"_index":1826,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":1849,"title":{},"body":{"license.html":{}}}],["media",{"_index":1748,"title":{},"body":{"index.html":{},"license.html":{}}}],["medium",{"_index":1946,"title":{},"body":{"license.html":{}}}],["meet",{"_index":1947,"title":{},"body":{"license.html":{}}}],["memory",{"_index":1036,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["memoryhealthindicator",{"_index":1042,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":2013,"title":{},"body":{"license.html":{}}}],["merely",{"_index":1869,"title":{},"body":{"license.html":{}}}],["message",{"_index":125,"title":{},"body":{"injectables/AppService.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"miscellaneous/functions.html":{}}}],["metadata",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["metatag",{"_index":1404,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["metatag.content",{"_index":1403,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["method",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{}}}],["middlewares",{"_index":1640,"title":{},"body":{"miscellaneous/functions.html":{}}}],["minimal",{"_index":510,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["minimap",{"_index":1356,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["minmax(200px",{"_index":634,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["miscellaneous",{"_index":1627,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":1004,"title":{},"body":{"injectables/HbsRenderService.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["model",{"_index":1147,"title":{},"body":{"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{}}}],["modifications",{"_index":1845,"title":{},"body":{"license.html":{}}}],["modified",{"_index":1951,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1556,"title":{},"body":{"injectables/ZipExportService.html":{},"license.html":{}}}],["modifying",{"_index":1978,"title":{},"body":{"license.html":{}}}],["modularity",{"_index":1784,"title":{},"body":{"index.html":{}}}],["module",{"_index":48,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/BlogPostUser.html":{},"injectables/HbsRenderService.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":50,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/HbsRenderService.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["monaco",{"_index":1348,"title":{},"body":{"injectables/TemplateEditorService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["monaco.editor.create(container",{"_index":1351,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.editor.createmodel(content",{"_index":1386,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.languages.getlanguages().find((lang",{"_index":1394,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.languages.register",{"_index":1396,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.languages.setlanguageconfiguration('handlebars",{"_index":1412,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.languages.setmonarchtokensprovider('handlebars",{"_index":1397,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["mongodb",{"_index":316,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mongodb_uri",{"_index":1719,"title":{},"body":{"index.html":{}}}],["mongodb_uri=\"mongodb://mongodb/test",{"_index":1720,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":370,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mongoose's",{"_index":1655,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mongoose.types.objectid",{"_index":1159,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["mongoose.types.objectid(userid",{"_index":1213,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoosehealthindicator",{"_index":1041,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":1130,"title":{},"body":{"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.mongodb_uri",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["monitor",{"_index":1738,"title":{},"body":{"index.html":{}}}],["monospace",{"_index":610,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["more",{"_index":1444,"title":{},"body":{"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"index.html":{},"license.html":{}}}],["mouseevent",{"_index":1025,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["multiple",{"_index":1788,"title":{},"body":{"index.html":{}}}],["name",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"classes/PostError.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["names",{"_index":1995,"title":{},"body":{"license.html":{}}}],["natively",{"_index":1694,"title":{},"body":{"index.html":{}}}],["navtabs",{"_index":982,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["navtabs.find((t",{"_index":984,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["navtabs.length",{"_index":989,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["navtabs[0].id",{"_index":990,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["necessarily",{"_index":1926,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":892,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"index.html":{}}}],["need",{"_index":1697,"title":{},"body":{"index.html":{}}}],["needed",{"_index":869,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{}}}],["negligence",{"_index":2027,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":2030,"title":{},"body":{"license.html":{}}}],["nest",{"_index":1637,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs",{"_index":1636,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs(express",{"_index":2095,"title":{},"body":{"properties.html":{}}}],["nestjs/axios",{"_index":1063,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1608,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1075,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1046,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["never",{"_index":1654,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreatePostDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["newpost",{"_index":1214,"title":{},"body":{"injectables/PostService.html":{}}}],["newpost.save",{"_index":1217,"title":{},"body":{"injectables/PostService.html":{}}}],["newuser",{"_index":1490,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":1493,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":404,"title":{},"body":{"classes/BlogPost.html":{},"injectables/TemplateEditorService.html":{}}}],["ngmodule",{"_index":1426,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["ngondestroy",{"_index":731,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["ngoninit",{"_index":722,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["nikolaos",{"_index":2081,"title":{},"body":{"license.html":{},"properties.html":{}}}],["node.js",{"_index":1698,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":140,"title":{},"body":{"injectables/AppService.html":{}}}],["non",{"_index":855,"title":{},"body":{"classes/CreateCommentDto.html":{},"index.html":{},"license.html":{}}}],["none",{"_index":655,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["normally",{"_index":1972,"title":{},"body":{"license.html":{}}}],["note",{"_index":1739,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["notfoundexception(\"user",{"_index":1499,"title":{},"body":{"injectables/UserService.html":{}}}],["nothing",{"_index":1986,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1001,"title":{},"body":{"injectables/HbsRenderService.html":{},"license.html":{}}}],["notices",{"_index":1954,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":1984,"title":{},"body":{"license.html":{}}}],["npm",{"_index":1701,"title":{},"body":{"index.html":{}}}],["null",{"_index":709,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["number",{"_index":127,"title":{},"body":{"injectables/AppService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["number'})@matches",{"_index":1315,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["object",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["objectid",{"_index":340,"title":{},"body":{"classes/BlogPost.html":{},"classes/GetRelatedPostsDto.html":{},"miscellaneous/functions.html":{}}}],["objectid.isvalid",{"_index":1656,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objectids",{"_index":1659,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objectiduserid",{"_index":1212,"title":{},"body":{"injectables/PostService.html":{}}}],["objects",{"_index":1673,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obligations",{"_index":2052,"title":{},"body":{"license.html":{}}}],["observe",{"_index":814,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["obtain",{"_index":2084,"title":{},"body":{"license.html":{}}}],["offer",{"_index":1921,"title":{},"body":{"license.html":{}}}],["omit",{"_index":434,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["omits",{"_index":439,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["once",{"_index":1729,"title":{},"body":{"index.html":{}}}],["onchangecallback",{"_index":1327,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["onclick",{"_index":1020,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["onclick(event",{"_index":1024,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["ondestroy",{"_index":515,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["one",{"_index":1269,"title":{},"body":{"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["oninit",{"_index":512,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["opacity",{"_index":668,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["open",{"_index":1416,"title":{},"body":{"injectables/TemplateEditorService.html":{},"index.html":{}}}],["operating",{"_index":1710,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1172,"title":{},"body":{"injectables/PostService.html":{}}}],["operations",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["operator",{"_index":949,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["optimize",{"_index":1773,"title":{},"body":{"index.html":{}}}],["optional",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":629,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"miscellaneous/functions.html":{}}}],["options.fn(this",{"_index":953,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["options.inverse(this",{"_index":954,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["order",{"_index":1743,"title":{},"body":{"index.html":{}}}],["orders",{"_index":1741,"title":{},"body":{"index.html":{}}}],["organization",{"_index":1783,"title":{},"body":{"index.html":{}}}],["origin",{"_index":2001,"title":{},"body":{"license.html":{}}}],["original",{"_index":1564,"title":{},"body":{"injectables/ZipExportService.html":{},"license.html":{}}}],["orlength",{"_index":973,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["otherwise",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["out",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["outputs",{"_index":971,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["outstanding",{"_index":1836,"title":{},"body":{"license.html":{}}}],["overflow",{"_index":625,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["overview",{"_index":549,"title":{"overview.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"overview.html":{}}}],["overviewrulerlanes",{"_index":1367,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["owner",{"_index":1816,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":1833,"title":{},"body":{"license.html":{}}}],["p",{"_index":1548,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["package",{"_index":806,"title":{"dependencies.html":{},"properties.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["padding",{"_index":595,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["page",{"_index":803,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{},"index.html":{},"license.html":{}}}],["page.hbs",{"_index":1551,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["pages",{"_index":1536,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["pagination",{"_index":1186,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["panel",{"_index":618,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["panel.collapsed",{"_index":627,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["param",{"_index":126,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"injectables/UserService.html":{}}}],["parameterhints",{"_index":1371,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["parameters",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parchment",{"_index":147,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["part",{"_index":1962,"title":{},"body":{"license.html":{}}}],["partial",{"_index":528,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["partially",{"_index":1688,"title":{},"body":{"index.html":{}}}],["partials",{"_index":1552,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["particular",{"_index":2015,"title":{},"body":{"license.html":{}}}],["party",{"_index":1971,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1070,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1090,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1084,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"classes/BlogPostUser.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["passwordmatches",{"_index":1502,"title":{},"body":{"injectables/UserService.html":{}}}],["passwords",{"_index":1461,"title":{},"body":{"injectables/UserService.html":{}}}],["patent",{"_index":1917,"title":{},"body":{"license.html":{}}}],["path",{"_index":350,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/HealthController.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["path/to/custom/templates",{"_index":1550,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["payload",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["per",{"_index":1188,"title":{},"body":{"injectables/PostService.html":{}}}],["percent",{"_index":1835,"title":{},"body":{"license.html":{}}}],["perform",{"_index":1914,"title":{},"body":{"license.html":{}}}],["performed",{"_index":893,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["performs",{"_index":1033,"title":{},"body":{"controllers/HealthController.html":{}}}],["permission",{"_index":1255,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["permissions",{"_index":481,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"license.html":{}}}],["perpetual",{"_index":1904,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":1961,"title":{},"body":{"license.html":{}}}],["places",{"_index":1966,"title":{},"body":{"license.html":{}}}],["plain",{"_index":1459,"title":{},"body":{"injectables/UserService.html":{}}}],["plaintoclass",{"_index":1192,"title":{},"body":{"injectables/PostService.html":{}}}],["plaintoclass(blogpost",{"_index":1207,"title":{},"body":{"injectables/PostService.html":{}}}],["playground",{"_index":532,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["playground.component",{"_index":1435,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["playground.component.ts",{"_index":487,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{}}}],["playground.module.ts",{"_index":1425,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["playground/hbs",{"_index":924,"title":{},"body":{"injectables/HbsRenderService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["playground/template",{"_index":486,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["playground/zip",{"_index":1510,"title":{},"body":{"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["please",{"_index":151,"title":{},"body":{"injectables/AppService.html":{},"interfaces/CompoDocConfig.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["pointer",{"_index":659,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["pop",{"_index":1401,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["populate",{"_index":1233,"title":{},"body":{"injectables/PostService.html":{}}}],["port",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["port=\"3000",{"_index":1721,"title":{},"body":{"index.html":{}}}],["position",{"_index":680,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["possibility",{"_index":2047,"title":{},"body":{"license.html":{}}}],["post",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["post's",{"_index":1682,"title":{},"body":{"miscellaneous/functions.html":{}}}],["post(\"login",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"register",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apiresponse({status",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.comments",{"_index":1286,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.findindex(comment",{"_index":1294,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.length",{"_index":1287,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.push(comment",{"_index":1291,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.splice(commentindex",{"_index":1298,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":1128,"title":{},"body":{"modules/PostModule.html":{}}}],["post.createdby._id.equals(userid",{"_index":1258,"title":{},"body":{"injectables/PostService.html":{}}}],["post.dto",{"_index":1196,"title":{},"body":{"injectables/PostService.html":{}}}],["post.dto.stub.ts",{"_index":1592,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["post.dto.ts",{"_index":868,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:23",{"_index":883,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:37",{"_index":879,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:51",{"_index":882,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.errors",{"_index":1198,"title":{},"body":{"injectables/PostService.html":{}}}],["post.jpg",{"_index":881,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["post.populate",{"_index":1254,"title":{},"body":{"injectables/PostService.html":{}}}],["post.relatedposts",{"_index":1263,"title":{},"body":{"injectables/PostService.html":{}}}],["post.save",{"_index":1292,"title":{},"body":{"injectables/PostService.html":{}}}],["post.service",{"_index":1129,"title":{},"body":{"modules/PostModule.html":{}}}],["post.title",{"_index":1210,"title":{},"body":{"injectables/PostService.html":{}}}],["post.toobject",{"_index":1225,"title":{},"body":{"injectables/PostService.html":{}}}],["post/interfaces/post.interface",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["post/post.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["postcircularrelationship",{"_index":473,"title":{"classes/PostCircularRelationship.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postcircularrelationship(\"can't",{"_index":1267,"title":{},"body":{"injectables/PostService.html":{}}}],["postcontroller",{"_index":1127,"title":{},"body":{"modules/PostModule.html":{},"coverage.html":{}}}],["postcount",{"_index":1241,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist",{"_index":470,"title":{"classes/PostDoesNotExist.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postdoesnotexist(\"post",{"_index":1271,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist(\"posts",{"_index":1243,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist(\"relationship",{"_index":1274,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist(`post",{"_index":1236,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnothavecomments",{"_index":479,"title":{"classes/PostDoesNotHaveComments.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postdoesnothavecomments(`post",{"_index":1288,"title":{},"body":{"injectables/PostService.html":{}}}],["posterror",{"_index":464,"title":{"classes/PostError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["posterror(`didn't",{"_index":1262,"title":{},"body":{"injectables/PostService.html":{}}}],["postid",{"_index":1154,"title":{},"body":{"injectables/PostService.html":{}}}],["postidvalidationerror",{"_index":478,"title":{"classes/PostIdValidationError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postidvalidationerror(\"provided",{"_index":1251,"title":{},"body":{"injectables/PostService.html":{}}}],["postinsufficientpermissionserror",{"_index":482,"title":{"classes/PostInsufficientPermissionsError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postinsufficientpermissionserror(`you",{"_index":1259,"title":{},"body":{"injectables/PostService.html":{}}}],["postmodule",{"_index":62,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrelationconflict",{"_index":469,"title":{"classes/PostRelationConflict.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postrelationconflict(\"relationship",{"_index":1278,"title":{},"body":{"injectables/PostService.html":{}}}],["postrelationconflict(`post",{"_index":1211,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":354,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["posts.dto.ts",{"_index":913,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"coverage.html":{}}}],["posts.dto.ts:23",{"_index":921,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["posts.length",{"_index":1224,"title":{},"body":{"injectables/PostService.html":{}}}],["postservice",{"_index":1125,"title":{"injectables/PostService.html":{}},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postslugvalidationerror",{"_index":476,"title":{"classes/PostSlugValidationError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postslugvalidationerror(\"provided",{"_index":1239,"title":{},"body":{"injectables/PostService.html":{}}}],["potential",{"_index":1746,"title":{},"body":{"index.html":{}}}],["power",{"_index":1827,"title":{},"body":{"license.html":{}}}],["pre",{"_index":396,"title":{},"body":{"classes/BlogPost.html":{}}}],["preferred",{"_index":1844,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{}}}],["prepare",{"_index":1912,"title":{},"body":{"license.html":{}}}],["preview",{"_index":570,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["previewframe",{"_index":707,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["previewurl",{"_index":716,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["primary",{"_index":689,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["primary:hover",{"_index":690,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["printed",{"_index":2076,"title":{},"body":{"license.html":{}}}],["private",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{}}}],["process",{"_index":446,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"index.html":{}}}],["process.env.jwt_secret",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["product",{"_index":1997,"title":{},"body":{"license.html":{}}}],["production",{"_index":122,"title":{},"body":{"injectables/AppService.html":{}}}],["profile",{"_index":1437,"title":{},"body":{"classes/UpdateUserDto.html":{},"index.html":{}}}],["project",{"_index":1685,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":1953,"title":{},"body":{"license.html":{}}}],["promise",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CompoDocConfig.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["prop",{"_index":367,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["prop({default",{"_index":420,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["prop({required",{"_index":336,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["prop({type",{"_index":330,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["prop({unique",{"_index":359,"title":{},"body":{"classes/BlogPost.html":{}}}],["properties",{"_index":317,"title":{"properties.html":{}},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateUserDto.html":{},"properties.html":{}}}],["property",{"_index":909,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["protected",{"_index":555,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["protecting",{"_index":1076,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["provide",{"_index":920,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":400,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":939,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["providers",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostService.html":{},"license.html":{}}}],["providing",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["public",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["publicly",{"_index":1913,"title":{},"body":{"license.html":{}}}],["publish",{"_index":1767,"title":{},"body":{"index.html":{}}}],["pull",{"_index":1797,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1889,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1825,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["put",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["put(\"users/name",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["query",{"_index":1740,"title":{},"body":{"index.html":{}}}],["quicksuggestions",{"_index":1369,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["radius",{"_index":660,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["readable",{"_index":1964,"title":{},"body":{"license.html":{}}}],["reading",{"_index":859,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["readme",{"_index":1526,"title":{"index.html":{}},"body":{"injectables/ZipExportService.html":{}}}],["readonly",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"interfaces/CompoDocConfig.html":{},"injectables/JwtStrategy.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["real",{"_index":1303,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["really",{"_index":857,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["reason",{"_index":2066,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1998,"title":{},"body":{"license.html":{}}}],["received",{"_index":1897,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":1949,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":2075,"title":{},"body":{"license.html":{}}}],["red",{"_index":1005,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["redistributing",{"_index":2019,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":1944,"title":{},"body":{"license.html":{}}}],["reduce",{"_index":1774,"title":{},"body":{"index.html":{}}}],["reducing",{"_index":1675,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ref",{"_index":341,"title":{},"body":{"classes/BlogPost.html":{}}}],["refactor",{"_index":1781,"title":{},"body":{"index.html":{}}}],["refer",{"_index":152,"title":{},"body":{"injectables/AppService.html":{}}}],["reference",{"_index":907,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["referenced",{"_index":345,"title":{},"body":{"classes/BlogPost.html":{}}}],["references",{"_index":355,"title":{},"body":{"classes/BlogPost.html":{}}}],["reflect",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":571,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["refreshpreview",{"_index":784,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["regarding",{"_index":1992,"title":{},"body":{"license.html":{}}}],["regenerated",{"_index":780,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["register",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPostUser.html":{},"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["register(@body",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["registered",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TemplateEditorService.html":{}}}],["registerhandlebarslanguage",{"_index":1330,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["registerhelpers",{"_index":929,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["registers",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["registeruserdto",{"_index":197,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["registration",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["registry",{"_index":1769,"title":{},"body":{"index.html":{}}}],["relate",{"_index":1163,"title":{},"body":{"injectables/PostService.html":{}}}],["related",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["relatedpost._id.equals(relationpost._id",{"_index":1277,"title":{},"body":{"injectables/PostService.html":{}}}],["relatedposts",{"_index":326,"title":{},"body":{"classes/BlogPost.html":{},"injectables/PostService.html":{}}}],["relation",{"_index":467,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{}}}],["relationexists",{"_index":1275,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpost",{"_index":1273,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpostid",{"_index":894,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{}}}],["relationship",{"_index":886,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{},"index.html":{}}}],["relationship.dto.ts",{"_index":885,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"coverage.html":{}}}],["relationship.dto.ts:28",{"_index":905,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["relationship.dto.ts:45",{"_index":900,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["relationships",{"_index":472,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["relative",{"_index":681,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["relativeurl",{"_index":961,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["remain",{"_index":1867,"title":{},"body":{"license.html":{}}}],["remarks",{"_index":908,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{}}}],["removed",{"_index":1674,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rename",{"_index":1712,"title":{},"body":{"index.html":{}}}],["render.service",{"_index":527,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{}}}],["render.service.ts",{"_index":925,"title":{},"body":{"injectables/HbsRenderService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["render.service.ts:131",{"_index":936,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["render.service.ts:15",{"_index":933,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["render.service.ts:184",{"_index":932,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["render.service.ts:23",{"_index":934,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["render.service.ts:9",{"_index":931,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["rendered",{"_index":994,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["rendertemplate",{"_index":930,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["rendertemplate(templatecontent",{"_index":935,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["repeat(auto",{"_index":632,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["replace",{"_index":1715,"title":{},"body":{"index.html":{}}}],["replaced",{"_index":2072,"title":{},"body":{"license.html":{}}}],["reports",{"_index":1793,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1705,"title":{},"body":{"index.html":{}}}],["represent",{"_index":1865,"title":{},"body":{"license.html":{}}}],["representation",{"_index":1658,"title":{},"body":{"miscellaneous/functions.html":{}}}],["representatives",{"_index":1883,"title":{},"body":{"license.html":{}}}],["represented",{"_index":438,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["representing",{"_index":378,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{}}}],["represents",{"_index":309,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["reproduce",{"_index":1911,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":2002,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":1809,"title":{},"body":{"license.html":{}}}],["req",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"index.html":{}}}],["request.'})@apiresponse({status",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["requested",{"_index":918,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["requests",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"index.html":{}}}],["required",{"_index":342,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["requires",{"_index":1101,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["reset",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/CompoDocConfig.html":{},"modules/PostModule.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetting",{"_index":789,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["resettodefault",{"_index":787,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["resolves",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["response",{"_index":430,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.body",{"_index":815,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.config",{"_index":754,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.headers.get('content",{"_index":821,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.sessionid",{"_index":738,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.success",{"_index":737,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.templates",{"_index":745,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["responsetype",{"_index":812,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["responsibility",{"_index":2058,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["result",{"_index":444,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/PostService.html":{},"license.html":{}}}],["result.deletedcount",{"_index":1261,"title":{},"body":{"injectables/PostService.html":{}}}],["resulting",{"_index":1848,"title":{},"body":{"license.html":{}}}],["results",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ret",{"_index":960,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["retain",{"_index":1958,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":1187,"title":{},"body":{"injectables/PostService.html":{}}}],["retrieved",{"_index":381,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{}}}],["retrieves",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{}}}],["retrieving",{"_index":914,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{}}}],["return",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{}}}],["returns",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["revisions",{"_index":1862,"title":{},"body":{"license.html":{}}}],["rewrite",{"_index":1778,"title":{},"body":{"index.html":{}}}],["right",{"_index":643,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["rights",{"_index":2054,"title":{},"body":{"license.html":{}}}],["risks",{"_index":2021,"title":{},"body":{"license.html":{}}}],["roboto",{"_index":585,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["robust",{"_index":1755,"title":{},"body":{"index.html":{}}}],["root",{"_index":533,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["roundedselection",{"_index":1363,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["routes",{"_index":552,"title":{"routes.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"routes.html":{}}}],["royalty",{"_index":1908,"title":{},"body":{"license.html":{}}}],["rules",{"_index":848,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{}}}],["run",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["running",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"injectables/ZipExportService.html":{},"index.html":{}}}],["safety",{"_index":1780,"title":{},"body":{"index.html":{}}}],["same",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["sample",{"_index":1011,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["samplecomponent",{"_index":1012,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["sanitize",{"_index":1678,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizeblogpost",{"_index":1199,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizeblogpost(post",{"_index":1670,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizeblogpost(post.toobject",{"_index":1238,"title":{},"body":{"injectables/PostService.html":{}}}],["sanitizeblogpost(updatedpost.toobject",{"_index":1283,"title":{},"body":{"injectables/PostService.html":{}}}],["sanitizeblogposts",{"_index":1200,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizeblogposts(posts",{"_index":1681,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizeblogposts(posts.map(post",{"_index":1249,"title":{},"body":{"injectables/PostService.html":{}}}],["sanitized",{"_index":429,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["sanitizes",{"_index":1671,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sans",{"_index":586,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["save",{"_index":397,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["save_delay",{"_index":712,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["saved",{"_index":537,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["savedpost",{"_index":1216,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.content",{"_index":1219,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.imagepath",{"_index":1220,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.title",{"_index":1218,"title":{},"body":{"injectables/PostService.html":{}}}],["saveduser",{"_index":1492,"title":{},"body":{"injectables/UserService.html":{}}}],["saveduser.toobject",{"_index":1496,"title":{},"body":{"injectables/UserService.html":{}}}],["savetemplate(content",{"_index":776,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["savetimeout",{"_index":711,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["saving",{"_index":536,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["scenarios",{"_index":1667,"title":{},"body":{"miscellaneous/functions.html":{}}}],["schedule",{"_index":771,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["scheduleautosave(content",{"_index":766,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["schema",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":368,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["schemafactory.createforclass(blogpost",{"_index":387,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(blogpostcomment",{"_index":424,"title":{},"body":{"classes/BlogPostComment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(blogpostuser",{"_index":458,"title":{},"body":{"classes/BlogPostUser.html":{},"miscellaneous/variables.html":{}}}],["schemas/comment.schema",{"_index":1202,"title":{},"body":{"injectables/PostService.html":{}}}],["schemas/post.schema",{"_index":436,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["schemas/user.schema",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["scripts",{"_index":1540,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["scrollbar",{"_index":1364,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["scrollbeyondlastline",{"_index":1358,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["scss",{"_index":1389,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["seamless",{"_index":156,"title":{},"body":{"injectables/AppService.html":{}}}],["search",{"_index":554,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["secondary",{"_index":693,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["secondary:hover",{"_index":694,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["secret",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1096,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":1920,"title":{},"body":{"license.html":{}}}],["sections",{"_index":1813,"title":{},"body":{"license.html":{}}}],["secure",{"_index":1785,"title":{},"body":{"index.html":{}}}],["see",{"_index":1803,"title":{},"body":{"index.html":{},"license.html":{}}}],["seed",{"_index":1722,"title":{},"body":{"index.html":{}}}],["segoe",{"_index":583,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["select",{"_index":746,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selectedfile",{"_index":708,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selectedfile.path",{"_index":567,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selectedfile.type",{"_index":568,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selectfile(template",{"_index":762,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selector",{"_index":531,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["sell",{"_index":1922,"title":{},"body":{"license.html":{}}}],["sensitive",{"_index":432,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["sent",{"_index":1882,"title":{},"body":{"license.html":{}}}],["seo",{"_index":361,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["separable",{"_index":1868,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1989,"title":{},"body":{"license.html":{}}}],["serif",{"_index":587,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["server",{"_index":808,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["serves",{"_index":906,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["service",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"license.html":{}}}],["services",{"_index":1035,"title":{},"body":{"controllers/HealthController.html":{}}}],["session",{"_index":529,"title":{"interfaces/Session.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{}}}],["sessionid",{"_index":530,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["sessionid.substring(0",{"_index":534,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["set",{"_index":141,"title":{},"body":{"injectables/AppService.html":{},"interfaces/CompoDocConfig.html":{},"classes/LoginUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["seteditorcontent",{"_index":1331,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["seteditorcontent(content",{"_index":1341,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["setonchangecallback",{"_index":1332,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["setonchangecallback(callback",{"_index":1343,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["sets",{"_index":401,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["shall",{"_index":1811,"title":{},"body":{"license.html":{}}}],["shares",{"_index":1837,"title":{},"body":{"license.html":{}}}],["showconfigpanel",{"_index":710,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["side",{"_index":809,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["sidebar",{"_index":640,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["signature",{"_index":1019,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["signoptions",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":964,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["sit",{"_index":874,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":606,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["skip",{"_index":1240,"title":{},"body":{"injectables/PostService.html":{}}}],["skip(skip",{"_index":1245,"title":{},"body":{"injectables/PostService.html":{}}}],["slug",{"_index":327,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["slugify",{"_index":371,"title":{},"body":{"classes/BlogPost.html":{},"dependencies.html":{}}}],["slugify(blogposttitle",{"_index":393,"title":{},"body":{"classes/BlogPost.html":{}}}],["sm",{"_index":700,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["software",{"_index":1847,"title":{},"body":{"license.html":{}}}],["sole",{"_index":2057,"title":{},"body":{"license.html":{}}}],["solely",{"_index":2016,"title":{},"body":{"license.html":{}}}],["solid",{"_index":603,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["solution",{"_index":1756,"title":{},"body":{"index.html":{}}}],["sort",{"_index":1247,"title":{},"body":{"injectables/PostService.html":{}}}],["sorting",{"_index":1757,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"license.html":{}}}],["sourcepost",{"_index":1270,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.populate",{"_index":1282,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.relatedposts.push(relationpost",{"_index":1279,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.relatedposts.some(relatedpost",{"_index":1276,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.save",{"_index":1281,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepostid",{"_index":895,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{}}}],["space",{"_index":590,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["spacing",{"_index":653,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["special",{"_index":1308,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["specific",{"_index":1178,"title":{},"body":{"injectables/PostService.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["specification",{"_index":134,"title":{},"body":{"injectables/AppService.html":{}}}],["specified",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["specify",{"_index":1546,"title":{},"body":{"injectables/ZipExportService.html":{},"index.html":{}}}],["src/.../comment.schema.ts",{"_index":2099,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":2101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hasusernameoremail.decorator.ts",{"_index":1632,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1631,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1629,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post.schema.ts",{"_index":1630,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../post.utils.ts",{"_index":1633,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":2100,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:24",{"_index":105,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:40",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:52",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app/sample/sample.component.ts",{"_index":1014,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["src/auth/auth.controller.ts",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:106",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:91",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/hasusernameoremail.decorator.ts",{"_index":1586,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/dto/login",{"_index":1098,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":1299,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":1436,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":1066,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1077,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":1086,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:39",{"_index":1089,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/health/health.controller.ts",{"_index":1028,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:47",{"_index":1032,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1061,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":1589,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/dto/create",{"_index":844,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/post/dto/get",{"_index":912,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"coverage.html":{}}}],["src/post/interfaces/post.interface.ts",{"_index":428,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"coverage.html":{}}}],["src/post/post.controller.ts",{"_index":1594,"title":{},"body":{"coverage.html":{}}}],["src/post/post.errors.ts",{"_index":461,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["src/post/post.errors.ts:5",{"_index":1122,"title":{},"body":{"classes/PostError.html":{}}}],["src/post/post.module.ts",{"_index":1126,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":1132,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:125",{"_index":1185,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:152",{"_index":1180,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:179",{"_index":1174,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:207",{"_index":1190,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:229",{"_index":1162,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:274",{"_index":1177,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:299",{"_index":1152,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:337",{"_index":1166,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:35",{"_index":1148,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:51",{"_index":1160,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:83",{"_index":1175,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:99",{"_index":1182,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/utils/post.utils.ts",{"_index":1597,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/schemas/comment.schema.ts",{"_index":410,"title":{},"body":{"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/comment.schema.ts:18",{"_index":415,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:27",{"_index":417,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:36",{"_index":419,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:45",{"_index":421,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/post.schema.ts",{"_index":308,"title":{},"body":{"classes/BlogPost.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/post.schema.ts:18",{"_index":364,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:22",{"_index":349,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:26",{"_index":337,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:30",{"_index":347,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:34",{"_index":360,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:41",{"_index":353,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:48",{"_index":332,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:55",{"_index":343,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:62",{"_index":365,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/user.schema.ts",{"_index":450,"title":{},"body":{"classes/BlogPostUser.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/user.schema.ts:14",{"_index":456,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/schemas/user.schema.ts:18",{"_index":454,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/schemas/user.schema.ts:22",{"_index":451,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/schemas/user.schema.ts:26",{"_index":453,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/user/user.module.ts",{"_index":1441,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1443,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:111",{"_index":1476,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:131",{"_index":1474,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:18",{"_index":1451,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:35",{"_index":1470,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:63",{"_index":1457,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:73",{"_index":1467,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:83",{"_index":1469,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:94",{"_index":1464,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/index.ts",{"_index":1601,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":1708,"title":{},"body":{"index.html":{}}}],["started",{"_index":150,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["starts",{"_index":1641,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":1983,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1919,"title":{},"body":{"license.html":{}}}],["statement",{"_index":1979,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1574,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":704,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["stating",{"_index":1955,"title":{},"body":{"license.html":{}}}],["status",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"miscellaneous/functions.html":{}}}],["stoppage",{"_index":2040,"title":{},"body":{"license.html":{}}}],["stored",{"_index":315,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["strategy",{"_index":1071,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["strict",{"_index":395,"title":{},"body":{"classes/BlogPost.html":{}}}],["string",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["string.'})@apiproperty({description",{"_index":898,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["string.'})@isnotempty({message",{"_index":852,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["strings",{"_index":1370,"title":{},"body":{"injectables/TemplateEditorService.html":{},"miscellaneous/functions.html":{}}}],["strongp@ssw0rd",{"_index":1118,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["strongp@ssw0rd!'})@isstring()@isnotempty",{"_index":1109,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["strongp@ssw0rd!'})@isstring()@isnotempty()@length(8",{"_index":1310,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["structure",{"_index":313,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/variables.html":{}}}],["stub",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style",{"_index":563,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["styles",{"_index":572,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["stylesheets",{"_index":1537,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["sub",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["subject",{"_index":1901,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1915,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1981,"title":{},"body":{"license.html":{}}}],["submit",{"_index":1796,"title":{},"body":{"index.html":{},"license.html":{}}}],["submitted",{"_index":1875,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":1898,"title":{},"body":{"license.html":{}}}],["success",{"_index":448,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["success:hover",{"_index":697,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["successful",{"_index":1479,"title":{},"body":{"injectables/UserService.html":{}}}],["successfully",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["such",{"_index":1737,"title":{},"body":{"index.html":{},"license.html":{}}}],["suggestions",{"_index":1791,"title":{},"body":{"index.html":{}}}],["suggestontriggercharacters",{"_index":1375,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["super",{"_index":1092,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(message",{"_index":466,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["supersede",{"_index":1988,"title":{},"body":{"license.html":{}}}],["support",{"_index":1747,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["sure",{"_index":791,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["surroundingpairs",{"_index":1418,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["svg",{"_index":2088,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["swc/helpers",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":950,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{}}}],["syntax",{"_index":1009,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/ZipExportService.html":{},"license.html":{}}}],["system",{"_index":311,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostUser.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"index.html":{}}}],["systems",{"_index":1886,"title":{},"body":{"license.html":{}}}],["t.id",{"_index":985,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["t\\r\\n",{"_index":1406,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["tab",{"_index":562,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["tabcompletion",{"_index":1377,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["tabid",{"_index":983,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["table",{"_index":1604,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1603,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1405,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["tasks",{"_index":1771,"title":{},"body":{"index.html":{}}}],["template",{"_index":520,"title":{"interfaces/Template.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{},"coverage.html":{}}}],["template.name",{"_index":564,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["template.type",{"_index":565,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["templatecontent",{"_index":937,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["templateeditorservice",{"_index":519,"title":{"injectables/TemplateEditorService.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"coverage.html":{},"overview.html":{}}}],["templateplaygroundcomponent",{"_index":701,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"coverage.html":{},"overview.html":{}}}],["templateplaygroundmodule",{"_index":1420,"title":{"modules/TemplatePlaygroundModule.html":{}},"body":{"modules/TemplatePlaygroundModule.html":{},"modules.html":{},"overview.html":{}}}],["templates",{"_index":542,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["templates.zip",{"_index":1532,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["terminate",{"_index":1942,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":1064,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":1807,"title":{},"body":{"license.html":{}}}],["testing",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tests",{"_index":1764,"title":{},"body":{"index.html":{}}}],["text",{"_index":649,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{},"license.html":{}}}],["theme",{"_index":1353,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["then((content",{"_index":1530,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["theory",{"_index":2025,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":1871,"title":{},"body":{"license.html":{}}}],["third",{"_index":1970,"title":{},"body":{"license.html":{}}}],["this.appservice.devinstructions",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(loginuserdto",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.blogpostmodel",{"_index":1215,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.countdocuments",{"_index":1242,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.deleteone",{"_index":1260,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.find().select",{"_index":1222,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findbyid(id",{"_index":1252,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findbyid(postid",{"_index":1285,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findone",{"_index":1209,"title":{},"body":{"injectables/PostService.html":{}}}],["this.comparepassword(loginuserdto.password",{"_index":1503,"title":{},"body":{"injectables/UserService.html":{}}}],["this.config",{"_index":753,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.configservice.get(\"node_env",{"_index":144,"title":{},"body":{"injectables/AppService.html":{}}}],["this.configservice.get(\"port",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["this.createsession",{"_index":724,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.disk.checkstorage(\"storage",{"_index":1058,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.downloadblob(content",{"_index":1531,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["this.editor",{"_index":1350,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.editor.dispose",{"_index":1419,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.editor.ondidchangemodelcontent",{"_index":1380,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.editor.setmodel(model",{"_index":1387,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.editorservice.initializeeditor(this.editorcontainer.nativeelement",{"_index":756,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.editorservice.seteditorcontent(response.content",{"_index":764,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.editorservice.setonchangecallback((content",{"_index":760,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.findbyusernameoremail(loginuserdto.email",{"_index":1500,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generatereadme",{"_index":1527,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["this.getlanguagefromfiletype(filetype",{"_index":1385,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.handlebarsinstance",{"_index":941,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.compile(templatecontent",{"_index":993,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('compare",{"_index":948,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('each",{"_index":958,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('isinitialtab",{"_index":987,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('istabenabled",{"_index":981,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('orlength",{"_index":974,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('relativeurl",{"_index":962,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('unless",{"_index":956,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.health.check",{"_index":1049,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.get(`/api/session/${this.sessionid}/config`).topromise",{"_index":752,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.get(`/api/session/${this.sessionid}/template/${template.path}`).topromise",{"_index":763,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.get(`/api/session/${this.sessionid}/templates`).topromise",{"_index":743,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.pingcheck(\"uptime",{"_index":1050,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.post('/api/session/create",{"_index":735,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.post(`/api/session/${this.sessionid}/config",{"_index":779,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.post(`/api/session/${this.sessionid}/download",{"_index":811,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.post(`/api/session/${this.sessionid}/template/${this.selectedfile.path",{"_index":777,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.initializeeditor",{"_index":727,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.initializehandlebars",{"_index":940,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.isdev",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["this.jwtservice.sign(payload",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lastsaved",{"_index":774,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.loadsessionconfig",{"_index":726,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.loadsessiontemplates",{"_index":725,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.memory.checkheap(\"memory_heap",{"_index":1057,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory_rss",{"_index":1055,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.mongodb.pingcheck(\"mongodb",{"_index":1053,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.onchangecallback",{"_index":1381,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.onchangecallback(this.editor.getvalue",{"_index":1382,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.previewframe.nativeelement.src",{"_index":786,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.previewframe?.nativeelement",{"_index":785,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.registerhandlebarslanguage",{"_index":1384,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.registerhelpers",{"_index":945,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.save_delay",{"_index":775,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.savetemplate(content",{"_index":773,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.savetimeout",{"_index":732,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.saving",{"_index":770,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.scheduleautosave(content",{"_index":761,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.selectedfile",{"_index":749,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.selectfile(this.templates[0",{"_index":750,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.sessionid",{"_index":717,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.sessionid}.zip",{"_index":823,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.showconfigpanel",{"_index":783,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.templates",{"_index":744,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.templates.length",{"_index":748,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.usermodel",{"_index":1491,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":1498,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":1486,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findbyusername(payload.username",{"_index":1097,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.register(registeruserdto",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateusername(req.user._id",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.validateuser(loginuserdto",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["those",{"_index":1923,"title":{},"body":{"license.html":{}}}],["threshold",{"_index":1059,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":1691,"title":{},"body":{"index.html":{},"license.html":{}}}],["throw",{"_index":740,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":1653,"title":{},"body":{"miscellaneous/functions.html":{}}}],["throws",{"_index":128,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["timeout",{"_index":769,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"controllers/HealthController.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["timestamps",{"_index":375,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["tips",{"_index":1554,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["title",{"_index":318,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/HbsRenderService.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":796,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["toggle",{"_index":547,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["toggleconfigpanel",{"_index":782,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["token",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TemplateEditorService.html":{}}}],["tokenizer",{"_index":1398,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["tokens",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["top",{"_index":637,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["topromise",{"_index":736,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["tort",{"_index":2026,"title":{},"body":{"license.html":{}}}],["toy",{"_index":1684,"title":{},"body":{"index.html":{}}}],["trackbyname(index",{"_index":840,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["tracking",{"_index":1887,"title":{},"body":{"license.html":{}}}],["trade",{"_index":1994,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":1959,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1993,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"license.html":{}}}],["transform",{"_index":650,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["transformation",{"_index":1850,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":1193,"title":{},"body":{"injectables/PostService.html":{},"dependencies.html":{}}}],["transition",{"_index":620,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["translation",{"_index":965,"title":{},"body":{"injectables/HbsRenderService.html":{},"license.html":{}}}],["translations",{"_index":967,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["translations[key",{"_index":972,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["transparent",{"_index":685,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["tree",{"_index":561,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["trigger",{"_index":827,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["true",{"_index":139,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"interfaces/CompoDocConfig.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":723,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["trying",{"_index":1264,"title":{},"body":{"injectables/PostService.html":{}}}],["ts",{"_index":1392,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["tsconfig.json",{"_index":1549,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["two",{"_index":887,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["type",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2097,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":422,"title":{},"body":{"classes/BlogPostComment.html":{},"license.html":{}}}],["types.objectid",{"_index":413,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["typescript",{"_index":1393,"title":{},"body":{"injectables/TemplateEditorService.html":{},"index.html":{}}}],["ui",{"_index":584,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["unauthorizedexception",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":1505,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":331,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["undefined})@apiresponse({status",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["under",{"_index":1800,"title":{},"body":{"index.html":{},"license.html":{}}}],["undone",{"_index":795,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["union",{"_index":1820,"title":{},"body":{"license.html":{}}}],["unique",{"_index":123,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{}}}],["unless",{"_index":955,"title":{},"body":{"injectables/HbsRenderService.html":{},"license.html":{}}}],["up",{"_index":757,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["updateconfig",{"_index":778,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["updated",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UserService.html":{}}}],["updatedby",{"_index":328,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["updatedpost",{"_index":1280,"title":{},"body":{"injectables/PostService.html":{}}}],["updateduser",{"_index":1507,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser.toobject",{"_index":1509,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":212,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateusername",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["updateusername(@body",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusername(updateuserdto",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusername(userid",{"_index":1473,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":781,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/PostService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["uploads",{"_index":1749,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":651,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"classes/RegisterUserDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["uptime",{"_index":1052,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["url",{"_index":828,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["url.createobjecturl(zipblob",{"_index":829,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["url.revokeobjecturl(url",{"_index":836,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["urls",{"_index":363,"title":{},"body":{"classes/BlogPost.html":{}}}],["usage",{"_index":1542,"title":{},"body":{"injectables/ZipExportService.html":{},"index.html":{}}}],["use",{"_index":1472,"title":{},"body":{"injectables/UserService.html":{},"injectables/ZipExportService.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":132,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"injectables/HbsRenderService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1666,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["useguards",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@put('users/name",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user._id",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":1099,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:22",{"_index":1318,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:24",{"_index":1112,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:38",{"_index":1108,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:42",{"_index":1316,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:52",{"_index":1110,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:56",{"_index":1302,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:63",{"_index":1104,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:70",{"_index":1305,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.name",{"_index":1506,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":1504,"title":{},"body":{"injectables/UserService.html":{}}}],["user.save",{"_index":1508,"title":{},"body":{"injectables/UserService.html":{}}}],["user.schema",{"_index":374,"title":{},"body":{"classes/BlogPost.html":{}}}],["user.service",{"_index":1442,"title":{},"body":{"modules/UserModule.html":{}}}],["user.username",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userid",{"_index":1158,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["usermodel",{"_index":1454,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":63,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["usernames",{"_index":1679,"title":{},"body":{"miscellaneous/functions.html":{}}}],["users",{"_index":321,"title":{},"body":{"classes/BlogPost.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["userschema",{"_index":457,"title":{},"body":{"classes/BlogPostUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":238,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutpassword",{"_index":1495,"title":{},"body":{"injectables/UserService.html":{}}}],["uses",{"_index":1069,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["utils",{"_index":1204,"title":{},"body":{"injectables/PostService.html":{}}}],["utils/post.utils",{"_index":1201,"title":{},"body":{"injectables/PostService.html":{}}}],["v10.9.4",{"_index":1702,"title":{},"body":{"index.html":{}}}],["v22.21.0",{"_index":1699,"title":{},"body":{"index.html":{}}}],["valid",{"_index":910,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{}}}],["validate",{"_index":1085,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["validate(payload",{"_index":1087,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":1083,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["validateuser",{"_index":1449,"title":{},"body":{"injectables/UserService.html":{}}}],["validateuser(loginuserdto",{"_index":1475,"title":{},"body":{"injectables/UserService.html":{}}}],["validating",{"_index":1471,"title":{},"body":{"injectables/UserService.html":{}}}],["validation",{"_index":474,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["validationoptions",{"_index":1665,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":865,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["validity",{"_index":1663,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":978,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":979,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["values",{"_index":793,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["variable",{"_index":1576,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":103,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/AppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1034,"title":{},"body":{"controllers/HealthController.html":{}}}],["verbal",{"_index":1879,"title":{},"body":{"license.html":{}}}],["verifying",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":154,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["vertical",{"_index":1366,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["videos",{"_index":1751,"title":{},"body":{"index.html":{}}}],["viewchild",{"_index":513,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["viewchild('editorcontainer",{"_index":703,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["viewchild('previewframe",{"_index":706,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["visible",{"_index":1018,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{}}}],["visit",{"_index":1568,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["void",{"_index":767,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["vs",{"_index":1354,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["w",{"_index":1411,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["w+)(\\s*=\\s",{"_index":1407,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["want",{"_index":792,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["warning",{"_index":129,"title":{},"body":{"injectables/AppService.html":{}}}],["warranties",{"_index":2009,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2004,"title":{},"body":{"license.html":{}}}],["web",{"_index":1080,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["weight",{"_index":613,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["welcome",{"_index":124,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["well",{"_index":1134,"title":{},"body":{"injectables/PostService.html":{}}}],["wherever",{"_index":1969,"title":{},"body":{"license.html":{}}}],["whether",{"_index":1017,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["white",{"_index":666,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["whole",{"_index":1866,"title":{},"body":{"license.html":{}}}],["width",{"_index":641,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["window.settimeout(async",{"_index":772,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["window.url.createobjecturl(blob",{"_index":1571,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["window.url.revokeobjecturl(url",{"_index":1573,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["within",{"_index":358,"title":{},"body":{"classes/BlogPost.html":{},"license.html":{}}}],["without",{"_index":133,"title":{},"body":{"injectables/AppService.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"license.html":{}}}],["wordbasedsuggestions",{"_index":1378,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["wordwrap",{"_index":1361,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["work",{"_index":380,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["works",{"_index":1859,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":1905,"title":{},"body":{"license.html":{}}}],["wrap",{"_index":995,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["wrapper",{"_index":999,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["write",{"_index":1762,"title":{},"body":{"index.html":{}}}],["writing",{"_index":1895,"title":{},"body":{"license.html":{}}}],["written",{"_index":1880,"title":{},"body":{"license.html":{}}}],["y",{"_index":644,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["yes",{"_index":1668,"title":{},"body":{"miscellaneous/functions.html":{}}}],["z",{"_index":1312,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["z0",{"_index":1228,"title":{},"body":{"injectables/PostService.html":{}}}],["za",{"_index":1227,"title":{},"body":{"injectables/PostService.html":{}}}],["zip",{"_index":523,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{}}}],["zip.file('readme.md",{"_index":1528,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["zip.file(file.path",{"_index":1524,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["zip.generateasync",{"_index":1529,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["zipblob",{"_index":816,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["zipexportservice",{"_index":522,"title":{"injectables/ZipExportService.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"overview.html":{}}}],["zipservice",{"_index":720,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["zoom",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller for handling application-level requests and providing information.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getDevInstructions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDevInstructions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDevInstructions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:20\n                        \n                    \n\n\n            \n                \n                        Retrieves development instructions for using the API.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Instructions for developers on how to access the Swagger documentation.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\n\nimport { AppService } from \"./app.service\";\n\n/**\n * Controller for handling application-level requests and providing information.\n */\n@ApiTags(\"Information Desk\")\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Retrieves development instructions for using the API.\n   *\n   * @returns {string} Instructions for developers on how to access the Swagger documentation.\n   */\n  @Get()\n  getDevInstructions(): string {\n    return this.appService.devInstructions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { PostModule } from \"./post/post.module\";\nimport { UserModule } from \"./user/user.module\";\n\n@Module({\n  imports: [AuthModule, ConfigModule.forRoot(), MongooseModule.forRoot(process.env.MONGODB_URI), UserModule, PostModule, HealthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for application configuration and environment management.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    port\n                                \n                                \n                                    isDev\n                                \n                                \n                                    devInstructions\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:9\n                            \n                        \n\n                \n                    \n                            Creates an instance of AppService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service for managing environment variables.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        port\n                    \n                \n\n                \n                    \n                        getport()\n                    \n                \n                            \n                                \n                                    Defined in src/app.service.ts:24\n                                \n                            \n                    \n                        \n                                Gets the port the application will run on.\nIf not specified in the environment variables, defaults to \"3000\".\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isDev\n                    \n                \n\n                \n                    \n                        getisDev()\n                    \n                \n                            \n                                \n                                    Defined in src/app.service.ts:40\n                                \n                            \n                    \n                        \n                                Checks if the application is running in development mode.\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        devInstructions\n                    \n                \n\n                \n                    \n                        getdevInstructions()\n                    \n                \n                            \n                                \n                                    Defined in src/app.service.ts:52\n                                \n                            \n                    \n                        \n                                Provides instructions for using the API based on the environment.\nIn development, it includes a link to the Swagger documentation.\nIn production, it returns a unique welcome message.\nor a welcome message for production mode.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n/**\n * @class AppService\n * Service responsible for application configuration and environment management.\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Creates an instance of AppService.\n   *\n   * @param {ConfigService} configService - The configuration service for managing environment variables.\n   */\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Gets the port the application will run on.\n   * If not specified in the environment variables, defaults to \"3000\".\n   *\n   * @returns {string} The port number as a string.\n   * @throws {Warning} Logs a warning if the default port is used without specification in environment variables.\n   */\n  get port(): string {\n    const port = this.configService.get(\"PORT\");\n    const finalPort = port || \"3000\";\n\n    if (finalPort === \"3000\" && !port) {\n      console.warn(`No port specified in environment variables. Using default port ${finalPort}.`);\n    }\n\n    return finalPort;\n  }\n\n  /**\n   * Checks if the application is running in development mode.\n   *\n   * @returns {boolean} True if the NODE_ENV is set to \"development\", false otherwise.\n   */\n  get isDev(): boolean {\n    return this.configService.get(\"NODE_ENV\") === \"development\";\n  }\n\n  /**\n   * Provides instructions for using the API based on the environment.\n   * In development, it includes a link to the Swagger documentation.\n   * In production, it returns a unique welcome message.\n   *\n   * @returns {string} A string containing instructions for developers in development mode,\n   * or a welcome message for production mode.\n   */\n  get devInstructions(): string {\n    if (this.isDev) {\n      return `Welcome to Parchment CMS API.To get started, please refer to the Swagger Documentation here.`;\n    }\n    return `Welcome to the production version of Parchment CMS API. Enjoy the seamless experience!`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n            \n                Prefix\n            \n            \n                /api/v1/\n            \n\n\n            \n                Description\n            \n            \n                Controller for user authentication and management, including registration and login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'User successfully logged in.', schema: undefined})@ApiResponse({status: 400, description: 'Bad Request.'})@ApiResponse({status: 401, description: 'Invalid credentials.'})@ApiResponse({status: 404, description: 'User not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:91\n                        \n                    \n\n\n            \n                \n                        Authenticates a user and returns a JWT token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing login credentials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing the access token.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'User successfully registered.', type: BlogPostUser})@ApiResponse({status: 400, description: 'Bad Request.'})@ApiResponse({status: 409, description: 'User with this username or email already exists.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing registration information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A promise that resolves to the newly registered user's data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserName(updateUserDto: UpdateUserDto, req: ExpressRequestWithBlogPostUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('users/name')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:106\n                        \n                    \n\n\n            \n                \n                        Updates the user's name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing the new username information.\n\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithBlogPostUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object, which includes the authenticated user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A promise that resolves to the updated user's data.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards, Request, Put } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { AuthService } from \"./auth.service\";\nimport { LoginUserDto } from \"./dto/login-user.dto\";\nimport { RegisterUserDto } from \"./dto/register-user.dto\";\nimport { UpdateUserDto } from \"./dto/update-user.dto\";\nimport { JwtAuthGuard } from \"./jwt-auth.guard\";\n\nimport { ExpressRequestWithBlogPostUser } from \"@/post/interfaces/post.interface\";\nimport { BlogPostUser } from \"@/schemas/user.schema\";\nimport { UserService } from \"@/user/user.service\";\n\n/**\n * Controller for user authentication and management, including registration and login.\n *\n * @class AuthController\n */\n@ApiBearerAuth()\n@ApiTags(\"Authentication\")\n@Controller(\"/api/v1/\")\nexport class AuthController {\n  /**\n   * Creates an instance of AuthController.\n   *\n   * @param {AuthService} authService - Service for handling authentication logic.\n   * @param {UserService} userService - Service for user-related operations.\n   */\n  constructor(\n    private authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Registers a new user.\n   *\n   * @param {RegisterUserDto} registerUserDto - Data transfer object containing registration information.\n   * @returns {Promise>} A promise that resolves to the newly registered user's data.\n   * @throws {BadRequestException} When the request data is invalid.\n   * @throws {ConflictException} When a user with the same username or email already exists.\n   * @method register\n   */\n  @Post(\"register\")\n  @ApiResponse({\n    status: 201,\n    description: \"User successfully registered.\",\n    type: BlogPostUser,\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Bad Request.\",\n  })\n  @ApiResponse({\n    status: 409,\n    description: \"User with this username or email already exists.\",\n  })\n  async register(@Body() registerUserDto: RegisterUserDto): Promise> {\n    return this.userService.register(registerUserDto);\n  }\n\n  /**\n   * Authenticates a user and returns a JWT token.\n   *\n   * @param {LoginUserDto} loginUserDto - Data transfer object containing login credentials.\n   * @returns {Promise} A promise that resolves to an object containing the access token.\n   * @throws {BadRequestException} When the request data is invalid.\n   * @throws {UnauthorizedException} When the credentials are invalid.\n   * @throws {NotFoundException} When the user is not found.\n   * @method login\n   */\n  @Post(\"login\")\n  @ApiResponse({\n    status: 201,\n    description: \"User successfully logged in.\",\n    schema: {\n      example: { accessToken: \"jwt.token.here\" },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Bad Request.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Invalid credentials.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"User not found.\",\n  })\n  async login(@Body() loginUserDto: LoginUserDto): Promise {\n    return this.authService.login(loginUserDto);\n  }\n\n  /**\n   * Updates the user's name.\n   *\n   * @param {UpdateUserDto} updateUserDto - Data transfer object containing the new username information.\n   * @param {ExpressRequestWithBlogPostUser} req - The request object, which includes the authenticated user data.\n   * @returns {Promise>} A promise that resolves to the updated user's data.\n   * @throws {ForbiddenException} When the user is not authorized to update the name.\n   * @method updateUserName\n   */\n  @UseGuards(JwtAuthGuard)\n  @Put(\"users/name\")\n  async updateUserName(@Body() updateUserDto: UpdateUserDto, @Request() req: ExpressRequestWithBlogPostUser): Promise> {\n    return this.userService.updateUserName(req.user._id, updateUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./auth.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\n\nimport { UserModule } from \"@/user/user.module\";\n\n@Module({\n  imports: [\n    UserModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: \"1h\" },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling user authentication, including login and token generation.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for user-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for generating and verifying JWT tokens.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Authenticates a user based on login credentials and generates a JWT access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing the user's login credentials (username and password).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing the generated JWT access token.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\n\nimport { UserService } from \"../user/user.service\";\n\nimport { LoginUserDto } from \"./dto/login-user.dto\";\n\n/**\n * Service for handling user authentication, including login and token generation.\n *\n * @class AuthService\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Creates an instance of AuthService.\n   *\n   * @param {UserService} userService - Service for user-related operations.\n   * @param {JwtService} jwtService - Service for generating and verifying JWT tokens.\n   */\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Authenticates a user based on login credentials and generates a JWT access token.\n   *\n   * @param {LoginUserDto} loginUserDto - Data transfer object containing the user's login credentials (username and password).\n   * @returns {Promise} A promise that resolves to an object containing the generated JWT access token.\n   * @throws {UnauthorizedException} When the credentials are invalid or the user cannot be validated.\n   * @method login\n   */\n  public async login(loginUserDto: LoginUserDto): Promise {\n    const user = await this.userService.validateUser(loginUserDto);\n    const payload = { username: user.username, sub: user._id };\n    const accessToken = this.jwtService.sign(payload);\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPost.html":{"url":"classes/BlogPost.html","title":"class - BlogPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/post.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post in the system.\nThe BlogPost schema defines the structure of blog post documents stored in MongoDB,\nincluding properties for title, content, associated users, and comments.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                date\n                            \n                            \n                                    \n                                imagePath\n                            \n                            \n                                    \n                                relatedPosts\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BlogPostComment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:48\n                        \n                    \n\n            \n                \n                    An array of comments associated with the blog post.\nEach comment is defined by the BlogPostComment schema.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:26\n                        \n                    \n\n            \n                \n                    The main content of the blog post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPostUserDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'ObjectId', ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:55\n                        \n                    \n\n            \n                \n                    The user who created the blog post, referenced by their ObjectId.\nThis field is required.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:30\n                        \n                    \n\n            \n                \n                    The date the blog post was created or updated. Defaults to the current date.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imagePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:22\n                        \n                    \n\n            \n                \n                    The path to the image associated with the blog post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relatedPosts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPostDocument[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:41\n                        \n                    \n\n            \n                \n                    An array of related blog posts by their ObjectId references.\nThis allows linking to other blog posts within the content.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:34\n                        \n                    \n\n            \n                \n                    The unique slug for the blog post, used for SEO-friendly URLs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:18\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPostUserDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'ObjectId', ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:62\n                        \n                    \n\n            \n                \n                    The user who last updated the blog post, referenced by their ObjectId.\nThis field is optional.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\nimport slugify from \"slugify\";\n\nimport { BlogPostComment, BlogPostCommentSchema } from \"./comment.schema\";\nimport { BlogPostUser, BlogPostUserDocument } from \"./user.schema\";\n\n/**\n * Represents a blog post in the system.\n *\n * The BlogPost schema defines the structure of blog post documents stored in MongoDB,\n * including properties for title, content, associated users, and comments.\n */\n@Schema({ timestamps: true })\nexport class BlogPost {\n  /** The title of the blog post. */\n  @Prop({ required: true })\n  title: string;\n\n  /** The path to the image associated with the blog post. */\n  @Prop({ required: true })\n  imagePath: string;\n\n  /** The main content of the blog post. */\n  @Prop({ required: true })\n  content: string;\n\n  /** The date the blog post was created or updated. Defaults to the current date. */\n  @Prop({ required: true, default: () => new Date() })\n  date: Date;\n\n  /** The unique slug for the blog post, used for SEO-friendly URLs. */\n  @Prop({ unique: true, index: true })\n  slug: string;\n\n  /**\n   * An array of related blog posts by their ObjectId references.\n   * This allows linking to other blog posts within the content.\n   */\n  @Prop({ type: [{ type: \"ObjectId\", ref: \"BlogPost\" }] })\n  relatedPosts: BlogPostDocument[];\n\n  /**\n   * An array of comments associated with the blog post.\n   * Each comment is defined by the BlogPostComment schema.\n   */\n  @Prop({ type: [BlogPostCommentSchema], default: [] })\n  comments: BlogPostComment[];\n\n  /**\n   * The user who created the blog post, referenced by their ObjectId.\n   * This field is required.\n   */\n  @Prop({ type: \"ObjectId\", ref: BlogPostUser.name, required: true })\n  createdBy: BlogPostUserDocument;\n\n  /**\n   * The user who last updated the blog post, referenced by their ObjectId.\n   * This field is optional.\n   */\n  @Prop({ type: \"ObjectId\", ref: BlogPostUser.name })\n  updatedBy: BlogPostUserDocument;\n}\n\n/**\n * The Mongoose document type for BlogPost, representing a hydrated document.\n * This type is used to work with blog post documents retrieved from MongoDB.\n */\nexport type BlogPostDocument = HydratedDocument;\n\n/**\n * The Mongoose schema definition for BlogPost.\n * This schema is used to create and manage blog post documents in the MongoDB database.\n */\nexport const BlogPostSchema = SchemaFactory.createForClass(BlogPost);\n\n/**\n * Generates a slug from the blog post title.\n *\n * @param {string} blogPostTitle - The title of the blog post to generate a slug from.\n * @returns {string} - The generated slug, formatted to be SEO-friendly.\n */\nfunction generateSlug(blogPostTitle: string): string {\n  return slugify(blogPostTitle, { lower: true, strict: true });\n}\n\n/**\n * Mongoose pre-save hook for the BlogPost schema.\n * Automatically generates a slug from the title if not provided,\n * and sets the updatedBy field to the creator when the post is new.\n */\nBlogPostSchema.pre(\"save\", function (next) {\n  const blogPost = this as BlogPostDocument;\n\n  if (!blogPost.slug) {\n    blogPost.slug = generateSlug(blogPost.title);\n  }\n\n  if (blogPost.isNew) {\n    blogPost.updatedBy = blogPost.createdBy;\n  }\n\n  next();\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPostComment.html":{"url":"classes/BlogPostComment.html","title":"class - BlogPostComment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPostComment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/comment.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a comment on a blog post.\nThe BlogPostComment schema defines the structure of comment documents stored in MongoDB,\nincluding properties for the author, content, and date of the comment.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                date\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:18\n                        \n                    \n\n            \n                \n                    The unique identifier for the comment, automatically generated by MongoDB.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:27\n                        \n                    \n\n            \n                \n                    The name of the author who made the comment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:36\n                        \n                    \n\n            \n                \n                    The content of the comment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:45\n                        \n                    \n\n            \n                \n                    The date when the comment was created.\nDefaults to the current date if not provided.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument, Types } from \"mongoose\";\n\n/**\n * Represents a comment on a blog post.\n *\n * The BlogPostComment schema defines the structure of comment documents stored in MongoDB,\n * including properties for the author, content, and date of the comment.\n */\n@Schema({ timestamps: true })\nexport class BlogPostComment {\n  /**\n   * The unique identifier for the comment, automatically generated by MongoDB.\n   *\n   * @type {Types.ObjectId}\n   */\n  @Prop({ type: Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  /**\n   * The name of the author who made the comment.\n   *\n   * @type {string}\n   * @required\n   */\n  @Prop({ required: true })\n  author: string;\n\n  /**\n   * The content of the comment.\n   *\n   * @type {string}\n   * @required\n   */\n  @Prop({ required: true })\n  content: string;\n\n  /**\n   * The date when the comment was created.\n   * Defaults to the current date if not provided.\n   *\n   * @type {Date}\n   */\n  @Prop({ default: () => new Date() })\n  date: Date;\n}\n\n/**\n * The Mongoose document type for BlogPostComment, representing a hydrated document.\n * This type is used to work with comment documents retrieved from MongoDB.\n */\nexport type BlogPostCommentDocument = HydratedDocument;\n\n/**\n * The Mongoose schema definition for BlogPostComment.\n * This schema is used to create and manage comment documents in the MongoDB database.\n */\nexport const BlogPostCommentSchema = SchemaFactory.createForClass(BlogPostComment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BlogPostSanitizedResponse.html":{"url":"interfaces/BlogPostSanitizedResponse.html","title":"interface - BlogPostSanitizedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BlogPostSanitizedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/interfaces/post.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a sanitized response for a blog post, excluding sensitive user information.\n\n            \n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                        \n                                            updatedBy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The username of the user who created the blog post.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The username of the user who last updated the blog post.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from \"express\";\n\nimport { BlogPost } from \"@/schemas/post.schema\";\nimport { BlogPostUserDocument } from \"@/schemas/user.schema\";\n\n/**\n * Extends the Express Request object to include the authenticated user's information.\n *\n * @interface ExpressRequestWithBlogPostUser\n */\nexport interface ExpressRequestWithBlogPostUser extends Request {\n  /**\n   * The user associated with the request, represented as a BlogPostUserDocument.\n   *\n   * @type {BlogPostUserDocument}\n   */\n  user: BlogPostUserDocument;\n}\n\n/**\n * Represents a sanitized response for a blog post, excluding sensitive user information.\n *\n * @interface BlogPostSanitizedResponse\n * @extends {BlogPost} - This type extends the BlogPost schema but omits the createdBy and updatedBy fields.\n */\nexport interface BlogPostSanitizedResponse extends Omit {\n  /**\n   * The username of the user who created the blog post.\n   *\n   * @type {string}\n   */\n  createdBy: string;\n\n  /**\n   * The username of the user who last updated the blog post.\n   *\n   * @type {string}\n   */\n  updatedBy: string;\n}\n\n/**\n * Represents the HTTP response format for a created blog post.\n *\n * @interface CreatedBlogPostResponse\n */\nexport interface CreatedBlogPostResponse {\n  /**\n   * The result of the creation process (e.g., success or failure).\n   *\n   * @type {string}\n   */\n  result: string;\n\n  /**\n   * The title of the created blog post.\n   *\n   * @type {string}\n   */\n  title: string;\n\n  /**\n   * The content of the created blog post.\n   *\n   * @type {string}\n   */\n  content: string;\n\n  /**\n   * The path to the image associated with the blog post.\n   *\n   * @type {string}\n   */\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPostUser.html":{"url":"classes/BlogPostUser.html","title":"class - BlogPostUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPostUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/user.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a user in the blog post system.\nThe BlogPostUser schema defines the structure of the user documents stored in MongoDB,\nincluding properties for username, password, email, and name.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:22\n                        \n                    \n\n            \n                \n                    The unique email address for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:26\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The hashed password for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:14\n                        \n                    \n\n            \n                \n                    The unique username for the user.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\n\n/**\n * Represents a user in the blog post system.\n *\n * The BlogPostUser schema defines the structure of the user documents stored in MongoDB,\n * including properties for username, password, email, and name.\n */\n@Schema()\nexport class BlogPostUser {\n  /** The unique username for the user. */\n  @Prop({ required: true, unique: true })\n  username: string;\n\n  /** The hashed password for the user. */\n  @Prop({ required: true })\n  password: string;\n\n  /** The unique email address for the user. */\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  /** The name of the user. */\n  @Prop({ required: true })\n  name: string;\n}\n\n/**\n * The Mongoose schema for the BlogPostUser.\n * This schema is used to create and manage user documents in the MongoDB database.\n */\nexport const UserSchema = SchemaFactory.createForClass(BlogPostUser);\n\n/**\n * The type representing a hydrated BlogPostUser document.\n * This type is used to work with user documents retrieved from MongoDB.\n */\nexport type BlogPostUserDocument = HydratedDocument;\n\n/**\n * The Mongoose schema definition for BlogPostUser.\n * This can be used in module imports to register the user schema with Mongoose.\n */\nexport const BlogPostUserSchema = SchemaFactory.createForClass(BlogPostUser);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentDoesNotExist.html":{"url":"classes/CommentDoesNotExist.html","title":"class - CommentDoesNotExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentDoesNotExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for comments not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentInsufficientPermissionsError.html":{"url":"classes/CommentInsufficientPermissionsError.html","title":"class - CommentInsufficientPermissionsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentInsufficientPermissionsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post insufficient permissions.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CompoDocConfig.html":{"url":"interfaces/CompoDocConfig.html","title":"interface - CompoDocConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CompoDocConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            docs/template-playground/template-playground.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customFavicon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableConstructors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableCoverage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableDependencies\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableDomTree\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableFilePath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableGraph\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableInternal\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableLifeCycleHooks\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableMainGraph\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableOverview\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disablePrivate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableProperties\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableProtected\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableRoutesGraph\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableSearch\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableSourceCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableStyleTab\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableTemplateTab\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideDarkModeToggle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideGenerator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includesName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            minimal\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customFavicon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customFavicon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableConstructors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableConstructors:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableCoverage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableCoverage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableDependencies\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableDependencies:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableDomTree\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableDomTree:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableFilePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableFilePath:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableGraph\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableGraph:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableInternal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableInternal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableLifeCycleHooks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableLifeCycleHooks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableMainGraph\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableMainGraph:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableOverview\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableOverview:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disablePrivate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disablePrivate:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableProperties\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableProperties:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableProtected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableProtected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableRoutesGraph\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableRoutesGraph:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableSearch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableSearch:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableSourceCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableSourceCode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableStyleTab\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableStyleTab:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableTemplateTab\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableTemplateTab:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideDarkModeToggle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideDarkModeToggle:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideGenerator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideGenerator:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includes:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includesName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includesName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minimal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minimal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TemplateEditorService } from './template-editor.service';\nimport { ZipExportService } from './zip-export.service';\nimport { HbsRenderService } from './hbs-render.service';\n\ninterface Template {\n  name: string;\n  path: string;\n  type: 'template' | 'partial';\n}\n\ninterface Session {\n  sessionId: string;\n  success: boolean;\n  message: string;\n}\n\ninterface CompoDocConfig {\n  hideGenerator?: boolean;\n  disableSourceCode?: boolean;\n  disableGraph?: boolean;\n  disableCoverage?: boolean;\n  disablePrivate?: boolean;\n  disableProtected?: boolean;\n  disableInternal?: boolean;\n  disableLifeCycleHooks?: boolean;\n  disableConstructors?: boolean;\n  disableRoutesGraph?: boolean;\n  disableSearch?: boolean;\n  disableDependencies?: boolean;\n  disableProperties?: boolean;\n  disableDomTree?: boolean;\n  disableTemplateTab?: boolean;\n  disableStyleTab?: boolean;\n  disableMainGraph?: boolean;\n  disableFilePath?: boolean;\n  disableOverview?: boolean;\n  hideDarkModeToggle?: boolean;\n  minimal?: boolean;\n  customFavicon?: string;\n  includes?: string;\n  includesName?: string;\n}\n\n@Component({\n  selector: 'template-playground-root',\n  template: `\n    \n      \n        Template Playground\n        \n          Session: {{sessionId.substring(0, 8)}}...\n          Saving...\n          Last saved: {{lastSaved | date:'short'}}\n        \n        \n          ⚙️ Config\n          Reset to Default\n          Download Templates\n        \n      \n\n      \n      \n        CompoDoc Configuration\n        \n           Hide Generator\n           Hide Dark Mode Toggle\n           Minimal Mode\n           Disable Overview\n           Disable File Path\n           Disable Source Code\n           Disable Graph\n           Disable Main Graph\n           Disable Routes Graph\n           Disable Coverage\n           Disable Search\n           Disable Dependencies\n           Disable Private\n           Disable Protected\n           Disable Internal\n           Disable Lifecycle Hooks\n           Disable Constructors\n           Disable Properties\n           Disable DOM Tree\n           Disable Template Tab\n           Disable Style Tab\n        \n      \n\n      \n        \n          \n            Templates\n            \n              \n                \n                {{template.name}}\n                {{template.type}}\n              \n            \n\n            \n              Loading templates...\n            \n          \n        \n\n        \n          \n            \n              {{selectedFile.path}}\n              {{selectedFile.type}}\n            \n            \n          \n\n          \n            \n              Live Preview\n              🔄 Refresh\n            \n            \n          \n        \n      \n    \n  `,\n  styles: [`\n    .template-playground {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    }\n\n    .template-playground-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 1rem 2rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .template-playground-status {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      font-size: 0.875rem;\n    }\n\n    .session-info {\n      color: #6c757d;\n      font-family: monospace;\n    }\n\n    .saving-indicator {\n      color: #ffc107;\n      font-weight: bold;\n    }\n\n    .last-saved {\n      color: #28a745;\n    }\n\n    .template-playground-actions {\n      display: flex;\n      gap: 0.5rem;\n    }\n\n    .config-panel {\n      background: #e9ecef;\n      padding: 1rem 2rem;\n      border-bottom: 1px solid #dee2e6;\n      transition: all 0.3s ease;\n      max-height: 200px;\n      overflow: hidden;\n    }\n\n    .config-panel.collapsed {\n      max-height: 0;\n      padding: 0 2rem;\n    }\n\n    .config-options {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 0.5rem;\n      margin-top: 0.5rem;\n    }\n\n    .config-options label {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 0.875rem;\n    }\n\n    .template-playground-body {\n      display: flex;\n      flex: 1;\n      overflow: hidden;\n    }\n\n    .template-playground-sidebar {\n      width: 250px;\n      background: #f8f9fa;\n      border-right: 1px solid #dee2e6;\n      overflow-y: auto;\n    }\n\n    .template-file-list {\n      padding: 1rem;\n    }\n\n    .template-file-list h3 {\n      margin: 0 0 0.5rem 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n      color: #495057;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n\n    .file-list {\n      list-style: none;\n      padding: 0;\n      margin: 0 0 1.5rem 0;\n    }\n\n    .file-list li {\n      display: flex;\n      align-items: center;\n      padding: 0.5rem;\n      cursor: pointer;\n      border-radius: 4px;\n      font-size: 0.875rem;\n      transition: background-color 0.15s ease;\n    }\n\n    .file-list li:hover {\n      background: #e9ecef;\n    }\n\n    .file-list li.active {\n      background: #007bff;\n      color: white;\n    }\n\n    .file-icon {\n      margin-right: 0.5rem;\n      opacity: 0.7;\n    }\n\n    .file-type {\n      margin-left: auto;\n      font-size: 0.75rem;\n      opacity: 0.7;\n      text-transform: uppercase;\n    }\n\n    .loading-templates {\n      text-align: center;\n      color: #6c757d;\n      font-style: italic;\n      padding: 2rem;\n    }\n\n    .template-playground-main {\n      flex: 1;\n      display: flex;\n      overflow: hidden;\n    }\n\n    .template-playground-editor {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n      border-right: 1px solid #dee2e6;\n    }\n\n    .editor-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .editor-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .file-type-badge {\n      background: #6c757d;\n      color: white;\n      padding: 0.125rem 0.5rem;\n      border-radius: 12px;\n      font-size: 0.75rem;\n      text-transform: uppercase;\n    }\n\n    .editor-container {\n      flex: 1;\n      position: relative;\n    }\n\n    .template-playground-preview {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .preview-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .preview-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .preview-frame {\n      flex: 1;\n      border: none;\n      background: white;\n    }\n\n    .btn {\n      padding: 0.375rem 0.75rem;\n      border: 1px solid transparent;\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      font-weight: 500;\n      text-decoration: none;\n      cursor: pointer;\n      transition: all 0.15s ease;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      border-color: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #0056b3;\n      border-color: #004085;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      border-color: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n      border-color: #4e555b;\n    }\n\n    .btn-success {\n      background: #28a745;\n      border-color: #28a745;\n      color: white;\n    }\n\n    .btn-success:hover {\n      background: #1e7e34;\n      border-color: #1c7430;\n    }\n\n    .btn-sm {\n      padding: 0.25rem 0.5rem;\n      font-size: 0.75rem;\n    }\n  `]\n})\nexport class TemplatePlaygroundComponent implements OnInit, OnDestroy {\n  @ViewChild('editorContainer', { static: true }) editorContainer!: ElementRef;\n  @ViewChild('previewFrame', { static: true }) previewFrame!: ElementRef;\n\n  sessionId: string = '';\n  templates: Template[] = [];\n  selectedFile: Template | null = null;\n  config: CompoDocConfig = {};\n  showConfigPanel: boolean = false;\n  saving: boolean = false;\n  lastSaved: Date | null = null;\n\n  private saveTimeout?: number;\n  private readonly SAVE_DELAY = 300; // 300ms debounce\n\n  get previewUrl(): string {\n    return this.sessionId ? `/api/session/${this.sessionId}/docs/` : '';\n  }\n\n  constructor(\n    private http: HttpClient,\n    private editorService: TemplateEditorService,\n    private zipService: ZipExportService,\n    private hbsService: HbsRenderService\n  ) {}\n\n  async ngOnInit() {\n    try {\n      await this.createSession();\n      await this.loadSessionTemplates();\n      await this.loadSessionConfig();\n      this.initializeEditor();\n    } catch (error) {\n      console.error('Error initializing template playground:', error);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n  }\n\n  private async createSession(): Promise {\n    const response = await this.http.post('/api/session/create', {}).toPromise();\n    if (response && response.success) {\n      this.sessionId = response.sessionId;\n      console.log('Session created:', this.sessionId);\n    } else {\n      throw new Error('Failed to create session');\n    }\n  }\n\n  private async loadSessionTemplates(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/templates`).toPromise();\n    if (response && response.success) {\n      this.templates = response.templates;\n\n      // Auto-select the first template\n      if (this.templates.length > 0 && !this.selectedFile) {\n        this.selectFile(this.templates[0]);\n      }\n    }\n  }\n\n  private async loadSessionConfig(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/config`).toPromise();\n    if (response && response.success) {\n      this.config = response.config;\n    }\n  }\n\n  initializeEditor() {\n    this.editorService.initializeEditor(this.editorContainer.nativeElement);\n\n    // Set up debounced save on content change\n    this.editorService.setOnChangeCallback((content: string) => {\n      this.scheduleAutoSave(content);\n    });\n  }\n\n  async selectFile(template: Template) {\n    this.selectedFile = template;\n\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.get(`/api/session/${this.sessionId}/template/${template.path}`).toPromise();\n      if (response && response.success) {\n        this.editorService.setEditorContent(response.content, template.type === 'template' ? 'handlebars' : 'handlebars');\n      }\n    } catch (error) {\n      console.error('Error loading template:', error);\n    }\n  }\n\n  private scheduleAutoSave(content: string): void {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    // Clear existing timeout\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Set saving indicator\n    this.saving = true;\n\n    // Schedule new save\n    this.saveTimeout = window.setTimeout(async () => {\n      try {\n        await this.saveTemplate(content);\n        this.saving = false;\n        this.lastSaved = new Date();\n      } catch (error) {\n        console.error('Error saving template:', error);\n        this.saving = false;\n      }\n    }, this.SAVE_DELAY);\n  }\n\n  private async saveTemplate(content: string): Promise {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    const response = await this.http.post(`/api/session/${this.sessionId}/template/${this.selectedFile.path}`, {\n      content\n    }).toPromise();\n\n    if (!response || !response.success) {\n      throw new Error('Failed to save template');\n    }\n  }\n\n  async updateConfig(): Promise {\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.post(`/api/session/${this.sessionId}/config`, {\n        config: this.config\n      }).toPromise();\n\n      if (response && response.success) {\n        // Config updated, documentation will be regenerated automatically\n      }\n    } catch (error) {\n      console.error('Error updating config:', error);\n    }\n  }\n\n  toggleConfigPanel(): void {\n    this.showConfigPanel = !this.showConfigPanel;\n  }\n\n  refreshPreview(): void {\n    if (this.previewFrame?.nativeElement) {\n      this.previewFrame.nativeElement.src = this.previewFrame.nativeElement.src;\n    }\n  }\n\n  resetToDefault(): void {\n    // Implementation for resetting to default templates\n    if (confirm('Are you sure you want to reset all templates to their default values? This action cannot be undone.')) {\n      // TODO: Implement reset functionality\n      console.log('Reset to default templates');\n    }\n  }\n\n  async exportZip(): Promise {\n    try {\n      if (!this.sessionId) {\n        console.error('No active session. Please refresh the page and try again.');\n        return;\n      }\n\n      console.log('Creating template package...');\n\n      // Call server-side ZIP creation endpoint for all templates\n      const response = await this.http.post(`/api/session/${this.sessionId}/download-all-templates`, {}, {\n        responseType: 'blob',\n        observe: 'response'\n      }).toPromise();\n\n      if (!response || !response.body) {\n        throw new Error('Failed to create template package');\n      }\n\n      // Get the ZIP file as a blob\n      const zipBlob = response.body;\n\n      // Get filename from response headers or construct it\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `compodoc-templates-${this.sessionId}.zip`;\n\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n\n      // Create download link and trigger download\n      const url = URL.createObjectURL(zipBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      console.log('Template package downloaded successfully!');\n    } catch (error) {\n      console.error('Error downloading template package:', error);\n    }\n  }\n\n  trackByName(index: number, item: Template): string {\n    return item.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-comment.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a comment.\nThis class is used to define the structure of the data\nrequired to create a comment, including validation rules.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the author of the comment.', example: 'John Doe'})@IsString({message: 'Author must be a string.'})@IsNotEmpty({message: 'Author cannot be empty.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-comment.dto.ts:21\n                        \n                    \n\n            \n                \n                    The name of the author of the comment.\nMust be a non-empty string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The content of the comment.', example: 'Great post! Really enjoyed reading it.'})@IsString({message: 'Content must be a string.'})@IsNotEmpty({message: 'Content cannot be empty.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-comment.dto.ts:33\n                        \n                    \n\n            \n                \n                    The content of the comment.\nMust be a non-empty string.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsNotEmpty } from \"class-validator\";\n\n/**\n * Data Transfer Object for creating a comment.\n *\n * This class is used to define the structure of the data\n * required to create a comment, including validation rules.\n */\nexport class CreateCommentDto {\n  /**\n   * The name of the author of the comment.\n   * Must be a non-empty string.\n   */\n  @ApiProperty({\n    description: \"The name of the author of the comment.\",\n    example: \"John Doe\",\n  })\n  @IsString({ message: \"Author must be a string.\" })\n  @IsNotEmpty({ message: \"Author cannot be empty.\" })\n  author: string;\n\n  /**\n   * The content of the comment.\n   * Must be a non-empty string.\n   */\n  @ApiProperty({\n    description: \"The content of the comment.\",\n    example: \"Great post! Really enjoyed reading it.\",\n  })\n  @IsString({ message: \"Content must be a string.\" })\n  @IsNotEmpty({ message: \"Content cannot be empty.\" })\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new blog post.\nThis class defines the structure and validation rules for the\ndata needed to create a new blog post in the application.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                imagePath\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'The content of the blog post', example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:37\n                        \n                    \n\n            \n                \n                    The content of the blog post.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        imagePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'The image path for the blog post', example: '/images/my-new-post.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:51\n                        \n                    \n\n            \n                \n                    The image path for the blog post.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'The title of the blog post', example: 'My new blog post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:23\n                        \n                    \n\n            \n                \n                    The title of the blog post.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n * Data Transfer Object for creating a new blog post.\n *\n * This class defines the structure and validation rules for the\n * data needed to create a new blog post in the application.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   *\n   * @type {string}\n   * @example \"My new blog post\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: \"The title of the blog post\",\n    example: \"My new blog post\",\n  })\n  title: string;\n\n  /**\n   * The content of the blog post.\n   *\n   * @type {string}\n   * @example \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: \"The content of the blog post\",\n    example: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  })\n  content: string;\n\n  /**\n   * The image path for the blog post.\n   *\n   * @type {string}\n   * @example \"/images/my-new-post.jpg\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: \"The image path for the blog post\",\n    example: \"/images/my-new-post.jpg\",\n  })\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRelationshipDto.html":{"url":"classes/CreateRelationshipDto.html","title":"class - CreateRelationshipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRelationshipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-relationship.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a relationship between two blog posts.\nThis class defines the structure and validation rules for the data needed\nto establish a relationship between a source post and a related post.\nIt includes the unique identifiers for both posts, ensuring that the\nnecessary validation checks are performed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                relationPostId\n                            \n                            \n                                    \n                                    \n                                    \n                                sourcePostId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        relationPostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Related post ID must not be empty.'})@IsString({message: 'Related post ID must be a string.'})@ApiProperty({description: 'The ID of the related blog post.', example: '60f72b2f9b1e8d001c8f4e81'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-relationship.dto.ts:45\n                        \n                    \n\n            \n                \n                    The ID of the related blog post.\nThis ID should correspond to an existing blog post that will be\nlinked to the source post, establishing a relationship between the two.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sourcePostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Source post ID must not be empty.'})@IsString({message: 'Source post ID must be a string.'})@ApiProperty({description: 'The ID of the source blog post.', example: '60f72b2f9b1e8d001c8f4e80'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-relationship.dto.ts:28\n                        \n                    \n\n            \n                \n                    The ID of the source blog post.\nThis ID should correspond to an existing blog post that serves\nas the reference for the relationship.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n * Data Transfer Object for creating a relationship between two blog posts.\n *\n * This class defines the structure and validation rules for the data needed\n * to establish a relationship between a source post and a related post.\n * It includes the unique identifiers for both posts, ensuring that the\n * necessary validation checks are performed.\n */\nexport class CreateRelationshipDto {\n  /**\n   * The ID of the source blog post.\n   *\n   * This ID should correspond to an existing blog post that serves\n   * as the reference for the relationship.\n   *\n   * @example \"60f72b2f9b1e8d001c8f4e80\"\n   * @remarks This property must not be empty and must be a valid string.\n   */\n  @IsNotEmpty({ message: \"Source post ID must not be empty.\" })\n  @IsString({ message: \"Source post ID must be a string.\" })\n  @ApiProperty({\n    description: \"The ID of the source blog post.\",\n    example: \"60f72b2f9b1e8d001c8f4e80\",\n  })\n  sourcePostId: string;\n\n  /**\n   * The ID of the related blog post.\n   *\n   * This ID should correspond to an existing blog post that will be\n   * linked to the source post, establishing a relationship between the two.\n   *\n   * @example \"60f72b2f9b1e8d001c8f4e81\"\n   * @remarks This property must not be empty and must be a valid string.\n   */\n  @IsNotEmpty({ message: \"Related post ID must not be empty.\" })\n  @IsString({ message: \"Related post ID must be a string.\" })\n  @ApiProperty({\n    description: \"The ID of the related blog post.\",\n    example: \"60f72b2f9b1e8d001c8f4e81\",\n  })\n  relationPostId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreatedBlogPostResponse.html":{"url":"interfaces/CreatedBlogPostResponse.html","title":"interface - CreatedBlogPostResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreatedBlogPostResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/interfaces/post.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the HTTP response format for a created blog post.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            imagePath\n                                        \n                                \n                                \n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The content of the created blog post.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path to the image associated with the blog post.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The result of the creation process (e.g., success or failure).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The title of the created blog post.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from \"express\";\n\nimport { BlogPost } from \"@/schemas/post.schema\";\nimport { BlogPostUserDocument } from \"@/schemas/user.schema\";\n\n/**\n * Extends the Express Request object to include the authenticated user's information.\n *\n * @interface ExpressRequestWithBlogPostUser\n */\nexport interface ExpressRequestWithBlogPostUser extends Request {\n  /**\n   * The user associated with the request, represented as a BlogPostUserDocument.\n   *\n   * @type {BlogPostUserDocument}\n   */\n  user: BlogPostUserDocument;\n}\n\n/**\n * Represents a sanitized response for a blog post, excluding sensitive user information.\n *\n * @interface BlogPostSanitizedResponse\n * @extends {BlogPost} - This type extends the BlogPost schema but omits the createdBy and updatedBy fields.\n */\nexport interface BlogPostSanitizedResponse extends Omit {\n  /**\n   * The username of the user who created the blog post.\n   *\n   * @type {string}\n   */\n  createdBy: string;\n\n  /**\n   * The username of the user who last updated the blog post.\n   *\n   * @type {string}\n   */\n  updatedBy: string;\n}\n\n/**\n * Represents the HTTP response format for a created blog post.\n *\n * @interface CreatedBlogPostResponse\n */\nexport interface CreatedBlogPostResponse {\n  /**\n   * The result of the creation process (e.g., success or failure).\n   *\n   * @type {string}\n   */\n  result: string;\n\n  /**\n   * The title of the created blog post.\n   *\n   * @type {string}\n   */\n  title: string;\n\n  /**\n   * The content of the created blog post.\n   *\n   * @type {string}\n   */\n  content: string;\n\n  /**\n   * The path to the image associated with the blog post.\n   *\n   * @type {string}\n   */\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExpressRequestWithBlogPostUser.html":{"url":"interfaces/ExpressRequestWithBlogPostUser.html","title":"interface - ExpressRequestWithBlogPostUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExpressRequestWithBlogPostUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/interfaces/post.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extends the Express Request object to include the authenticated user's information.\n\n            \n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         BlogPostUserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BlogPostUserDocument\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The user associated with the request, represented as a BlogPostUserDocument.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from \"express\";\n\nimport { BlogPost } from \"@/schemas/post.schema\";\nimport { BlogPostUserDocument } from \"@/schemas/user.schema\";\n\n/**\n * Extends the Express Request object to include the authenticated user's information.\n *\n * @interface ExpressRequestWithBlogPostUser\n */\nexport interface ExpressRequestWithBlogPostUser extends Request {\n  /**\n   * The user associated with the request, represented as a BlogPostUserDocument.\n   *\n   * @type {BlogPostUserDocument}\n   */\n  user: BlogPostUserDocument;\n}\n\n/**\n * Represents a sanitized response for a blog post, excluding sensitive user information.\n *\n * @interface BlogPostSanitizedResponse\n * @extends {BlogPost} - This type extends the BlogPost schema but omits the createdBy and updatedBy fields.\n */\nexport interface BlogPostSanitizedResponse extends Omit {\n  /**\n   * The username of the user who created the blog post.\n   *\n   * @type {string}\n   */\n  createdBy: string;\n\n  /**\n   * The username of the user who last updated the blog post.\n   *\n   * @type {string}\n   */\n  updatedBy: string;\n}\n\n/**\n * Represents the HTTP response format for a created blog post.\n *\n * @interface CreatedBlogPostResponse\n */\nexport interface CreatedBlogPostResponse {\n  /**\n   * The result of the creation process (e.g., success or failure).\n   *\n   * @type {string}\n   */\n  result: string;\n\n  /**\n   * The title of the created blog post.\n   *\n   * @type {string}\n   */\n  title: string;\n\n  /**\n   * The content of the created blog post.\n   *\n   * @type {string}\n   */\n  content: string;\n\n  /**\n   * The path to the image associated with the blog post.\n   *\n   * @type {string}\n   */\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetRelatedPostsDto.html":{"url":"classes/GetRelatedPostsDto.html","title":"class - GetRelatedPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetRelatedPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/get-related-posts.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for retrieving related posts.\nThis class defines the structure and validation rules for the request\nto get related blog posts based on a given blog post ID. It ensures\nthat the provided ID is a valid MongoDB ObjectId.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the blog post for which related posts are being requested.', example: '60f6c2d3a8341c8f0a5865c4'})@IsMongoId({message: 'Invalid MongoDB ID format. Please provide a valid ObjectId.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/get-related-posts.dto.ts:23\n                        \n                    \n\n            \n                \n                    The unique identifier of the blog post for which related posts are being requested.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsMongoId } from \"class-validator\";\n\n/**\n * Data Transfer Object for retrieving related posts.\n *\n * This class defines the structure and validation rules for the request\n * to get related blog posts based on a given blog post ID. It ensures\n * that the provided ID is a valid MongoDB ObjectId.\n */\nexport class GetRelatedPostsDto {\n  /**\n   * The unique identifier of the blog post for which related posts are being requested.\n   *\n   * @example \"60f6c2d3a8341c8f0a5865c4\"\n   * @remarks This property must be a valid MongoDB ObjectId format.\n   */\n  @ApiProperty({\n    description: \"The unique identifier of the blog post for which related posts are being requested.\",\n    example: \"60f6c2d3a8341c8f0a5865c4\",\n  })\n  @IsMongoId({ message: \"Invalid MongoDB ID format. Please provide a valid ObjectId.\" })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HbsRenderService.html":{"url":"injectables/HbsRenderService.html","title":"injectable - HbsRenderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  HbsRenderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            docs/template-playground/hbs-render.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handlebarsInstance\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMockData\n                            \n                            \n                                    Private\n                                initializeHandlebars\n                            \n                            \n                                    Private\n                                registerHelpers\n                            \n                            \n                                renderTemplate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in docs/template-playground/hbs-render.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMockData\n                        \n                    \n                \n            \n            \n                \ngetMockData()\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/hbs-render.service.ts:184\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeHandlebars\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeHandlebars()\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/hbs-render.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registerHelpers\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerHelpers()\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/hbs-render.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        renderTemplate\n                        \n                    \n                \n            \n            \n                \nrenderTemplate(templateContent: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/hbs-render.service.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                templateContent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handlebarsInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in docs/template-playground/hbs-render.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\ndeclare const Handlebars: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HbsRenderService {\n  private handlebarsInstance: any;\n\n  constructor() {\n    this.initializeHandlebars();\n  }\n\n  private initializeHandlebars() {\n    // Create a new Handlebars instance for the playground\n    this.handlebarsInstance = Handlebars.create();\n\n    // Register common helpers used in Compodoc templates\n    this.registerHelpers();\n  }\n\n  private registerHelpers() {\n    // Register the 'compare' helper\n    this.handlebarsInstance.registerHelper('compare', (left: any, operator: string, right: any, options: any) => {\n      let result;\n      switch (operator) {\n        case '===':\n          result = left === right;\n          break;\n        case '!==':\n          result = left !== right;\n          break;\n        case '':\n          result = left > right;\n          break;\n        case '=':\n          result = left >= right;\n          break;\n        default:\n          result = false;\n      }\n      return result ? options.fn(this) : options.inverse(this);\n    });\n\n    // Register the 'unless' helper\n    this.handlebarsInstance.registerHelper('unless', (conditional: any, options: any) => {\n      return !conditional ? options.fn(this) : options.inverse(this);\n    });\n\n    // Register the 'each' helper with index\n    this.handlebarsInstance.registerHelper('each', (context: any, options: any) => {\n      let ret = '';\n      for (let i = 0; i  {\n      return conditional ? options.fn(this) : options.inverse(this);\n    });\n\n    // Register the 'relativeURL' helper\n    this.handlebarsInstance.registerHelper('relativeURL', (depth: number, page?: string) => {\n      let url = '';\n      for (let i = 0; i  {\n      // Simple translation mapping for preview\n      const translations: { [key: string]: string } = {\n        'info': 'Information',\n        'source': 'Source',\n        'example': 'Example',\n        'template': 'Template',\n        'styles': 'Styles',\n        'component': 'Component',\n        'module': 'Module',\n        'overview': 'Overview',\n        'components': 'Components',\n        'modules': 'Modules',\n        'file': 'File',\n        'description': 'Description',\n        'selector': 'Selector',\n        'properties': 'Properties',\n        'methods': 'Methods',\n        'inputs': 'Inputs',\n        'outputs': 'Outputs'\n      };\n      return translations[key] || key;\n    });\n\n    // Register the 'orLength' helper\n    this.handlebarsInstance.registerHelper('orLength', (...args: any[]) => {\n      const options = args[args.length - 1];\n      const values = args.slice(0, -1);\n\n      for (const value of values) {\n        if (value && value.length && value.length > 0) {\n          return options.fn(this);\n        }\n      }\n      return options.inverse(this);\n    });\n\n    // Register the 'isTabEnabled' helper\n    this.handlebarsInstance.registerHelper('isTabEnabled', (navTabs: any[], tabId: string, options: any) => {\n      const tab = navTabs && navTabs.find((t: any) => t.id === tabId);\n      return tab ? options.fn(this) : options.inverse(this);\n    });\n\n    // Register the 'isInitialTab' helper\n    this.handlebarsInstance.registerHelper('isInitialTab', (navTabs: any[], tabId: string, options: any) => {\n      const isInitial = navTabs && navTabs.length > 0 && navTabs[0].id === tabId;\n      return isInitial ? options.fn(this) : options.inverse(this);\n    });\n  }\n\n  renderTemplate(templateContent: string, data: any): string {\n    try {\n      // Create a complete HTML document for preview\n      const template = this.handlebarsInstance.compile(templateContent);\n      const rendered = template({ data });\n\n      // Wrap in a basic HTML structure for preview\n      return `\n        \n        \n        \n          \n          Template Preview\n          \n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .preview-wrapper { border: 1px solid #ddd; padding: 20px; }\n            .preview-notice { background: #f0f8ff; padding: 10px; margin-bottom: 20px; border-left: 4px solid #007bff; }\n          \n        \n        \n          \n            Template Preview: This is a live preview of your template with mock data.\n          \n          \n            ${rendered}\n          \n        \n        \n      `;\n    } catch (error) {\n      return `\n        \n        \n        \n          \n          Template Preview - Error\n          \n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .error { color: red; background: #fff5f5; padding: 20px; border: 1px solid #red; }\n          \n        \n        \n          \n            Template Error\n            Error: ${error.message}\n            Please check your template syntax and try again.\n          \n        \n        \n      `;\n    }\n  }\n\n  getMockData(): any {\n    return {\n      documentationMainName: 'Sample Documentation',\n      depth: 0,\n      context: 'component',\n      components: [\n        {\n          name: 'SampleComponent',\n          selector: 'app-sample',\n          file: 'src/app/sample/sample.component.ts',\n          description: 'A sample component for demonstration',\n          properties: [\n            { name: 'title', type: 'string', description: 'The component title' },\n            { name: 'isVisible', type: 'boolean', description: 'Whether the component is visible' }\n          ],\n          methods: [\n            { name: 'ngOnInit', description: 'Lifecycle hook', signature: 'ngOnInit(): void' },\n            { name: 'onClick', description: 'Handle click events', signature: 'onClick(event: MouseEvent): void' }\n          ]\n        }\n      ],\n      navTabs: [\n        { id: 'info', label: 'Info', href: '#info' },\n        { id: 'source', label: 'Source', href: '#source' },\n        { id: 'example', label: 'Example', href: '#example' }\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                Controller for health check endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Performs health checks for various services including HTTP, MongoDB, memory, and disk.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the health check result.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  MongooseHealthIndicator,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n  HealthIndicatorResult,\n  HealthCheckResult,\n} from \"@nestjs/terminus\";\n\n/**\n * Controller for health check endpoints.\n *\n * @class HealthController\n */\n@ApiTags(\"hEaLtH\")\n@Controller(\"health\")\nexport class HealthController {\n  /**\n   * Creates an instance of HealthController.\n   *\n   * @param {HealthCheckService} health - Service for health checks.\n   * @param {HttpHealthIndicator} http - Indicator for HTTP health checks.\n   * @param {MongooseHealthIndicator} mongoDb - Indicator for MongoDB health checks.\n   * @param {MemoryHealthIndicator} memory - Indicator for memory health checks.\n   * @param {DiskHealthIndicator} disk - Indicator for disk health checks.\n   */\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private mongoDb: MongooseHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n  ) {}\n\n  /**\n   * Performs health checks for various services including HTTP, MongoDB, memory, and disk.\n   *\n   * @returns {Promise} A promise that resolves to the health check result.\n   * @method check\n   */\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    return this.health.check([\n      (): Promise => this.http.pingCheck(\"uptime\", \"https://betterstack.com/better-uptime\"),\n      (): Promise => this.mongoDb.pingCheck(\"mongodb\", { timeout: 5000 }),\n      (): Promise => this.memory.checkRSS(\"memory_rss\", 300 * 1024 * 1024),\n      (): Promise => this.memory.checkHeap(\"memory_heap\", 300 * 1024 * 1024),\n      (): Promise =>\n        this.disk.checkStorage(\"storage\", {\n          path: \"/\",\n          threshold: 128 * 1024 * 1024 * 1024,\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\n\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                This guard uses the Passport JWT strategy to authenticate requests.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard(\"JWT Strategy\")\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * @class JwtAuthGuard\n * @extends AuthGuard\n * @description Guard for protecting routes using JWT authentication.\n * This guard uses the Passport JWT strategy to authenticate requests.\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"JWT Strategy\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Strategy for authenticating users using JSON Web Tokens (JWT).\nThis strategy extracts the JWT from the authorization header and validates it.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"JWT Strategy\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:16\n                            \n                        \n\n                \n                    \n                            Creates an instance of JwtStrategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for retrieving user information from the database.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:39\n                        \n                    \n\n\n            \n                \n                        Validates the JWT payload and retrieves the associated user from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT payload containing the user's information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the authenticated user object.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\n\nimport { BlogPostUser } from \"@/schemas/user.schema\";\nimport { UserService } from \"@/user/user.service\";\n\n/**\n * Strategy for authenticating users using JSON Web Tokens (JWT).\n * This strategy extracts the JWT from the authorization header and validates it.\n *\n * @class JwtStrategy\n * @extends PassportStrategy\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"JWT Strategy\") {\n  /**\n   * Creates an instance of JwtStrategy.\n   *\n   * @constructor\n   * @param {UserService} userService - Service for retrieving user information from the database.\n   */\n  constructor(private readonly userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  /**\n   * Validates the JWT payload and retrieves the associated user from the database.\n   *\n   * @method validate\n   * @param {{ sub: string; username: string }} payload - The JWT payload containing the user's information.\n   * @returns {Promise} A promise that resolves to the authenticated user object.\n   * @throws {UnauthorizedException} When the user associated with the JWT is not found.\n   */\n  public async validate(payload: { sub: string; username: string }): Promise {\n    const user = await this.userService.findByUsername(payload.username);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This DTO requires either a username or an email and a password to authenticate a user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                _hasUsernameOrEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        _hasUsernameOrEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @hasUsernameOrEmail({message: 'Either username or email must be provided.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:63\n                        \n                    \n\n            \n                \n                    This is an internal property for validation logic and should not be set directly by the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email for the user account. Provide either username or email.', example: 'john_doe@example.com'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:38\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for the user account', example: 'StrongP@ssw0rd!'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:52\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for the user account. Provide either username or email.', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\n\nimport { hasUsernameOrEmail } from \"../decorators/hasUsernameOrEmail.decorator\";\n\n/**\n * @class LoginUserDto\n * @description Data transfer object for user login credentials.\n * This DTO requires either a username or an email and a password to authenticate a user.\n */\nexport class LoginUserDto {\n  /**\n   * @property {string} [username]\n   * @description Username for the user account. Provide either username or email.\n   * @example \"john_doe\"\n   * @optional\n   */\n  @ApiProperty({\n    description: \"Username for the user account. Provide either username or email.\",\n    example: \"john_doe\",\n  })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  /**\n   * @property {string} [email]\n   * @description Email for the user account. Provide either username or email.\n   * @example \"john_doe@example.com\"\n   * @optional\n   */\n  @ApiProperty({\n    description: \"Email for the user account. Provide either username or email.\",\n    example: \"john_doe@example.com\",\n  })\n  @IsString()\n  @IsOptional()\n  email?: string;\n\n  /**\n   * @property {string} password\n   * @description Password for the user account. This field is required for authentication.\n   * @example \"StrongP@ssw0rd!\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Password for the user account\",\n    example: \"StrongP@ssw0rd!\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  /**\n   * @property {string} [_hasUsernameOrEmail]\n   * @description Custom validation decorator to ensure either username or email must be provided.\n   * This is an internal property for validation logic and should not be set directly by the user.\n   * @optional\n   */\n  @hasUsernameOrEmail({\n    message: \"Either username or email must be provided.\",\n  })\n  _hasUsernameOrEmail?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostCircularRelationship.html":{"url":"classes/PostCircularRelationship.html","title":"class - PostCircularRelationship","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostCircularRelationship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for circular post relationships.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDoesNotExist.html":{"url":"classes/PostDoesNotExist.html","title":"class - PostDoesNotExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDoesNotExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDoesNotHaveComments.html":{"url":"classes/PostDoesNotHaveComments.html","title":"class - PostDoesNotHaveComments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDoesNotHaveComments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for posts without comments.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostError.html":{"url":"classes/PostError.html","title":"class - PostError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom error class for post-related errors.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.errors.ts:5\n                            \n                        \n\n                \n                    \n                            Creates an instance of PostError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostIdValidationError.html":{"url":"classes/PostIdValidationError.html","title":"class - PostIdValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostIdValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post ID validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostInsufficientPermissionsError.html":{"url":"classes/PostInsufficientPermissionsError.html","title":"class - PostInsufficientPermissionsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostInsufficientPermissionsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post insufficient permissions.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPostService\n\nPostService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\nimport { BlogPost, BlogPostSchema } from \"../schemas/post.schema\";\n\nimport { PostController } from \"./post.controller\";\nimport { PostService } from \"./post.service\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: BlogPost.name, schema: BlogPostSchema }])],\n  controllers: [PostController],\n  providers: [PostService],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostRelationConflict.html":{"url":"classes/PostRelationConflict.html","title":"class - PostRelationConflict","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostRelationConflict\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post relation conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing blog posts.\nThe PostService class provides methods for creating, retrieving, updating,\nand deleting blog posts, as well as managing comments associated with the posts.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createBlogPost\n                            \n                            \n                                    Async\n                                createRelation\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getComments\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostBySlug\n                            \n                            \n                                    Async\n                                getPostsByPagination\n                            \n                            \n                                    Async\n                                getRelatedPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blogPostModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:35\n                            \n                        \n\n                \n                    \n                            Constructs a new PostService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        blogPostModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Mongoose model for BlogPost.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    addComment(postId: string, createCommentDto: CreateCommentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:299\n                        \n                    \n\n\n            \n                \n                        Adds a comment to a blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to which the comment will be added.\n\n\n                                            \n                                        \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the comment details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated blog post with the new comment.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createBlogPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBlogPost(createPostDto: CreatePostDto, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Creates a new blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the post details.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user creating the post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created blog post details.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRelation(sourcePostId: string, relationPostId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:229\n                        \n                    \n\n\n            \n                \n                        Creates a relation between two blog posts.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sourcePostId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the source post.\n\n\n                                            \n                                        \n                                        \n                                                relationPostId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to relate to.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated blog post with the new relation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(postId: string, commentId: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:337\n                        \n                    \n\n\n            \n                \n                        Deletes a comment from a blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post from which the comment will be deleted.\n\n\n                                            \n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the comment to delete.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user attempting to delete the comment.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nAn object indicating the success of the operation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Deletes a blog post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the blog post to delete.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user attempting to delete the post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe number of deleted posts (should be 1).\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Retrieves all blog posts.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA list of sanitized blog posts.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComments(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:274\n                        \n                    \n\n\n            \n                \n                        Retrieves comments for a specific blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA list of comments associated with the post.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Retrieves a blog post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the blog post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe sanitized blog post.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostBySlug\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostBySlug(slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Retrieves a blog post by its slug.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe slug of the blog post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe sanitized blog post.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostsByPagination\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostsByPagination(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:125\n                        \n                    \n\n\n            \n                \n                        Retrieves posts with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of posts per page.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA list of sanitized blog posts.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRelatedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRelatedPosts(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Retrieves related posts for a given post ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post for which to retrieve related posts.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nAn object containing related posts.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { plainToClass } from \"class-transformer\";\nimport mongoose, { Model } from \"mongoose\";\n\nimport { CreateCommentDto } from \"./dto/create-comment.dto\";\nimport { CreatePostDto } from \"./dto/create-post.dto\";\nimport { BlogPostSanitizedResponse, CreatedBlogPostResponse } from \"./interfaces/post.interface\";\nimport {\n  PostRelationConflict,\n  PostDoesNotExist,\n  PostError,\n  PostCircularRelationship,\n  PostSlugValidationError,\n  PostIdValidationError,\n  CommentDoesNotExist,\n  PostDoesNotHaveComments,\n  PostInsufficientPermissionsError,\n  CommentInsufficientPermissionsError,\n} from \"./post.errors\";\nimport { sanitizeBlogPost, sanitizeBlogPosts } from \"./utils/post.utils\";\n\nimport { BlogPostComment } from \"@/schemas/comment.schema\";\nimport { BlogPost, BlogPostDocument } from \"@/schemas/post.schema\";\nimport { isMongoDbIdValid } from \"@/utils\";\n\n/**\n * @class PostService\n * Service for managing blog posts.\n *\n * The PostService class provides methods for creating, retrieving, updating,\n * and deleting blog posts, as well as managing comments associated with the posts.\n */\n@Injectable()\nexport class PostService {\n  /**\n   * Constructs a new PostService.\n   *\n   * @param {Model} blogPostModel - The Mongoose model for BlogPost.\n   */\n  constructor(@InjectModel(BlogPost.name) private blogPostModel: Model) {}\n\n  /**\n   * Creates a new blog post.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the post details.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user creating the post.\n   * @returns {Promise} - The created blog post details.\n   * @throws {PostRelationConflict} - If a post with the same title already exists.\n   */\n  async createBlogPost(@Body() createPostDto: CreatePostDto, userId: mongoose.Types.ObjectId): Promise {\n    const post = plainToClass(BlogPost, createPostDto);\n    const existingPost = await this.blogPostModel.findOne({\n      title: post.title,\n    });\n    if (existingPost) {\n      throw new PostRelationConflict(`Post with title \\\"${post.title}\\\" already exists.`);\n    }\n\n    const objectIdUserId = new mongoose.Types.ObjectId(userId);\n\n    const newPost = new this.blogPostModel({\n      ...post,\n      createdBy: objectIdUserId,\n    });\n\n    const savedPost = await newPost.save();\n\n    return {\n      result: \"success\",\n      title: savedPost.title,\n      content: savedPost.content,\n      imagePath: savedPost.imagePath,\n    };\n  }\n\n  /**\n   * Retrieves all blog posts.\n   *\n   * @returns {Promise} - A list of sanitized blog posts.\n   * @throws {PostDoesNotExist} - If no posts exist.\n   */\n  async getAllPosts(): Promise {\n    const posts = await this.blogPostModel.find().select(\"-__v\").exec();\n    if (posts.length  post.toObject()));\n  }\n\n  /**\n   * Retrieves a blog post by its slug.\n   *\n   * @param {string} slug - The slug of the blog post.\n   * @returns {Promise} - The sanitized blog post.\n   * @throws {PostDoesNotExist} - If no post with the given slug exists.\n   * @throws {PostSlugValidationError} - If the provided slug is not valid.\n   */\n  async getPostBySlug(slug: string): Promise {\n    const isSlugValid = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/.test(slug);\n    if (isSlugValid === true) {\n      const post = await this.blogPostModel\n        .findOne({ slug: { $eq: slug } })\n        .populate({ path: \"createdBy\", select: \"username -_id\" })\n        .populate({ path: \"updatedBy\", select: \"username -_id\" })\n        .select(\"-__v -_id\")\n        .exec();\n      if (!post) {\n        throw new PostDoesNotExist(`Post with slug \\\"${slug}\\\" doesn't exist.`);\n      }\n      return sanitizeBlogPost(post.toObject());\n    } else {\n      throw new PostSlugValidationError(\"Provided slug is not valid\");\n    }\n  }\n\n  /**\n   * Retrieves posts with pagination.\n   *\n   * @param {number} page - The page number to retrieve.\n   * @param {number} limit - The number of posts per page.\n   * @returns {Promise} - A list of sanitized blog posts.\n   * @throws {PostDoesNotExist} - If no posts exist.\n   */\n  async getPostsByPagination(page: number, limit: number): Promise {\n    const skip = page * limit;\n    const postCount = await this.blogPostModel.countDocuments();\n    if (postCount === 0) {\n      throw new PostDoesNotExist(\"Posts are empty!\");\n    }\n\n    const posts = await this.blogPostModel\n      .find()\n      .skip(skip)\n      .limit(limit)\n      .sort(\"-createdAt\")\n      .populate({ path: \"createdBy\", select: \"username -_id\" })\n      .populate({ path: \"updatedBy\", select: \"username -_id\" })\n      .select(\"-__v\")\n      .exec();\n    return sanitizeBlogPosts(posts.map(post => post.toObject()));\n  }\n\n  /**\n   * Retrieves a blog post by its ID.\n   *\n   * @param {string} id - The ID of the blog post.\n   * @returns {Promise} - The sanitized blog post.\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   */\n  async getPostById(id: string): Promise {\n    if (!isMongoDbIdValid(id)) {\n      throw new PostIdValidationError(\"Provided id is not valid\");\n    }\n    const post = await this.blogPostModel.findById(id, \"-__v -_id\").exec();\n\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \"${id}\" doesn't exist.`);\n    }\n\n    await post.populate({ path: \"createdBy\", select: \"username -_id\" });\n    await post.populate({ path: \"updatedBy\", select: \"username -_id\" });\n\n    return sanitizeBlogPost(post.toObject());\n  }\n\n  /**\n   * Deletes a blog post by its ID.\n   *\n   * @param {string} id - The ID of the blog post to delete.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user attempting to delete the post.\n   * @returns {Promise} - The number of deleted posts (should be 1).\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   * @throws {PostInsufficientPermissionsError} - If the user does not have permission to delete the post.\n   * @throws {PostError} - If the deletion failed.\n   */\n  async deletePost(id: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!isMongoDbIdValid(id)) {\n      throw new PostIdValidationError(\"Provided id is not valid\");\n    }\n    const post = await this.blogPostModel.findOne({ _id: id }).select(\"-__v -_id\");\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    }\n\n    if (!post.createdBy._id.equals(userId)) {\n      throw new PostInsufficientPermissionsError(`You are not authorized to delete this post.`);\n    }\n\n    const result = await this.blogPostModel.deleteOne({ _id: id }).exec();\n    if (result.deletedCount === 0) {\n      throw new PostError(`Didn't delete post with \\\"${id}\\\" .`);\n    }\n    return result.deletedCount;\n  }\n\n  /**\n   * Retrieves related posts for a given post ID.\n   *\n   * @param {string} id - The ID of the post for which to retrieve related posts.\n   * @returns {Promise} - An object containing related posts.\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   */\n  async getRelatedPosts(id: string): Promise {\n    if (!isMongoDbIdValid(id)) {\n      throw new PostIdValidationError(\"Provided id is not valid\");\n    }\n    const post = await this.blogPostModel.findOne({ _id: id }).select(\"-__v -_id\");\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    }\n    return { relatedPosts: post.relatedPosts };\n  }\n\n  /**\n   * Creates a relation between two blog posts.\n   *\n   * @param {string} sourcePostId - The ID of the source post.\n   * @param {string} relationPostId - The ID of the post to relate to.\n   * @returns {Promise} - The updated blog post with the new relation.\n   * @throws {PostIdValidationError} - If either ID is not valid.\n   * @throws {PostCircularRelationship} - If trying to relate the same post.\n   * @throws {PostDoesNotExist} - If either post does not exist.\n   * @throws {PostRelationConflict} - If the relationship already exists.\n   */\n  async createRelation(sourcePostId: string, relationPostId: string): Promise {\n    if (!isMongoDbIdValid(sourcePostId)) {\n      throw new PostIdValidationError(\"Provided sourcePostId is not valid\");\n    }\n    if (!isMongoDbIdValid(relationPostId)) {\n      throw new PostIdValidationError(\"Provided relationPostId is not valid\");\n    }\n    if (sourcePostId === relationPostId) {\n      throw new PostCircularRelationship(\"Can't make a relation using only one post\");\n    }\n\n    const sourcePost: BlogPostDocument = await this.blogPostModel.findOne({\n      _id: sourcePostId,\n    });\n    if (!sourcePost) {\n      throw new PostDoesNotExist(\"Post doesn't exist cant create a relationship with other Post\");\n    }\n\n    const relationPost: BlogPostDocument = await this.blogPostModel.findOne({\n      _id: relationPostId,\n    });\n    if (!relationPost) {\n      throw new PostDoesNotExist(\"Relationship Post doesn't exist cant create a relationship with Post.\");\n    }\n    const relationExists = sourcePost.relatedPosts.some(relatedPost => relatedPost._id.equals(relationPost._id));\n\n    if (relationExists) {\n      throw new PostRelationConflict(\"Relationship between posts already exists!\");\n    }\n    sourcePost.relatedPosts.push(relationPost);\n    const updatedPost = await sourcePost.save();\n    await sourcePost.populate({ path: \"createdBy\", select: \"username -_id\" });\n    await sourcePost.populate({ path: \"updatedBy\", select: \"username -_id\" });\n    return sanitizeBlogPost(updatedPost.toObject());\n  }\n\n  /**\n   * Retrieves comments for a specific blog post.\n   *\n   * @param {string} postId - The ID of the post.\n   * @returns {Promise} - A list of comments associated with the post.\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   * @throws {PostDoesNotHaveComments} - If the post has no comments.\n   */\n  async getComments(postId: string): Promise {\n    if (!isMongoDbIdValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.blogPostModel.findById(postId, \"comments\");\n\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \"${postId}\" doesn't exist.`);\n    }\n    if (!post.comments || post.comments.length === 0) {\n      throw new PostDoesNotHaveComments(`Post comments are empty!`);\n    }\n    return post.comments;\n  }\n\n  /**\n   * Adds a comment to a blog post.\n   *\n   * @param {string} postId - The ID of the post to which the comment will be added.\n   * @param {CreateCommentDto} createCommentDto - The data transfer object containing the comment details.\n   * @returns {Promise} - The updated blog post with the new comment.\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   */\n  async addComment(postId: string, createCommentDto: CreateCommentDto): Promise {\n    if (!isMongoDbIdValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.blogPostModel.findById(postId);\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${postId}\\\" doesn't exist.`);\n    }\n\n    const comment = {\n      _id: new mongoose.Types.ObjectId(),\n      author: createCommentDto.author,\n      content: createCommentDto.content,\n      date: new Date(),\n    };\n\n    post.comments.push(comment);\n    await post.save();\n\n    await post.populate({ path: \"createdBy\", select: \"username -_id\" });\n    await post.populate({ path: \"updatedBy\", select: \"username -_id\" });\n\n    return sanitizeBlogPost(post.toObject());\n  }\n\n  /**\n   * Deletes a comment from a blog post.\n   *\n   * @param {string} postId - The ID of the post from which the comment will be deleted.\n   * @param {string} commentId - The ID of the comment to delete.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user attempting to delete the comment.\n   * @returns {Promise} - An object indicating the success of the operation.\n   * @throws {PostIdValidationError} - If the provided post ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   * @throws {CommentDoesNotExist} - If no comment with the given ID exists.\n   * @throws {CommentInsufficientPermissionsError} - If the user does not have permission to delete the comment.\n   */\n  async deleteComment(postId: string, commentId: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!isMongoDbIdValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.blogPostModel.findById(postId);\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${postId}\\\" doesn't exist.`);\n    }\n\n    const commentIndex = post.comments.findIndex(comment => comment._id.toString() === commentId);\n    if (commentIndex === -1) {\n      throw new CommentDoesNotExist(`Comment with id \\\"${commentId}\\\" doesn't exist.`);\n    }\n    if (post.createdBy._id.equals(userId)) {\n      throw new CommentInsufficientPermissionsError(\"You are not authorized to delete comments on this post.\");\n    }\n\n    post.comments.splice(commentIndex, 1);\n    await post.save();\n\n    return { success: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostSlugValidationError.html":{"url":"classes/PostSlugValidationError.html","title":"class - PostSlugValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostSlugValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post slug validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This DTO is used to validate the information provided during user registration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the user', example: 'john_doe@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:56\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's real or display name', example: 'John Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:70\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for the user account, must contain at least one uppercase letter, one lowercase letter, one number, and one special character', example: 'StrongP@ssw0rd!'})@IsString()@IsNotEmpty()@Length(8, 64)@Matches(/(?=.*[a-z])/, {message: 'Password must contain at least one lowercase letter'})@Matches(/(?=.*[A-Z])/, {message: 'Password must contain at least one uppercase letter'})@Matches(/(?=.*[0-9])/, {message: 'Password must contain at least one number'})@Matches(/(?=.*[!@#$%^&*])/, {message: 'Password must contain at least one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:42\n                        \n                    \n\n            \n                \n                    one lowercase letter, one number, and one special character. This field is required.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique username for the user', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:22\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsString, Length, Matches } from \"class-validator\";\n\n/**\n * @class RegisterUserDto\n * @description Data transfer object for user registration credentials.\n * This DTO is used to validate the information provided during user registration.\n */\nexport class RegisterUserDto {\n  /**\n   * @property {string} username\n   * @description Unique username for the user. This field is required and cannot be empty.\n   * @example \"john_doe\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Unique username for the user\",\n    example: \"john_doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * @property {string} password\n   * @description Password for the user account. Must contain at least one uppercase letter,\n   * one lowercase letter, one number, and one special character. This field is required.\n   * @example \"StrongP@ssw0rd!\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Password for the user account, must contain at least one uppercase letter, one lowercase letter, one number, and one special character\",\n    example: \"StrongP@ssw0rd!\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(8, 64)\n  @Matches(/(?=.*[a-z])/, { message: \"Password must contain at least one lowercase letter\" })\n  @Matches(/(?=.*[A-Z])/, { message: \"Password must contain at least one uppercase letter\" })\n  @Matches(/(?=.*[0-9])/, { message: \"Password must contain at least one number\" })\n  @Matches(/(?=.*[!@#$%^&*])/, { message: \"Password must contain at least one special character\" })\n  password: string;\n\n  /**\n   * @property {string} email\n   * @description Email address of the user. This field is required and must be a valid email format.\n   * @example \"john_doe@example.com\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Email address of the user\",\n    example: \"john_doe@example.com\",\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * @property {string} name\n   * @description The user's real or display name. This field is required and cannot be empty.\n   * @example \"John Doe\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"The user's real or display name\",\n    example: \"John Doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Session.html":{"url":"interfaces/Session.html","title":"interface - Session","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            docs/template-playground/template-playground.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TemplateEditorService } from './template-editor.service';\nimport { ZipExportService } from './zip-export.service';\nimport { HbsRenderService } from './hbs-render.service';\n\ninterface Template {\n  name: string;\n  path: string;\n  type: 'template' | 'partial';\n}\n\ninterface Session {\n  sessionId: string;\n  success: boolean;\n  message: string;\n}\n\ninterface CompoDocConfig {\n  hideGenerator?: boolean;\n  disableSourceCode?: boolean;\n  disableGraph?: boolean;\n  disableCoverage?: boolean;\n  disablePrivate?: boolean;\n  disableProtected?: boolean;\n  disableInternal?: boolean;\n  disableLifeCycleHooks?: boolean;\n  disableConstructors?: boolean;\n  disableRoutesGraph?: boolean;\n  disableSearch?: boolean;\n  disableDependencies?: boolean;\n  disableProperties?: boolean;\n  disableDomTree?: boolean;\n  disableTemplateTab?: boolean;\n  disableStyleTab?: boolean;\n  disableMainGraph?: boolean;\n  disableFilePath?: boolean;\n  disableOverview?: boolean;\n  hideDarkModeToggle?: boolean;\n  minimal?: boolean;\n  customFavicon?: string;\n  includes?: string;\n  includesName?: string;\n}\n\n@Component({\n  selector: 'template-playground-root',\n  template: `\n    \n      \n        Template Playground\n        \n          Session: {{sessionId.substring(0, 8)}}...\n          Saving...\n          Last saved: {{lastSaved | date:'short'}}\n        \n        \n          ⚙️ Config\n          Reset to Default\n          Download Templates\n        \n      \n\n      \n      \n        CompoDoc Configuration\n        \n           Hide Generator\n           Hide Dark Mode Toggle\n           Minimal Mode\n           Disable Overview\n           Disable File Path\n           Disable Source Code\n           Disable Graph\n           Disable Main Graph\n           Disable Routes Graph\n           Disable Coverage\n           Disable Search\n           Disable Dependencies\n           Disable Private\n           Disable Protected\n           Disable Internal\n           Disable Lifecycle Hooks\n           Disable Constructors\n           Disable Properties\n           Disable DOM Tree\n           Disable Template Tab\n           Disable Style Tab\n        \n      \n\n      \n        \n          \n            Templates\n            \n              \n                \n                {{template.name}}\n                {{template.type}}\n              \n            \n\n            \n              Loading templates...\n            \n          \n        \n\n        \n          \n            \n              {{selectedFile.path}}\n              {{selectedFile.type}}\n            \n            \n          \n\n          \n            \n              Live Preview\n              🔄 Refresh\n            \n            \n          \n        \n      \n    \n  `,\n  styles: [`\n    .template-playground {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    }\n\n    .template-playground-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 1rem 2rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .template-playground-status {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      font-size: 0.875rem;\n    }\n\n    .session-info {\n      color: #6c757d;\n      font-family: monospace;\n    }\n\n    .saving-indicator {\n      color: #ffc107;\n      font-weight: bold;\n    }\n\n    .last-saved {\n      color: #28a745;\n    }\n\n    .template-playground-actions {\n      display: flex;\n      gap: 0.5rem;\n    }\n\n    .config-panel {\n      background: #e9ecef;\n      padding: 1rem 2rem;\n      border-bottom: 1px solid #dee2e6;\n      transition: all 0.3s ease;\n      max-height: 200px;\n      overflow: hidden;\n    }\n\n    .config-panel.collapsed {\n      max-height: 0;\n      padding: 0 2rem;\n    }\n\n    .config-options {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 0.5rem;\n      margin-top: 0.5rem;\n    }\n\n    .config-options label {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 0.875rem;\n    }\n\n    .template-playground-body {\n      display: flex;\n      flex: 1;\n      overflow: hidden;\n    }\n\n    .template-playground-sidebar {\n      width: 250px;\n      background: #f8f9fa;\n      border-right: 1px solid #dee2e6;\n      overflow-y: auto;\n    }\n\n    .template-file-list {\n      padding: 1rem;\n    }\n\n    .template-file-list h3 {\n      margin: 0 0 0.5rem 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n      color: #495057;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n\n    .file-list {\n      list-style: none;\n      padding: 0;\n      margin: 0 0 1.5rem 0;\n    }\n\n    .file-list li {\n      display: flex;\n      align-items: center;\n      padding: 0.5rem;\n      cursor: pointer;\n      border-radius: 4px;\n      font-size: 0.875rem;\n      transition: background-color 0.15s ease;\n    }\n\n    .file-list li:hover {\n      background: #e9ecef;\n    }\n\n    .file-list li.active {\n      background: #007bff;\n      color: white;\n    }\n\n    .file-icon {\n      margin-right: 0.5rem;\n      opacity: 0.7;\n    }\n\n    .file-type {\n      margin-left: auto;\n      font-size: 0.75rem;\n      opacity: 0.7;\n      text-transform: uppercase;\n    }\n\n    .loading-templates {\n      text-align: center;\n      color: #6c757d;\n      font-style: italic;\n      padding: 2rem;\n    }\n\n    .template-playground-main {\n      flex: 1;\n      display: flex;\n      overflow: hidden;\n    }\n\n    .template-playground-editor {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n      border-right: 1px solid #dee2e6;\n    }\n\n    .editor-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .editor-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .file-type-badge {\n      background: #6c757d;\n      color: white;\n      padding: 0.125rem 0.5rem;\n      border-radius: 12px;\n      font-size: 0.75rem;\n      text-transform: uppercase;\n    }\n\n    .editor-container {\n      flex: 1;\n      position: relative;\n    }\n\n    .template-playground-preview {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .preview-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .preview-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .preview-frame {\n      flex: 1;\n      border: none;\n      background: white;\n    }\n\n    .btn {\n      padding: 0.375rem 0.75rem;\n      border: 1px solid transparent;\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      font-weight: 500;\n      text-decoration: none;\n      cursor: pointer;\n      transition: all 0.15s ease;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      border-color: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #0056b3;\n      border-color: #004085;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      border-color: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n      border-color: #4e555b;\n    }\n\n    .btn-success {\n      background: #28a745;\n      border-color: #28a745;\n      color: white;\n    }\n\n    .btn-success:hover {\n      background: #1e7e34;\n      border-color: #1c7430;\n    }\n\n    .btn-sm {\n      padding: 0.25rem 0.5rem;\n      font-size: 0.75rem;\n    }\n  `]\n})\nexport class TemplatePlaygroundComponent implements OnInit, OnDestroy {\n  @ViewChild('editorContainer', { static: true }) editorContainer!: ElementRef;\n  @ViewChild('previewFrame', { static: true }) previewFrame!: ElementRef;\n\n  sessionId: string = '';\n  templates: Template[] = [];\n  selectedFile: Template | null = null;\n  config: CompoDocConfig = {};\n  showConfigPanel: boolean = false;\n  saving: boolean = false;\n  lastSaved: Date | null = null;\n\n  private saveTimeout?: number;\n  private readonly SAVE_DELAY = 300; // 300ms debounce\n\n  get previewUrl(): string {\n    return this.sessionId ? `/api/session/${this.sessionId}/docs/` : '';\n  }\n\n  constructor(\n    private http: HttpClient,\n    private editorService: TemplateEditorService,\n    private zipService: ZipExportService,\n    private hbsService: HbsRenderService\n  ) {}\n\n  async ngOnInit() {\n    try {\n      await this.createSession();\n      await this.loadSessionTemplates();\n      await this.loadSessionConfig();\n      this.initializeEditor();\n    } catch (error) {\n      console.error('Error initializing template playground:', error);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n  }\n\n  private async createSession(): Promise {\n    const response = await this.http.post('/api/session/create', {}).toPromise();\n    if (response && response.success) {\n      this.sessionId = response.sessionId;\n      console.log('Session created:', this.sessionId);\n    } else {\n      throw new Error('Failed to create session');\n    }\n  }\n\n  private async loadSessionTemplates(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/templates`).toPromise();\n    if (response && response.success) {\n      this.templates = response.templates;\n\n      // Auto-select the first template\n      if (this.templates.length > 0 && !this.selectedFile) {\n        this.selectFile(this.templates[0]);\n      }\n    }\n  }\n\n  private async loadSessionConfig(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/config`).toPromise();\n    if (response && response.success) {\n      this.config = response.config;\n    }\n  }\n\n  initializeEditor() {\n    this.editorService.initializeEditor(this.editorContainer.nativeElement);\n\n    // Set up debounced save on content change\n    this.editorService.setOnChangeCallback((content: string) => {\n      this.scheduleAutoSave(content);\n    });\n  }\n\n  async selectFile(template: Template) {\n    this.selectedFile = template;\n\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.get(`/api/session/${this.sessionId}/template/${template.path}`).toPromise();\n      if (response && response.success) {\n        this.editorService.setEditorContent(response.content, template.type === 'template' ? 'handlebars' : 'handlebars');\n      }\n    } catch (error) {\n      console.error('Error loading template:', error);\n    }\n  }\n\n  private scheduleAutoSave(content: string): void {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    // Clear existing timeout\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Set saving indicator\n    this.saving = true;\n\n    // Schedule new save\n    this.saveTimeout = window.setTimeout(async () => {\n      try {\n        await this.saveTemplate(content);\n        this.saving = false;\n        this.lastSaved = new Date();\n      } catch (error) {\n        console.error('Error saving template:', error);\n        this.saving = false;\n      }\n    }, this.SAVE_DELAY);\n  }\n\n  private async saveTemplate(content: string): Promise {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    const response = await this.http.post(`/api/session/${this.sessionId}/template/${this.selectedFile.path}`, {\n      content\n    }).toPromise();\n\n    if (!response || !response.success) {\n      throw new Error('Failed to save template');\n    }\n  }\n\n  async updateConfig(): Promise {\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.post(`/api/session/${this.sessionId}/config`, {\n        config: this.config\n      }).toPromise();\n\n      if (response && response.success) {\n        // Config updated, documentation will be regenerated automatically\n      }\n    } catch (error) {\n      console.error('Error updating config:', error);\n    }\n  }\n\n  toggleConfigPanel(): void {\n    this.showConfigPanel = !this.showConfigPanel;\n  }\n\n  refreshPreview(): void {\n    if (this.previewFrame?.nativeElement) {\n      this.previewFrame.nativeElement.src = this.previewFrame.nativeElement.src;\n    }\n  }\n\n  resetToDefault(): void {\n    // Implementation for resetting to default templates\n    if (confirm('Are you sure you want to reset all templates to their default values? This action cannot be undone.')) {\n      // TODO: Implement reset functionality\n      console.log('Reset to default templates');\n    }\n  }\n\n  async exportZip(): Promise {\n    try {\n      if (!this.sessionId) {\n        console.error('No active session. Please refresh the page and try again.');\n        return;\n      }\n\n      console.log('Creating template package...');\n\n      // Call server-side ZIP creation endpoint for all templates\n      const response = await this.http.post(`/api/session/${this.sessionId}/download-all-templates`, {}, {\n        responseType: 'blob',\n        observe: 'response'\n      }).toPromise();\n\n      if (!response || !response.body) {\n        throw new Error('Failed to create template package');\n      }\n\n      // Get the ZIP file as a blob\n      const zipBlob = response.body;\n\n      // Get filename from response headers or construct it\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `compodoc-templates-${this.sessionId}.zip`;\n\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n\n      // Create download link and trigger download\n      const url = URL.createObjectURL(zipBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      console.log('Template package downloaded successfully!');\n    } catch (error) {\n      console.error('Error downloading template package:', error);\n    }\n  }\n\n  trackByName(index: number, item: Template): string {\n    return item.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Template.html":{"url":"interfaces/Template.html","title":"interface - Template","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Template\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            docs/template-playground/template-playground.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"template\" | \"partial\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"template\" | \"partial\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TemplateEditorService } from './template-editor.service';\nimport { ZipExportService } from './zip-export.service';\nimport { HbsRenderService } from './hbs-render.service';\n\ninterface Template {\n  name: string;\n  path: string;\n  type: 'template' | 'partial';\n}\n\ninterface Session {\n  sessionId: string;\n  success: boolean;\n  message: string;\n}\n\ninterface CompoDocConfig {\n  hideGenerator?: boolean;\n  disableSourceCode?: boolean;\n  disableGraph?: boolean;\n  disableCoverage?: boolean;\n  disablePrivate?: boolean;\n  disableProtected?: boolean;\n  disableInternal?: boolean;\n  disableLifeCycleHooks?: boolean;\n  disableConstructors?: boolean;\n  disableRoutesGraph?: boolean;\n  disableSearch?: boolean;\n  disableDependencies?: boolean;\n  disableProperties?: boolean;\n  disableDomTree?: boolean;\n  disableTemplateTab?: boolean;\n  disableStyleTab?: boolean;\n  disableMainGraph?: boolean;\n  disableFilePath?: boolean;\n  disableOverview?: boolean;\n  hideDarkModeToggle?: boolean;\n  minimal?: boolean;\n  customFavicon?: string;\n  includes?: string;\n  includesName?: string;\n}\n\n@Component({\n  selector: 'template-playground-root',\n  template: `\n    \n      \n        Template Playground\n        \n          Session: {{sessionId.substring(0, 8)}}...\n          Saving...\n          Last saved: {{lastSaved | date:'short'}}\n        \n        \n          ⚙️ Config\n          Reset to Default\n          Download Templates\n        \n      \n\n      \n      \n        CompoDoc Configuration\n        \n           Hide Generator\n           Hide Dark Mode Toggle\n           Minimal Mode\n           Disable Overview\n           Disable File Path\n           Disable Source Code\n           Disable Graph\n           Disable Main Graph\n           Disable Routes Graph\n           Disable Coverage\n           Disable Search\n           Disable Dependencies\n           Disable Private\n           Disable Protected\n           Disable Internal\n           Disable Lifecycle Hooks\n           Disable Constructors\n           Disable Properties\n           Disable DOM Tree\n           Disable Template Tab\n           Disable Style Tab\n        \n      \n\n      \n        \n          \n            Templates\n            \n              \n                \n                {{template.name}}\n                {{template.type}}\n              \n            \n\n            \n              Loading templates...\n            \n          \n        \n\n        \n          \n            \n              {{selectedFile.path}}\n              {{selectedFile.type}}\n            \n            \n          \n\n          \n            \n              Live Preview\n              🔄 Refresh\n            \n            \n          \n        \n      \n    \n  `,\n  styles: [`\n    .template-playground {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    }\n\n    .template-playground-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 1rem 2rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .template-playground-status {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      font-size: 0.875rem;\n    }\n\n    .session-info {\n      color: #6c757d;\n      font-family: monospace;\n    }\n\n    .saving-indicator {\n      color: #ffc107;\n      font-weight: bold;\n    }\n\n    .last-saved {\n      color: #28a745;\n    }\n\n    .template-playground-actions {\n      display: flex;\n      gap: 0.5rem;\n    }\n\n    .config-panel {\n      background: #e9ecef;\n      padding: 1rem 2rem;\n      border-bottom: 1px solid #dee2e6;\n      transition: all 0.3s ease;\n      max-height: 200px;\n      overflow: hidden;\n    }\n\n    .config-panel.collapsed {\n      max-height: 0;\n      padding: 0 2rem;\n    }\n\n    .config-options {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 0.5rem;\n      margin-top: 0.5rem;\n    }\n\n    .config-options label {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 0.875rem;\n    }\n\n    .template-playground-body {\n      display: flex;\n      flex: 1;\n      overflow: hidden;\n    }\n\n    .template-playground-sidebar {\n      width: 250px;\n      background: #f8f9fa;\n      border-right: 1px solid #dee2e6;\n      overflow-y: auto;\n    }\n\n    .template-file-list {\n      padding: 1rem;\n    }\n\n    .template-file-list h3 {\n      margin: 0 0 0.5rem 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n      color: #495057;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n\n    .file-list {\n      list-style: none;\n      padding: 0;\n      margin: 0 0 1.5rem 0;\n    }\n\n    .file-list li {\n      display: flex;\n      align-items: center;\n      padding: 0.5rem;\n      cursor: pointer;\n      border-radius: 4px;\n      font-size: 0.875rem;\n      transition: background-color 0.15s ease;\n    }\n\n    .file-list li:hover {\n      background: #e9ecef;\n    }\n\n    .file-list li.active {\n      background: #007bff;\n      color: white;\n    }\n\n    .file-icon {\n      margin-right: 0.5rem;\n      opacity: 0.7;\n    }\n\n    .file-type {\n      margin-left: auto;\n      font-size: 0.75rem;\n      opacity: 0.7;\n      text-transform: uppercase;\n    }\n\n    .loading-templates {\n      text-align: center;\n      color: #6c757d;\n      font-style: italic;\n      padding: 2rem;\n    }\n\n    .template-playground-main {\n      flex: 1;\n      display: flex;\n      overflow: hidden;\n    }\n\n    .template-playground-editor {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n      border-right: 1px solid #dee2e6;\n    }\n\n    .editor-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .editor-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .file-type-badge {\n      background: #6c757d;\n      color: white;\n      padding: 0.125rem 0.5rem;\n      border-radius: 12px;\n      font-size: 0.75rem;\n      text-transform: uppercase;\n    }\n\n    .editor-container {\n      flex: 1;\n      position: relative;\n    }\n\n    .template-playground-preview {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .preview-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .preview-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .preview-frame {\n      flex: 1;\n      border: none;\n      background: white;\n    }\n\n    .btn {\n      padding: 0.375rem 0.75rem;\n      border: 1px solid transparent;\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      font-weight: 500;\n      text-decoration: none;\n      cursor: pointer;\n      transition: all 0.15s ease;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      border-color: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #0056b3;\n      border-color: #004085;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      border-color: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n      border-color: #4e555b;\n    }\n\n    .btn-success {\n      background: #28a745;\n      border-color: #28a745;\n      color: white;\n    }\n\n    .btn-success:hover {\n      background: #1e7e34;\n      border-color: #1c7430;\n    }\n\n    .btn-sm {\n      padding: 0.25rem 0.5rem;\n      font-size: 0.75rem;\n    }\n  `]\n})\nexport class TemplatePlaygroundComponent implements OnInit, OnDestroy {\n  @ViewChild('editorContainer', { static: true }) editorContainer!: ElementRef;\n  @ViewChild('previewFrame', { static: true }) previewFrame!: ElementRef;\n\n  sessionId: string = '';\n  templates: Template[] = [];\n  selectedFile: Template | null = null;\n  config: CompoDocConfig = {};\n  showConfigPanel: boolean = false;\n  saving: boolean = false;\n  lastSaved: Date | null = null;\n\n  private saveTimeout?: number;\n  private readonly SAVE_DELAY = 300; // 300ms debounce\n\n  get previewUrl(): string {\n    return this.sessionId ? `/api/session/${this.sessionId}/docs/` : '';\n  }\n\n  constructor(\n    private http: HttpClient,\n    private editorService: TemplateEditorService,\n    private zipService: ZipExportService,\n    private hbsService: HbsRenderService\n  ) {}\n\n  async ngOnInit() {\n    try {\n      await this.createSession();\n      await this.loadSessionTemplates();\n      await this.loadSessionConfig();\n      this.initializeEditor();\n    } catch (error) {\n      console.error('Error initializing template playground:', error);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n  }\n\n  private async createSession(): Promise {\n    const response = await this.http.post('/api/session/create', {}).toPromise();\n    if (response && response.success) {\n      this.sessionId = response.sessionId;\n      console.log('Session created:', this.sessionId);\n    } else {\n      throw new Error('Failed to create session');\n    }\n  }\n\n  private async loadSessionTemplates(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/templates`).toPromise();\n    if (response && response.success) {\n      this.templates = response.templates;\n\n      // Auto-select the first template\n      if (this.templates.length > 0 && !this.selectedFile) {\n        this.selectFile(this.templates[0]);\n      }\n    }\n  }\n\n  private async loadSessionConfig(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/config`).toPromise();\n    if (response && response.success) {\n      this.config = response.config;\n    }\n  }\n\n  initializeEditor() {\n    this.editorService.initializeEditor(this.editorContainer.nativeElement);\n\n    // Set up debounced save on content change\n    this.editorService.setOnChangeCallback((content: string) => {\n      this.scheduleAutoSave(content);\n    });\n  }\n\n  async selectFile(template: Template) {\n    this.selectedFile = template;\n\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.get(`/api/session/${this.sessionId}/template/${template.path}`).toPromise();\n      if (response && response.success) {\n        this.editorService.setEditorContent(response.content, template.type === 'template' ? 'handlebars' : 'handlebars');\n      }\n    } catch (error) {\n      console.error('Error loading template:', error);\n    }\n  }\n\n  private scheduleAutoSave(content: string): void {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    // Clear existing timeout\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Set saving indicator\n    this.saving = true;\n\n    // Schedule new save\n    this.saveTimeout = window.setTimeout(async () => {\n      try {\n        await this.saveTemplate(content);\n        this.saving = false;\n        this.lastSaved = new Date();\n      } catch (error) {\n        console.error('Error saving template:', error);\n        this.saving = false;\n      }\n    }, this.SAVE_DELAY);\n  }\n\n  private async saveTemplate(content: string): Promise {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    const response = await this.http.post(`/api/session/${this.sessionId}/template/${this.selectedFile.path}`, {\n      content\n    }).toPromise();\n\n    if (!response || !response.success) {\n      throw new Error('Failed to save template');\n    }\n  }\n\n  async updateConfig(): Promise {\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.post(`/api/session/${this.sessionId}/config`, {\n        config: this.config\n      }).toPromise();\n\n      if (response && response.success) {\n        // Config updated, documentation will be regenerated automatically\n      }\n    } catch (error) {\n      console.error('Error updating config:', error);\n    }\n  }\n\n  toggleConfigPanel(): void {\n    this.showConfigPanel = !this.showConfigPanel;\n  }\n\n  refreshPreview(): void {\n    if (this.previewFrame?.nativeElement) {\n      this.previewFrame.nativeElement.src = this.previewFrame.nativeElement.src;\n    }\n  }\n\n  resetToDefault(): void {\n    // Implementation for resetting to default templates\n    if (confirm('Are you sure you want to reset all templates to their default values? This action cannot be undone.')) {\n      // TODO: Implement reset functionality\n      console.log('Reset to default templates');\n    }\n  }\n\n  async exportZip(): Promise {\n    try {\n      if (!this.sessionId) {\n        console.error('No active session. Please refresh the page and try again.');\n        return;\n      }\n\n      console.log('Creating template package...');\n\n      // Call server-side ZIP creation endpoint for all templates\n      const response = await this.http.post(`/api/session/${this.sessionId}/download-all-templates`, {}, {\n        responseType: 'blob',\n        observe: 'response'\n      }).toPromise();\n\n      if (!response || !response.body) {\n        throw new Error('Failed to create template package');\n      }\n\n      // Get the ZIP file as a blob\n      const zipBlob = response.body;\n\n      // Get filename from response headers or construct it\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `compodoc-templates-${this.sessionId}.zip`;\n\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n\n      // Create download link and trigger download\n      const url = URL.createObjectURL(zipBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      console.log('Template package downloaded successfully!');\n    } catch (error) {\n      console.error('Error downloading template package:', error);\n    }\n  }\n\n  trackByName(index: number, item: Template): string {\n    return item.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemplateEditorService.html":{"url":"injectables/TemplateEditorService.html","title":"injectable - TemplateEditorService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  TemplateEditorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            docs/template-playground/template-editor.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editor\n                            \n                            \n                                    Private\n                                onChangeCallback\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                destroy\n                            \n                            \n                                    Private\n                                getLanguageFromFileType\n                            \n                            \n                                initializeEditor\n                            \n                            \n                                    Private\n                                registerHandlebarsLanguage\n                            \n                            \n                                setEditorContent\n                            \n                            \n                                setOnChangeCallback\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        destroy\n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/template-editor.service.ts:167\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getLanguageFromFileType\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLanguageFromFileType(fileType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/template-editor.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeEditor\n                        \n                    \n                \n            \n            \n                \ninitializeEditor(container: HTMLElement)\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/template-editor.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                container\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registerHandlebarsLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerHandlebarsLanguage()\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/template-editor.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditorContent\n                        \n                    \n                \n            \n            \n                \nsetEditorContent(content: string, fileType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/template-editor.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setOnChangeCallback\n                        \n                    \n                \n            \n            \n                \nsetOnChangeCallback(callback: (value: string) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/template-editor.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in docs/template-playground/template-editor.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onChangeCallback\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in docs/template-playground/template-editor.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\ndeclare const monaco: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemplateEditorService {\n  private editor: any;\n  private onChangeCallback: ((value: string) => void) | null = null;\n\n  initializeEditor(container: HTMLElement) {\n    // Initialize Monaco Editor\n    this.editor = monaco.editor.create(container, {\n      value: '',\n      language: 'html',\n      theme: 'vs-dark',\n      automaticLayout: true,\n      minimap: {\n        enabled: true\n      },\n      scrollBeyondLastLine: false,\n      fontSize: 14,\n      wordWrap: 'on',\n      lineNumbers: 'on',\n      roundedSelection: false,\n      scrollbar: {\n        horizontal: 'visible',\n        vertical: 'visible'\n      },\n      overviewRulerLanes: 2,\n      quickSuggestions: {\n        other: true,\n        comments: true,\n        strings: true\n      },\n      parameterHints: {\n        enabled: true\n      },\n      autoClosingBrackets: 'always',\n      autoClosingQuotes: 'always',\n      suggestOnTriggerCharacters: true,\n      acceptSuggestionOnEnter: 'on',\n      tabCompletion: 'on',\n      wordBasedSuggestions: false\n    });\n\n    // Set up change listener\n    this.editor.onDidChangeModelContent(() => {\n      if (this.onChangeCallback) {\n        this.onChangeCallback(this.editor.getValue());\n      }\n    });\n\n    // Register custom language definitions\n    this.registerHandlebarsLanguage();\n  }\n\n  setEditorContent(content: string, fileType: string) {\n    if (this.editor) {\n      const language = this.getLanguageFromFileType(fileType);\n      const model = monaco.editor.createModel(content, language);\n      this.editor.setModel(model);\n    }\n  }\n\n  setOnChangeCallback(callback: (value: string) => void) {\n    this.onChangeCallback = callback;\n  }\n\n  private getLanguageFromFileType(fileType: string): string {\n    switch (fileType) {\n      case 'hbs':\n        return 'handlebars';\n      case 'css':\n      case 'scss':\n        return 'css';\n      case 'js':\n        return 'javascript';\n      case 'ts':\n        return 'typescript';\n      default:\n        return 'html';\n    }\n  }\n\n  private registerHandlebarsLanguage() {\n    // Register Handlebars language for Monaco Editor\n    if (monaco.languages.getLanguages().find((lang: any) => lang.id === 'handlebars')) {\n      return; // Already registered\n    }\n\n    monaco.languages.register({ id: 'handlebars' });\n\n    monaco.languages.setMonarchTokensProvider('handlebars', {\n      tokenizer: {\n        root: [\n          [/\\{\\{\\{/, { token: 'keyword', next: '@handlebars_unescaped' }],\n          [/\\{\\{/, { token: 'keyword', next: '@handlebars' }],\n          [//, 'comment', '@pop'],\n          [/[^-]+/, 'comment'],\n          [/./, 'comment']\n        ],\n\n        doctype: [\n          [/[^>]+/, 'metatag.content'],\n          [/>/, 'metatag', '@pop']\n        ],\n\n        tag: [\n          [/[ \\t\\r\\n]+/, 'white'],\n          [/(\\w+)(\\s*=\\s*)(\"([^\"]*)\")/, ['attribute.name', 'delimiter', 'attribute.value', 'attribute.value']],\n          [/(\\w+)(\\s*=\\s*)('([^']*)')/, ['attribute.name', 'delimiter', 'attribute.value', 'attribute.value']],\n          [/\\w+/, 'attribute.name'],\n          [/>/, 'delimiter', '@pop']\n        ]\n      }\n    });\n\n    monaco.languages.setLanguageConfiguration('handlebars', {\n      comments: {\n        blockComment: ['']\n      },\n      brackets: [\n        [''],\n        ['{{', '}}'],\n        ['{{{', '}}}']\n      ],\n      autoClosingPairs: [\n        { open: '' },\n        { open: '{{', close: '}}' },\n        { open: '{{{', close: '}}}' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n      ],\n      surroundingPairs: [\n        { open: '' },\n        { open: '{{', close: '}}' },\n        { open: '{{{', close: '}}}' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n      ]\n    });\n  }\n\n  destroy() {\n    if (this.editor) {\n      this.editor.dispose();\n      this.editor = null;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TemplatePlaygroundModule.html":{"url":"modules/TemplatePlaygroundModule.html","title":"module - TemplatePlaygroundModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    TemplatePlaygroundModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TemplatePlaygroundModule\n\n\n\ncluster_TemplatePlaygroundModule_bootstrap\n\n\n\ncluster_TemplatePlaygroundModule_declarations\n\n\n\ncluster_TemplatePlaygroundModule_providers\n\n\n\n\nTemplatePlaygroundComponent\n\nTemplatePlaygroundComponent\n\n\n\nTemplatePlaygroundModule\n\nTemplatePlaygroundModule\n\nTemplatePlaygroundModule -->\n\nTemplatePlaygroundComponent->TemplatePlaygroundModule\n\n\n\n\n\nTemplatePlaygroundComponent \n\nTemplatePlaygroundComponent \n\nTemplatePlaygroundComponent  -->\n\nTemplatePlaygroundModule->TemplatePlaygroundComponent \n\n\n\n\n\nHbsRenderService\n\nHbsRenderService\n\nTemplatePlaygroundModule -->\n\nHbsRenderService->TemplatePlaygroundModule\n\n\n\n\n\nTemplateEditorService\n\nTemplateEditorService\n\nTemplatePlaygroundModule -->\n\nTemplateEditorService->TemplatePlaygroundModule\n\n\n\n\n\nZipExportService\n\nZipExportService\n\nTemplatePlaygroundModule -->\n\nZipExportService->TemplatePlaygroundModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            docs/template-playground/template-playground.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            TemplatePlaygroundComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            HbsRenderService\n                        \n                        \n                            TemplateEditorService\n                        \n                        \n                            ZipExportService\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            TemplatePlaygroundComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { TemplatePlaygroundComponent } from './template-playground.component';\nimport { TemplateEditorService } from './template-editor.service';\nimport { ZipExportService } from './zip-export.service';\nimport { HbsRenderService } from './hbs-render.service';\n\n@NgModule({\n  declarations: [\n    TemplatePlaygroundComponent\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [\n    TemplateEditorService,\n    ZipExportService,\n    HbsRenderService\n  ],\n  bootstrap: [TemplatePlaygroundComponent]\n})\nexport class TemplatePlaygroundModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This DTO is used to validate the new details provided for a user's profile update.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new name of the user', example: 'John Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsNotEmpty } from \"class-validator\";\n\n/**\n * @class UpdateUserDto\n * @description Data transfer object for updating user information.\n * This DTO is used to validate the new details provided for a user's profile update.\n */\nexport class UpdateUserDto {\n  /**\n   * @property {string} name\n   * @description The new name of the user. This field is required and cannot be empty.\n   * @example \"John Doe\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"The new name of the user\",\n    example: \"John Doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\nimport { BlogPostUserSchema, BlogPostUser } from \"../schemas/user.schema\";\n\nimport { UserService } from \"./user.service\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: BlogPostUser.name, schema: BlogPostUserSchema }])],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UserService is responsible for managing user-related operations,\nincluding registration, user information updates and more.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findByUsernameOrEmail\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserName\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of the UserService.\nallowing interaction with the user data in the database.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Mongoose model for the BlogPostUser schema,\nallowing interaction with the user data in the database.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(password: string, hashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Compares a plain text password with a hashed password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to compare.\n\n\n                                            \n                                        \n                                        \n                                                hashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hashed password to compare against.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves to a boolean indicating whether the passwords match.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Finds a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Finds a user by their username.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsernameOrEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsernameOrEmail(identifier: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Finds a user by their username or email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                identifier\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username or email of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Registers a new user in the system after validating that\nthe username and email are not already in use.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing user registration information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \nA promise that resolves to the newly created user data, excluding the password.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserName(userId: mongoose.Types.ObjectId, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Updates the name of a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the new user name.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \nA promise that resolves to the updated user data, excluding the password.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Validates a user by their login credentials, checking if the user exists and\nif the password is correct.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the login credentials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if validation is successful.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, ConflictException, UnauthorizedException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport * as bcrypt from \"bcrypt\";\nimport mongoose, { Model } from \"mongoose\";\n\nimport { UpdateUserDto } from \"../auth/dto/update-user.dto\";\nimport { BlogPostUser, BlogPostUserDocument } from \"../schemas/user.schema\";\n\nimport { LoginUserDto } from \"@/auth/dto/login-user.dto\";\nimport { RegisterUserDto } from \"@/auth/dto/register-user.dto\";\n\n/**\n * @class UserService\n * UserService is responsible for managing user-related operations,\n * including registration, user information updates and more.\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Creates an instance of the UserService.\n   *\n   * @param {Model} userModel - The Mongoose model for the BlogPostUser schema,\n   * allowing interaction with the user data in the database.\n   */\n  constructor(@InjectModel(BlogPostUser.name) private userModel: Model) {}\n\n  /**\n   * Registers a new user in the system after validating that\n   * the username and email are not already in use.\n   *\n   * @param {RegisterUserDto} registerUserDto - The data transfer object containing user registration information.\n   * @returns {Promise>} - A promise that resolves to the newly created user data, excluding the password.\n   * @throws {ConflictException} - If a user with the same username or email already exists.\n   */\n  public async register(registerUserDto: RegisterUserDto): Promise> {\n    const { username, password, email, name } = registerUserDto;\n    const existingUser = await this.userModel.findOne({ $or: [{ username }, { email }] }).exec();\n    if (existingUser) {\n      throw new ConflictException(\"User with this username or email already exists.\");\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const newUser = new this.userModel({\n      username,\n      password: hashedPassword,\n      email,\n      name,\n    });\n    const savedUser = await newUser.save();\n\n    const { password: _, ...userWithoutPassword } = savedUser.toObject();\n    return userWithoutPassword;\n  }\n\n  /**\n   * Compares a plain text password with a hashed password.\n   *\n   * @param {string} password - The plain text password to compare.\n   * @param {string} hashedPassword - The hashed password to compare against.\n   * @returns {Promise} - A promise that resolves to a boolean indicating whether the passwords match.\n   */\n  public async comparePassword(password: string, hashedPassword: string): Promise {\n    return await bcrypt.compare(password, hashedPassword);\n  }\n\n  /**\n   * Finds a user by their username.\n   *\n   * @param {string} username - The username of the user to find.\n   * @returns {Promise} - A promise that resolves to the user document if found.\n   */\n  async findByUsername(username: string): Promise {\n    return await this.userModel.findOne({ username }).exec();\n  }\n\n  /**\n   * Finds a user by their username or email.\n   *\n   * @param {string} identifier - The username or email of the user to find.\n   * @returns {Promise} - A promise that resolves to the user document if found.\n   */\n  async findByUsernameOrEmail(identifier: string): Promise {\n    return await this.userModel.findOne({ $or: [{ username: identifier }, { email: identifier }] }).exec();\n  }\n\n  /**\n   * Finds a user by their ID.\n   *\n   * @param {string} userId - The ID of the user to find.\n   * @returns {Promise} - A promise that resolves to the user document if found.\n   * @throws {NotFoundException} - If the user is not found.\n   */\n  async findById(userId: string): Promise {\n    const user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n    return user;\n  }\n\n  /**\n   * Validates a user by their login credentials, checking if the user exists and\n   * if the password is correct.\n   *\n   * @param {LoginUserDto} loginUserDto - The data transfer object containing the login credentials.\n   * @returns {Promise} - A promise that resolves to the user document if validation is successful.\n   * @throws {NotFoundException} - If the user is not found.\n   * @throws {UnauthorizedException} - If the password is invalid.\n   */\n  async validateUser(loginUserDto: LoginUserDto): Promise {\n    const user = await this.findByUsernameOrEmail(loginUserDto.email ?? loginUserDto.username);\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n    const passwordMatches = await this.comparePassword(loginUserDto.password, user.password);\n    if (!passwordMatches) {\n      throw new UnauthorizedException(\"Invalid password\");\n    }\n    return user;\n  }\n\n  /**\n   * Updates the name of a user.\n   *\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - The data transfer object containing the new user name.\n   * @returns {Promise>} - A promise that resolves to the updated user data, excluding the password.\n   * @throws {NotFoundException} - If the user is not found.\n   */\n  public async updateUserName(userId: mongoose.Types.ObjectId, updateUserDto: UpdateUserDto): Promise> {\n    const { name } = updateUserDto;\n\n    const user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n\n    user.name = name;\n    const updatedUser = await user.save();\n\n    const { password: _, ...userWithoutPassword } = updatedUser.toObject();\n    return userWithoutPassword;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ZipExportService.html":{"url":"injectables/ZipExportService.html","title":"injectable - ZipExportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ZipExportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            docs/template-playground/zip-export.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                downloadBlob\n                            \n                            \n                                exportTemplates\n                            \n                            \n                                    Private\n                                generateReadme\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        downloadBlob\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadBlob(blob: Blob, filename: string)\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/zip-export.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                blob\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exportTemplates\n                        \n                    \n                \n            \n            \n                \nexportTemplates(files: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/zip-export.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateReadme\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateReadme()\n                \n            \n\n\n                    \n                        \n                            Defined in docs/template-playground/zip-export.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\ndeclare const JSZip: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ZipExportService {\n\n  exportTemplates(files: any[]) {\n    const zip = new JSZip();\n\n    // Add all template files to the ZIP\n    files.forEach(file => {\n      zip.file(file.path, file.content);\n    });\n\n    // Add a README with instructions\n    const readme = this.generateReadme();\n    zip.file('README.md', readme);\n\n    // Generate and download the ZIP file\n    zip.generateAsync({ type: 'blob' })\n      .then((content: Blob) => {\n        this.downloadBlob(content, 'compodoc-templates.zip');\n      });\n  }\n\n  private generateReadme(): string {\n    return `# Compodoc Custom Templates\n\nThis ZIP file contains customized templates for Compodoc documentation generation.\n\n## Contents\n\n- **Templates** (\\`.hbs\\` files): Handlebars templates for generating documentation pages\n- **Styles** (\\`.css\\` files): Stylesheets for customizing the appearance\n- **Scripts** (\\`.js\\` files): JavaScript files for additional functionality\n\n## Usage\n\n1. Extract this ZIP file to a directory on your system\n2. Use the \\`--templates\\` flag when running Compodoc to specify the path to your custom templates:\n\n   \\`\\`\\`bash\n   compodoc -p tsconfig.json --templates ./path/to/custom/templates/\n   \\`\\`\\`\n\n## Template Structure\n\n- \\`page.hbs\\` - Main page template\n- \\`partials/\\` - Directory containing partial templates\n- \\`styles/\\` - Directory containing CSS files\n- \\`js/\\` - Directory containing JavaScript files\n\n## Customization Tips\n\n1. **Templates**: Use Handlebars syntax to customize the HTML structure\n2. **Styles**: Modify CSS to change colors, fonts, layout, etc.\n3. **Scripts**: Add custom JavaScript functionality\n\n## Backup\n\nAlways keep a backup of your original templates before making changes.\n\n## Documentation\n\nFor more information about customizing Compodoc templates, visit:\nhttps://compodoc.app/guides/template-customization.html\n\nGenerated by Compodoc Template Playground\n`;\n  }\n\n  private downloadBlob(blob: Blob, filename: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.style.display = 'none';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        docs/template-playground/hbs-render.service.ts\n            \n            injectable\n            HbsRenderService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        docs/template-playground/hbs-render.service.ts\n            \n            variable\n            Handlebars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        docs/template-playground/template-editor.service.ts\n            \n            injectable\n            TemplateEditorService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        docs/template-playground/template-editor.service.ts\n            \n            variable\n            monaco\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        docs/template-playground/template-playground.component.ts\n            \n            component\n            TemplatePlaygroundComponent\n            \n                0 %\n                (0/28)\n            \n        \n        \n            \n                \n                        docs/template-playground/template-playground.component.ts\n            \n            interface\n            CompoDocConfig\n            \n                0 %\n                (0/25)\n            \n        \n        \n            \n                \n                        docs/template-playground/template-playground.component.ts\n            \n            interface\n            Session\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        docs/template-playground/template-playground.component.ts\n            \n            interface\n            Template\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        docs/template-playground/zip-export.service.ts\n            \n            injectable\n            ZipExportService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        docs/template-playground/zip-export.service.ts\n            \n            variable\n            JSZip\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/auth/decorators/hasUsernameOrEmail.decorator.ts\n            \n            function\n            hasUsernameOrEmail\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/dto/create-comment.dto.stub.ts\n            \n            variable\n            CreateCommentDtoStub\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/post/dto/create-post.dto.stub.ts\n            \n            variable\n            CreatePostDtoStub\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/post/dto/create-relationship.dto.ts\n            \n            class\n            CreateRelationshipDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/post/dto/get-related-posts.dto.ts\n            \n            class\n            GetRelatedPostsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/post/interfaces/post.interface.ts\n            \n            interface\n            BlogPostSanitizedResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/post/interfaces/post.interface.ts\n            \n            interface\n            CreatedBlogPostResponse\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/post/interfaces/post.interface.ts\n            \n            interface\n            ExpressRequestWithBlogPostUser\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            CommentDoesNotExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            CommentInsufficientPermissionsError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            PostCircularRelationship\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            PostDoesNotExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            PostDoesNotHaveComments\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            PostError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            PostIdValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            PostInsufficientPermissionsError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            PostRelationConflict\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/post.errors.ts\n            \n            class\n            PostSlugValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        src/post/utils/post.utils.ts\n            \n            function\n            sanitizeBlogPost\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/utils/post.utils.ts\n            \n            function\n            sanitizeBlogPosts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/comment.schema.ts\n            \n            class\n            BlogPostComment\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/schemas/comment.schema.ts\n            \n            variable\n            BlogPostCommentSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/comment.schema.ts\n            \n            type alias\n            BlogPostCommentDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            class\n            BlogPost\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            function\n            generateSlug\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            variable\n            BlogPostSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            type alias\n            BlogPostDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            class\n            BlogPostUser\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            variable\n            BlogPostUserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            type alias\n            BlogPostUserDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        src/utils/index.ts\n            \n            function\n            handleDomainErrors\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/index.ts\n            \n            function\n            isMongoDbIdValid\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.7\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.7\n        \n            @nestjs/jwt : ^11.0.1\n        \n            @nestjs/mongoose : ^11.0.3\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.7\n        \n            @nestjs/swagger : ^11.2.1\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @swc/helpers : ^0.5.17\n        \n            bcrypt : ^6.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            compression : ^1.8.1\n        \n            mongoose : ^8.19.2\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            slugify : ^1.6.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateSlug   (src/.../post.schema.ts)\n                        \n                        \n                            handleDomainErrors   (src/.../index.ts)\n                        \n                        \n                            hasUsernameOrEmail   (src/.../hasUsernameOrEmail.decorator.ts)\n                        \n                        \n                            isMongoDbIdValid   (src/.../index.ts)\n                        \n                        \n                            sanitizeBlogPost   (src/.../post.utils.ts)\n                        \n                        \n                            sanitizeBlogPosts   (src/.../post.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Initializes and bootstraps the NestJS application.\nThis function creates the Nest application, sets up Swagger documentation\nif the environment is development, applies global middlewares, and starts\nthe server on the specified port.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the application is bootstrapped.\n\n                            \n                \n            \n        \n    \n    src/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(blogPostTitle: string)\n                \n            \n\n\n\n\n            \n                \n                        Generates a slug from the blog post title.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                blogPostTitle\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe title of the blog post to generate a slug from.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe generated slug, formatted to be SEO-friendly.\n\n\n                            \n                \n            \n        \n    \n    src/utils/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleDomainErrors\n                        \n                    \n                \n            \n            \n                \nhandleDomainErrors(error)\n                \n            \n\n\n\n\n            \n                \n                        Handles domain-specific errors and maps them to appropriate HTTP exceptions.\nThis function checks if the error belongs to specific domain error classes (e.g., Post errors) and\nthrows an HttpException with the correct HTTP status code and error message. If the error doesn't match any\nknown domain error, a generic internal server error is thrown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object to handle.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     never\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMongoDbIdValid\n                        \n                    \n                \n            \n            \n                \nisMongoDbIdValid(id)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a given string is a valid MongoDB ObjectId.\nThis function uses Mongoose's ObjectId.isValid method to determine if the provided string\nis a valid representation of a MongoDB ObjectId. MongoDB ObjectIds are 24-character hexadecimal\nstrings that are unique identifiers for documents in MongoDB collections.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe string to check for validity as a MongoDB ObjectId.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if the string is a valid MongoDB ObjectId, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    src/auth/decorators/hasUsernameOrEmail.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hasUsernameOrEmail\n                        \n                    \n                \n            \n            \n                \nhasUsernameOrEmail(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        A custom validation decorator that checks if either a username or an email is provided.\nThis is useful for scenarios where one of the two fields is required for user login or registration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional validation options to customize the error message and behavior.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/post/utils/post.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sanitizeBlogPost\n                        \n                    \n                \n            \n            \n                \nsanitizeBlogPost(post: BlogPost)\n                \n            \n\n\n\n\n            \n                \n                        Sanitizes a blog post by keeping only the username fields from the createdBy\nand updatedBy user objects. All other data in these fields is removed, reducing\nthe amount of exposed user information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                post\n                                            \n                                                            BlogPost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe blog post to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BlogPostSanitizedResponse\n\n                        \n                            \n                                \nThe sanitized blog post, with only createdBy\nand updatedBy usernames included.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sanitizeBlogPosts\n                        \n                    \n                \n            \n            \n                \nsanitizeBlogPosts(posts)\n                \n            \n\n\n\n\n            \n                \n                        Sanitizes an array of blog posts by keeping only the username fields\nfrom each post's createdBy and updatedBy user objects.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                posts\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of blog posts to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BlogPostSanitizedResponse[]\n\n                        \n                            \n                                \nArray of sanitized blog posts, each with\nonly createdBy and updatedBy usernames included.\n\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\n\n  \n    \n      \n    \n  \n  Parchment CMS\n  A Headless Content Management System\n  \n    This is a toy project for a headless CMS built with\n    NestJS and MongoDB, enabling users to\n    create, delete, and partially manage their posts,\n    establish relationships between them, and engage in discussions through comments.\n  \n  \n   \n  \n\n\n🚀 Getting Started\nTo get started with this project, you can choose to either run the project natively on your machine, or with Docker.\n🏠 Running natively\nTo run the project natively, you will need to have Node.js v22.21.0 or higher and npm v10.9.4 or higher installed on your machine.\n\n🍴 Clone this repository to your local machine.\n💻 Run npm install to install the necessary dependencies.\n🚀 Start a MongoDB instance on your machine by following the instructions provided by MongoDB for your specific operating system. You can download the MongoDB Community Server from here.\n📝 Rename .env.example to .env and replace the values with your own MongoDB connection details and desired api port.\n🚀 Run npm start to start the server.\n\n🐳 Running with Docker\nTo run the project with Docker, you will need to have Docker installed on your machine.\n\n🍴 Clone this repository to your local machine.\n\n📝 Copy the .env.example file and rename it to .env. Open the .env file and specify the desired values for MONGODB_URI and PORT variables.\nFor example:\nExample :# The MongoDB connection string for the BlogPost database\nMONGODB_URI=\"mongodb://mongodb/test\"\n# The port on which the Blog CMS API will run\nPORT=\"3000\"\n# The seed string to be used for the JwtStrategy\nJWT_SECRET=\"42\"\n🐳 Run docker compose build to build the containers.\n\n🐳 Run docker compose up to start the containers.\n\n🌍 The API will be available at http://localhost:3000/.\n\n\n📖 Usage\nOnce the server is running, you can use the following endpoints to manage your blog posts:\n\nGET /api/v1/posts: Returns a list of all posts.\nPOST /api/v1/posts: Creates a new post.\nGET /api/v1/posts?page&limit: Get Posts with pagination based on created date.\nGET /api/v1/posts?slug=:slug: Returns a specific post by slug.\nGET /api/v1/posts/:id: Returns a specific post by post ID.\nDELETE /api/v1/posts/:id: Deletes a post by post ID.\nGET /api/v1/posts/:id/relations: Returns relationship posts by post ID\nPOST /api/v1/posts/relation/?sourcePostId&relationPostId: Sets a relationship between two posts.\nGET /heath: Returns useful system information, such as server uptime and memory usage. This endpoint can be used to monitor the health of the application.\n\nNote: The current pagination implementation is based on the page and limit query parameters and orders the results based on created date in ascending order.\n🚀 Future Improvements\nHere are some potential improvements that could be made to this project:\n\n Add support for updating post content\n Add support for media uploads (images, videos, etc.).\n Add support for more auth providers (Auth0,OAuth2 etc)\n Create a frontend interface for post management.\n Implement a more robust pagination solution that allows for custom sorting and filtering.\n Add support for different languages and locales.\n Write jest tests\n Add a process manager\n Add Github Actions to publish image to Docker Hub, Github Registry etc.\n\n✅ Completed Tasks\nHere are the tasks that have already been completed in this project:\n\n✅ Further optimize the Docker images to reduce size, making the deployment process faster and more efficient.\n✅ Rewrite the project in TypeScript for better type safety.\n✅ Refactor the project using the NestJs framework for better code organization and modularity.\n✅ Add support for comments in each post: Users and non-users can add comments to posts and engage in discussions.\n✅ Implement authentication to secure the API.\n✅ Add support for user: Users can create accounts, log in, and manage their profile.\n✅ Have multiple users create their own posts: Each user can create their own posts and manage them.\n\n🤝 Contributing\nContributions to this project are welcome! If you have any suggestions, bug reports, or feature requests, please open an issue or submit a pull request.\n📝 License\nThis project is licensed under the Apache License, Version 2.0. See the LICENSE file for details.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"license - license","body":"\n                   \n\n\n\n\n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright 2025 Nikolaos Grigoropoulos\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TemplatePlaygroundModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_TemplatePlaygroundModule\n\n\n\ncluster_TemplatePlaygroundModule_declarations\n\n\n\ncluster_TemplatePlaygroundModule_bootstrap\n\n\n\ncluster_TemplatePlaygroundModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nTemplatePlaygroundComponent\n\nTemplatePlaygroundComponent\n\n\n\nTemplatePlaygroundModule\n\nTemplatePlaygroundModule\n\nTemplatePlaygroundModule -->\n\nTemplatePlaygroundComponent->TemplatePlaygroundModule\n\n\n\n\n\nTemplatePlaygroundComponent \n\nTemplatePlaygroundComponent \n\nTemplatePlaygroundComponent  -->\n\nTemplatePlaygroundModule->TemplatePlaygroundComponent \n\n\n\n\n\nHbsRenderService\n\nHbsRenderService\n\nTemplatePlaygroundModule -->\n\nHbsRenderService->TemplatePlaygroundModule\n\n\n\n\n\nTemplateEditorService\n\nTemplateEditorService\n\nTemplatePlaygroundModule -->\n\nTemplateEditorService->TemplatePlaygroundModule\n\n\n\n\n\nZipExportService\n\nZipExportService\n\nTemplatePlaygroundModule -->\n\nZipExportService->TemplatePlaygroundModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : A basic headless CMS to create your own blog with the help of mongodb and nestjs(express).\n        \n            Keywords : \n        \n            License : Apache-2.0\n        \n            Author : Nikolaos Grigoropoulos\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogPostCommentDocument   (src/.../comment.schema.ts)\n                        \n                        \n                            BlogPostDocument   (src/.../post.schema.ts)\n                        \n                        \n                            BlogPostUserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/comment.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostCommentDocument\n                \n            \n            \n                \n                    The Mongoose document type for BlogPostComment, representing a hydrated document.\nThis type is used to work with comment documents retrieved from MongoDB.\n\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/schemas/post.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostDocument\n                \n            \n            \n                \n                    The Mongoose document type for BlogPost, representing a hydrated document.\nThis type is used to work with blog post documents retrieved from MongoDB.\n\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostUserDocument\n                \n            \n            \n                \n                    The type representing a hydrated BlogPostUser document.\nThis type is used to work with user documents retrieved from MongoDB.\n\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogPostCommentSchema   (src/.../comment.schema.ts)\n                        \n                        \n                            BlogPostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            BlogPostUserSchema   (src/.../user.schema.ts)\n                        \n                        \n                            CreateCommentDtoStub   (src/.../create-comment.dto.stub.ts)\n                        \n                        \n                            CreatePostDtoStub   (src/.../create-post.dto.stub.ts)\n                        \n                        \n                            Handlebars   (docs/.../hbs-render.service.ts)\n                        \n                        \n                            JSZip   (docs/.../zip-export.service.ts)\n                        \n                        \n                            monaco   (docs/.../template-editor.service.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/comment.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostCommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostComment)\n                    \n                \n\n            \n                \n                    The Mongoose schema definition for BlogPostComment.\nThis schema is used to create and manage comment documents in the MongoDB database.\n\n                \n            \n\n        \n    \n\n    src/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPost)\n                    \n                \n\n            \n                \n                    The Mongoose schema definition for BlogPost.\nThis schema is used to create and manage blog post documents in the MongoDB database.\n\n                \n            \n\n        \n    \n\n    src/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostUserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostUser)\n                    \n                \n\n            \n                \n                    The Mongoose schema definition for BlogPostUser.\nThis can be used in module imports to register the user schema with Mongoose.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostUser)\n                    \n                \n\n            \n                \n                    The Mongoose schema for the BlogPostUser.\nThis schema is used to create and manage user documents in the MongoDB database.\n\n                \n            \n\n        \n    \n\n    src/post/dto/create-comment.dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CreateCommentDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CreateCommentDto => ({\n  author: \"John Doe\",\n  content: \"Great Post!\",\n})\n                    \n                \n\n            \n                \n                    Creates a stub for the CreateCommentDto object.\nThis is used for testing purposes to provide a mock comment data structure.\n\n                \n            \n\n        \n    \n\n    src/post/dto/create-post.dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CreatePostDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CreatePostDto => ({\n  title: \"My new blog post\",\n  content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  imagePath: \"/images/my-new-post.jpg\",\n})\n                    \n                \n\n            \n                \n                    Creates a stub for the CreatePostDto object.\nThis is used for testing purposes to provide a mock post data structure.\n\n                \n            \n\n        \n    \n\n    docs/template-playground/hbs-render.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Handlebars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    docs/template-playground/zip-export.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JSZip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    docs/template-playground/template-editor.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        monaco\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

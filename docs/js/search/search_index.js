var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.91,1,2.436]],["body/controllers/AppController.html",[0,3.519,1,3.942,2,2.319,3,0.331,4,0.295,5,0.228,6,3.959,7,0.404,8,4.36,9,3.608,10,5.771,11,4.36,12,5.771,13,2.241,14,0.847,15,3.091,16,5.601,17,1.699,18,0.022,19,1.14,20,4.643,21,4.36,22,4.36,23,4.964,24,3.091,25,4.36,26,2.379,27,0.822,28,4.921,29,4.36,30,4.36,31,3.608,32,0.945,33,1.514,34,3.623,35,3.959,36,3.508,37,1.914,38,4.643,39,4.643,40,0.331,41,0.205,42,3.508,43,3.171,44,2.17,45,4.643,46,0.017,47,0.017]],["title/modules/AppModule.html",[48,1.306,49,2.436]],["body/modules/AppModule.html",[1,4.195,2,2.796,3,0.315,4,0.281,5,0.217,18,0.022,32,1.061,33,1.442,34,3.925,35,3.77,40,0.315,41,0.195,46,0.017,47,0.017,48,2.248,49,4.951,50,2.208,51,2.208,52,2.764,53,2.764,54,2.368,55,3.543,56,2.764,57,3.77,58,3.77,59,3.77,60,4.253,61,4.253,62,4.253,63,3.925,64,3.499,65,2.764,66,2.551,67,4.421,68,2.998,69,3.34,70,2.067,71,4.421,72,3.34,73,4.421,74,4.421,75,4.421,76,4.421,77,3.77,78,4.421,79,4.421]],["title/injectables/AppService.html",[34,2.058,80,1.306]],["body/injectables/AppService.html",[3,0.236,4,0.211,5,0.162,7,0.402,9,3.917,14,0.605,16,2.826,18,0.023,19,1.413,22,4.858,23,4.019,24,2.849,25,4.019,26,2.704,27,0.858,28,2.826,30,4.019,31,3.325,32,0.695,33,1.081,34,3.491,40,0.236,41,0.204,42,2.504,43,2.264,44,2.689,46,0.014,47,0.014,72,2.504,80,1.691,81,1.775,82,2.826,83,3.082,84,3.491,85,4.906,86,5.753,87,3.156,88,4.621,89,5.197,90,5.319,91,5.319,92,1.656,93,3.315,94,6.559,95,3.315,96,1.134,97,1.345,98,1.549,99,1.021,100,0.643,101,1.454,102,3.491,103,4.28,104,3.315,105,3.315,106,4.621,107,3.939,108,4.535,109,3.491,110,5.754,111,3.315,112,3.315,113,3.156,114,3.939,115,6.051,116,4.535,117,3.315,118,3.491,119,2.888,120,3.156,121,3.939,122,6.051,123,2.475,124,5.343,125,1.675,126,0.912,127,2.504,128,1.775,129,4.621,130,3.315,131,3.156,132,1.454,133,1.287,134,3.315,135,2.308,136,3.315,137,5.754,138,3.315,139,2.072,140,3.315,141,2.826,142,2.826,143,2.826,144,3.315,145,1.912,146,3.315,147,3.939,148,3.491,149,3.315,150,2.264,151,2.504,152,3.315,153,2.826,154,2.264,155,3.315,156,3.315,157,3.315]],["title/controllers/AuthController.html",[0,1.91,158,2.436]],["body/controllers/AuthController.html",[0,2.418,2,1.242,3,0.177,4,0.158,5,0.122,7,0.595,8,1.878,13,1.952,14,0.454,15,2.008,17,1.652,18,0.023,19,1.108,26,2.498,29,2.833,32,0.95,33,0.811,36,1.878,37,1.025,40,0.177,41,0.165,43,1.698,44,2.11,46,0.011,47,0.011,83,2.008,87,2.561,92,1.242,96,0.61,97,0.724,98,2.11,99,1.747,100,1.047,101,1.98,120,2.561,126,1.56,128,3.037,145,3.496,158,3.433,159,2.12,160,2.12,161,2.486,162,2.012,163,2.822,164,1.753,165,3.433,166,3.68,167,3.876,168,3.083,169,3.849,170,2.12,171,3.496,172,2.486,173,5.027,174,5.027,175,3.749,176,1.546,177,2.486,178,5.027,179,5.027,180,3.749,181,3.749,182,3.684,183,2.486,184,3.749,185,3.411,186,2.486,187,3.197,188,2.822,189,4.286,190,2.432,191,2.202,192,1.738,193,3.142,194,3.589,195,3.272,196,2.12,197,3.788,198,2.486,199,5.027,200,2.486,201,3.749,202,2.094,203,2.604,204,3.083,205,3.411,206,2.486,207,3.197,208,2.073,209,3.197,210,2.833,211,2.486,212,3.876,213,5.027,214,3.112,215,2.486,216,2.486,217,3.197,218,3.496,219,2.344,220,2.008,221,2.12,222,0.426,223,2.486,224,2.486,225,3.749,226,6.059,227,1.644,228,1.332,229,2.695,230,1.878,231,3.112,232,2.12,233,2.12,234,3.411,235,2.486,236,1.698,237,2.486,238,2.486,239,2.486,240,2.486,241,2.486,242,2.12,243,1.162,244,1.878,245,2.344,246,3.749,247,2.12,248,1.698,249,3.083,250,2.486,251,5.019,252,2.486,253,2.486,254,1.698,255,2.12,256,2.486,257,1.162,258,2.12,259,2.486,260,2.486,261,2.486,262,2.486,263,1.878,264,1.878,265,2.486,266,2.486,267,2.486,268,2.486]],["title/modules/AuthModule.html",[48,1.306,60,2.23]],["body/modules/AuthModule.html",[2,2.833,3,0.322,4,0.287,5,0.221,18,0.022,32,1.029,33,1.473,40,0.322,41,0.199,46,0.017,47,0.017,48,2.27,50,2.256,51,2.256,52,2.823,53,2.823,54,2.419,55,3.578,56,3.877,60,4.486,63,3.946,64,3.546,65,2.823,66,2.605,68,3.038,77,3.851,158,4.236,231,4.16,232,3.851,269,3.851,270,4.516,271,3.851,272,3.851,273,3.946,274,4.516,275,4.516,276,3.412,277,4.516,278,4.516,279,4.516,280,4.516,281,3.851,282,4.516,283,4.516,284,4.516]],["title/injectables/AuthService.html",[80,1.306,231,2.058]],["body/injectables/AuthService.html",[3,0.255,4,0.228,5,0.176,7,0.483,8,3.686,14,0.655,15,2.613,18,0.022,19,1.198,26,2.011,29,4.495,32,0.895,33,1.17,40,0.255,41,0.215,44,1.676,46,0.015,47,0.015,80,1.786,81,1.921,83,3.439,92,2.437,96,1.198,97,1.42,98,2.28,99,1.503,100,0.947,101,2.139,119,3.049,126,1.525,128,1.921,135,2.769,145,3.432,162,1.946,163,3.049,164,2.28,166,4.236,167,3.466,170,4.159,171,3.789,182,2.45,187,4.159,188,4.013,189,5.474,190,1.786,191,1.894,192,1.637,193,3.89,194,3.333,195,2.814,202,2.152,210,2.437,229,3.339,230,2.71,231,3.59,233,3.058,234,2.71,243,2.28,244,3.686,245,3.049,249,2.45,254,2.45,258,4.159,276,2.71,285,3.058,286,4.878,287,4.189,288,3.058,289,6.777,290,3.586,291,4.878,292,4.878,293,4.159,294,3.586,295,3.686,296,3.049,297,3.049,298,3.586,299,2.45,300,3.586,301,3.058,302,3.586,303,3.058,304,3.586,305,3.586]],["title/classes/BlogPost.html",[41,0.157,306,1.385]],["body/classes/BlogPost.html",[3,0.17,4,0.152,5,0.117,7,0.208,14,0.804,17,2.244,18,0.023,19,1.561,26,0.985,27,0.844,32,0.797,40,0.314,41,0.105,44,1.116,46,0.011,47,0.011,70,1.116,100,1.311,101,1.595,109,2.748,123,2.36,126,0.657,131,3.364,132,2.16,135,1.817,139,4.222,162,1.434,164,1.7,176,2.528,208,1.5,220,2.638,222,1.202,227,1.047,243,1.7,295,2.748,297,1.493,306,2.38,307,0.522,308,1.493,309,2.099,310,2.306,311,2.485,312,2.099,313,1.817,314,3.079,315,2.748,316,2.302,317,1.606,318,2.923,319,2.528,320,2.991,321,2.748,322,2.125,323,2.542,324,3.909,325,2.36,326,3.756,327,2.118,328,2.841,329,2.839,330,4.199,331,4.519,332,2.389,333,4.199,334,2.485,335,1.948,336,3.721,337,2.389,338,3.638,339,2.648,340,5.421,341,5.301,342,2.797,343,2.389,344,2.46,345,4.925,346,3.62,347,2.389,348,2.748,349,2.389,350,1.948,351,2.099,352,3.364,353,2.389,354,1.518,355,3.638,356,3.101,357,3.638,358,3.101,359,2.389,360,2.389,361,3.756,362,3.756,363,3.638,364,2.389,365,2.389,366,2.485,367,4.725,368,1.805,369,2.485,370,2.46,371,3.101,372,2.485,373,2.389,374,2.389,375,2.037,376,3.101,377,2.099,378,1.631,379,1.631,380,1.493,381,1.631,382,1.493,383,1.116,384,1.493,385,1.279,386,1.631,387,2.037,388,2.037,389,2.037,390,2.037,391,2.748,392,2.037,393,2.389,394,2.389,395,2.389,396,2.389,397,2.389,398,2.389,399,2.037,400,1.047,401,1.805,402,2.389,403,2.389,404,3.638,405,3.638,406,2.389,407,2.389,408,2.389,409,2.389]],["title/classes/BlogPostComment.html",[41,0.157,329,1.91]],["body/classes/BlogPostComment.html",[3,0.247,4,0.221,5,0.17,7,0.302,14,0.634,17,2.149,18,0.023,19,1.441,27,0.832,32,0.718,40,0.388,41,0.153,46,0.014,47,0.014,70,1.624,99,1.471,100,1.346,109,3.606,123,2.556,131,2.372,132,2.093,135,1.735,139,4.071,164,2.231,176,2.621,208,1.432,222,0.818,297,2.984,307,0.759,309,2.753,310,1.557,312,2.753,313,2.384,314,3.67,315,3.606,316,2.972,317,1.915,319,2.685,324,4.365,329,3.406,330,2.962,331,2.962,335,3.8,336,3.606,342,2.744,344,2.384,348,3.606,367,4.649,368,2.624,369,3.26,370,2.724,372,2.372,375,2.962,377,2.753,378,2.372,379,2.372,380,2.171,381,2.372,382,2.171,383,1.624,384,2.171,385,1.861,399,4.069,400,2.093,410,2.372,411,4.071,412,4.649,413,5.871,414,4.773,415,3.474,416,3.26,417,3.474,418,3.606,419,3.474,420,3.474,421,3.474,422,2.962,423,2.624,424,2.962]],["title/interfaces/BlogPostSanitizedResponse.html",[425,1.782,426,1.91]],["body/interfaces/BlogPostSanitizedResponse.html",[3,0.26,4,0.232,5,0.179,7,0.318,13,2.171,14,0.666,18,0.023,27,0.934,32,0.841,40,0.398,46,0.015,47,0.015,100,1.334,162,1.954,176,1.504,192,1.004,202,2.326,210,1.822,214,2.847,218,3.457,219,2.281,220,2.644,222,1.178,228,1.954,306,2.171,309,3.227,310,2.242,317,1.61,318,2.307,319,2.035,320,2.644,323,3.612,325,1.954,328,3.612,339,2.993,344,3.127,350,1.954,351,2.105,366,3.371,425,3.223,426,2.996,427,2.281,428,2.492,429,3.085,430,4.226,431,3.085,432,3.729,433,2.105,434,3.729,435,3.085,436,2.281,437,2.492,438,2.757,439,2.757,440,2.281,441,2.281,442,2.105,443,2.847,444,2.847,445,2.757,446,2.492,447,2.492,448,2.492,449,2.492]],["title/classes/BlogPostUser.html",[41,0.157,227,1.564]],["body/classes/BlogPostUser.html",[3,0.257,4,0.23,5,0.177,7,0.314,14,0.659,17,2.183,18,0.023,19,1.464,27,0.876,32,0.737,40,0.425,41,0.159,46,0.015,47,0.015,48,1.321,68,1.933,70,1.687,99,2.027,100,1.277,123,3.585,132,2.439,135,2.447,139,4.362,162,2.066,164,2.29,168,2.465,176,2.76,202,2.554,203,3.795,222,0.84,227,2.885,296,4.112,307,0.789,309,2.826,310,1.598,311,3.346,312,2.826,313,2.447,314,3.729,315,3.701,316,2.788,317,1.946,336,4.507,339,1.803,342,2.788,367,4.712,368,2.727,369,3.346,370,2.98,377,2.082,378,2.465,379,2.465,380,2.256,381,2.465,382,2.256,383,1.687,384,2.256,385,1.933,450,2.465,451,3.609,452,4.177,453,3.609,454,3.609,455,4.177,456,3.609,457,2.727,458,4.177,459,2.465]],["title/classes/CommentDoesNotExist.html",[41,0.157,460,1.306]],["body/classes/CommentDoesNotExist.html",[3,0.271,4,0.242,5,0.186,7,0.331,18,0.023,27,0.664,40,0.494,41,0.325,46,0.015,47,0.015,96,0.934,97,1.108,125,1.478,126,1.047,133,1.477,222,1.143,307,0.832,322,2.091,327,1.314,354,1.172,433,2.368,460,1.858,461,1.568,462,2.901,463,2.355,464,2.663,465,1.668,466,1.668,467,1.568,468,1.668,469,1.392,470,1.392,471,1.668,472,1.568,473,1.392,474,1.478,475,2.093,476,1.392,477,1.241,478,1.392,479,1.392,480,2.226,481,2.093,482,1.392,483,1.392]],["title/classes/CommentInsufficientPermissionsError.html",[41,0.157,483,1.306]],["body/classes/CommentInsufficientPermissionsError.html",[3,0.271,4,0.242,5,0.186,7,0.331,18,0.023,27,0.663,40,0.493,41,0.325,46,0.015,47,0.015,96,0.932,97,1.106,125,1.476,126,1.045,133,1.475,222,1.161,307,0.83,322,1.856,327,1.312,354,1.17,433,2.368,460,1.39,461,1.566,462,2.9,463,2.09,464,2.663,465,1.666,466,1.666,467,1.566,468,1.666,469,1.39,470,1.39,471,1.666,472,1.566,473,1.39,474,1.476,475,2.09,476,1.39,477,1.239,478,1.39,479,1.39,480,2.503,481,2.353,482,1.39,483,1.856]],["title/classes/CreateCommentDto.html",[41,0.157,484,2.23]],["body/classes/CreateCommentDto.html",[3,0.282,4,0.252,5,0.194,7,0.507,14,0.722,17,1.906,18,0.022,19,1.278,27,0.913,32,0.783,37,1.63,40,0.282,41,0.273,46,0.016,47,0.016,99,1.907,100,1.01,125,1.802,132,2.284,164,2.434,190,2.265,191,2.022,192,1.433,222,0.893,257,2.892,307,0.864,313,2.601,317,1.698,319,2.899,335,3.791,342,2.434,383,2.434,411,4.395,474,1.516,484,3.255,485,3.64,486,3.371,487,3.557,488,5.207,489,3.557,490,3.255,491,3.557,492,3.954,493,5.207,494,4.271,495,3.954,496,4.675,497,4.44,498,5.207,499,5.207,500,5.207,501,3.954,502,3.954,503,3.359,504,3.359,505,1.975,506,3.119,507,2.7]],["title/classes/CreatePostDto.html",[41,0.157,508,2.23]],["body/classes/CreatePostDto.html",[3,0.255,4,0.228,5,0.175,7,0.517,9,3.043,14,0.653,17,2.026,18,0.022,19,1.359,27,0.886,32,0.732,37,1.474,40,0.255,41,0.262,46,0.015,47,0.015,100,1.245,190,2.175,191,1.89,192,1.339,208,2.824,222,1.233,257,3.256,307,0.782,310,2.347,312,2.808,313,2.432,317,1.588,318,3.068,319,2.706,325,2.965,350,3.183,351,3.428,383,2.275,474,1.417,485,3.715,487,3.325,489,3.325,503,3.428,504,3.428,505,1.786,506,3.183,508,3.043,509,3.048,510,4.151,511,5.535,512,4.719,513,4.719,514,4.719,515,4.719,516,4.719,517,4.719,518,4.719,519,4.719,520,3.575,521,4.719,522,4.719,523,3.575,524,3.575]],["title/classes/CreateRelationshipDto.html",[41,0.157,525,2.695]],["body/classes/CreateRelationshipDto.html",[3,0.237,4,0.441,5,0.163,7,0.464,14,0.608,17,1.698,18,0.022,19,1.139,27,0.859,32,0.698,37,1.374,40,0.237,41,0.255,46,0.014,47,0.014,100,0.9,113,3.168,120,3.168,123,2.485,125,1.679,190,2.111,191,1.801,192,1.276,222,1.245,243,3.157,257,3.07,307,0.729,310,2.277,312,2.676,313,2.317,317,1.513,354,1.777,463,2.378,474,1.679,477,2.336,485,3.335,487,3.168,489,3.168,494,3.606,503,3.078,504,3.078,505,1.665,506,2.858,510,3.955,525,3.505,526,2.842,527,4.962,528,4.743,529,3.94,530,3.955,531,4.639,532,4.639,533,4.639,534,3.955,535,4.639,536,4.549,537,4.549,538,4.639,539,4.639,540,4.639,541,5.335,542,3.334,543,5.768,544,4.639,545,4.639,546,5.335,547,3.334,548,4.639,549,4.639,550,3.955,551,2.9,552,3.168]],["title/interfaces/CreatedBlogPostResponse.html",[425,1.782,443,2.058]],["body/interfaces/CreatedBlogPostResponse.html",[3,0.253,4,0.226,5,0.174,7,0.309,13,1.88,14,0.648,18,0.023,27,0.943,32,0.829,40,0.393,46,0.015,47,0.015,100,1.35,162,1.805,176,1.463,192,0.976,202,1.88,210,1.772,214,2.794,218,3.417,219,2.218,220,1.9,222,1.183,228,1.9,306,2.14,309,3.181,310,2.252,317,1.579,318,2.991,319,2.638,320,2.953,323,2.794,325,3.173,328,2.794,339,2.959,344,3.272,350,2.594,351,2.794,366,2.423,425,3.196,426,2.594,427,2.218,428,2.423,429,2.218,430,4.165,431,2.218,432,2.681,433,2.022,434,2.681,435,3.027,436,2.218,437,2.423,438,2.681,439,2.681,440,2.218,441,3.027,442,2.794,443,3.181,444,3.692,445,3.659,446,3.308,447,3.308,448,3.308,449,3.308]],["title/interfaces/ExpressRequestWithBlogPostUser.html",[214,2.058,425,1.782]],["body/interfaces/ExpressRequestWithBlogPostUser.html",[3,0.266,4,0.237,5,0.183,7,0.325,13,2.196,14,0.681,18,0.023,27,0.918,32,0.851,40,0.403,46,0.015,47,0.015,100,1.326,162,1.989,176,1.538,192,1.378,202,1.945,210,2.503,214,3.263,218,3.828,219,3.132,220,1.998,222,1.137,228,1.998,306,2.196,309,2.89,310,2.164,317,1.634,318,2.342,319,2.066,320,3.03,323,2.89,325,1.998,328,2.89,339,3.314,344,3.02,350,1.998,351,2.152,366,2.548,425,3.244,426,2.684,427,2.332,428,2.548,429,2.332,430,3.785,431,2.332,432,2.819,433,2.164,434,2.819,435,3.536,436,2.332,437,3.422,438,3.785,439,2.819,440,2.332,441,2.332,442,2.152,443,2.89,444,2.89,445,2.819,446,2.548,447,2.548,448,2.548,449,2.548]],["title/classes/GetRelatedPostsDto.html",[41,0.157,553,2.695]],["body/classes/GetRelatedPostsDto.html",[3,0.287,4,0.256,5,0.197,7,0.458,14,0.734,17,1.472,18,0.022,19,0.987,27,0.689,32,0.792,37,1.658,40,0.287,41,0.275,46,0.016,47,0.016,100,0.781,119,3.292,123,3.337,125,1.171,151,3.979,182,3.597,190,1.928,191,2.045,192,1.449,218,3.038,222,1.137,243,3.271,257,2.912,307,0.879,310,2.236,312,3.038,313,2.631,316,3.022,317,1.718,340,5.513,354,2.113,400,2.309,416,4.255,442,3.387,474,1.533,477,2.262,489,3.597,490,2.514,505,2.009,506,2.821,550,3.429,551,2.514,552,4.417,553,3.979,554,4.49,555,3.429,556,3.979,557,4.49,558,5.266,559,6.23,560,6.23,561,4.022,562,3.597,563,4.022,564,5.266,565,5.266]],["title/controllers/HealthController.html",[0,1.91,566,2.436]],["body/controllers/HealthController.html",[0,3.013,2,1.843,3,0.263,4,0.235,5,0.181,7,0.321,14,0.673,15,2.663,17,1.35,18,0.023,19,0.906,26,2.05,32,0.846,33,1.203,36,2.787,37,1.521,40,0.263,41,0.219,44,1.724,46,0.015,47,0.015,83,1.976,92,1.843,96,0.906,97,1.074,113,4.519,126,1.729,160,3.146,164,2.324,194,3.69,195,2.869,245,3.928,249,2.52,316,2.937,350,1.976,441,3.928,444,2.869,566,4.111,567,3.146,568,6.041,569,6.817,570,4.24,571,3.689,572,3.689,573,4.973,574,4.973,575,4.973,576,5.358,577,6.284,578,5.625,579,5.625,580,4.973,581,5.625,582,5.625,583,5.625,584,3.689,585,3.689,586,2.787,587,3.689,588,3.689,589,6.019,590,3.689,591,3.689,592,3.689,593,3.146,594,3.689,595,3.689,596,3.689,597,3.689,598,4.973,599,6.616,600,3.689,601,3.689,602,3.689,603,3.689]],["title/modules/HealthModule.html",[48,1.306,61,2.23]],["body/modules/HealthModule.html",[2,3.111,3,0.375,4,0.335,5,0.258,18,0.022,32,1.031,33,1.717,40,0.375,41,0.232,46,0.019,47,0.019,48,2.28,50,2.63,61,3.894,68,2.82,566,4.531,586,3.978,604,5.265,605,6.229,606,6.229,607,4.489,608,5.265]],["title/injectables/JwtAuthGuard.html",[80,1.306,236,2.436]],["body/injectables/JwtAuthGuard.html",[3,0.358,4,0.32,5,0.246,7,0.527,11,4.577,18,0.022,24,2.692,32,0.911,33,1.639,40,0.358,41,0.267,46,0.018,47,0.018,80,2.217,81,2.692,163,3.141,188,4.065,236,4.442,433,2.121,609,4.285,610,4.285,611,6.503,612,6.058,613,4.577,614,5.757,615,5.165,616,6.058,617,6.058,618,3.797,619,5.026,620,5.026]],["title/injectables/JwtStrategy.html",[80,1.306,273,2.058]],["body/injectables/JwtStrategy.html",[3,0.253,4,0.226,5,0.174,7,0.48,13,2.3,14,0.648,15,2.594,18,0.023,19,1.189,21,3.659,24,2.594,26,1.997,27,0.775,32,0.933,33,1.157,40,0.253,41,0.214,42,2.681,43,2.423,44,1.658,46,0.015,47,0.015,80,1.772,81,1.9,83,2.594,92,2.419,96,1.189,97,1.41,98,2.263,99,1.492,100,1.149,101,2.124,126,1.332,128,1.9,135,1.772,142,3.025,145,2.794,162,1.991,167,3.446,185,2.681,188,4.35,192,1.332,194,3.321,195,2.794,202,1.88,208,1.463,210,2.419,219,3.027,227,1.556,228,1.9,229,3.33,230,2.681,249,2.423,254,3.766,273,3.577,281,3.025,287,4.165,288,3.025,293,4.129,299,2.423,301,5.456,303,4.129,320,2.953,321,3.659,385,3.173,433,1.798,556,3.659,613,2.681,614,5.584,618,2.681,621,3.025,622,4.843,623,4.843,624,4.843,625,4.843,626,4.843,627,4.843,628,5.05,629,4.843,630,4.165,631,3.548,632,4.843,633,4.843,634,3.548,635,4.843,636,3.548,637,3.548,638,3.548,639,3.548,640,3.548,641,3.548,642,3.548,643,2.681]],["title/classes/LoginUserDto.html",[41,0.157,171,2.058]],["body/classes/LoginUserDto.html",[3,0.242,4,0.216,5,0.167,7,0.583,14,0.62,17,2.129,18,0.023,19,1.428,27,0.904,32,0.811,37,1.401,40,0.242,41,0.238,46,0.014,47,0.014,100,1.128,101,2.937,125,0.989,141,4.007,162,2.039,163,2.124,166,2.124,171,3.109,190,1.243,191,1.319,192,0.935,193,2.124,202,2.769,203,4.114,242,4.007,257,3.229,296,4.187,307,0.743,317,1.533,342,2.197,346,2.32,400,2.363,474,1.569,490,3.369,503,3.355,504,2.712,505,1.697,506,3.115,551,3.947,562,4.313,615,4.007,644,5.205,645,2.32,646,3.551,647,4.7,648,5.815,649,3.397,650,3.397,651,4.007,652,4.7,653,5.711,654,3.397,655,3.397,656,3.397,657,3.397,658,3.397,659,3.397,660,5.389,661,3.551,662,3.397,663,4.007,664,4.007,665,4.007,666,2.32,667,2.896,668,3.397]],["title/classes/PostCircularRelationship.html",[41,0.157,473,1.306]],["body/classes/PostCircularRelationship.html",[3,0.271,4,0.242,5,0.186,7,0.331,18,0.023,27,0.663,40,0.493,41,0.325,46,0.015,47,0.015,96,0.932,97,1.106,125,1.476,126,1.045,133,1.475,222,1.161,307,0.83,322,1.856,327,1.312,354,1.17,433,2.368,460,1.39,461,1.566,462,2.9,463,2.09,464,2.663,465,1.666,466,1.666,467,1.566,468,1.666,469,1.39,470,1.39,471,2.224,472,2.09,473,1.856,474,1.476,475,2.09,476,1.39,477,1.239,478,1.39,479,1.39,480,2.224,481,2.09,482,1.39,483,1.39]],["title/classes/PostDoesNotExist.html",[41,0.157,470,1.306]],["body/classes/PostDoesNotExist.html",[3,0.271,4,0.242,5,0.186,7,0.331,18,0.023,27,0.664,40,0.494,41,0.325,46,0.015,47,0.015,96,0.934,97,1.108,125,1.478,126,1.047,133,1.477,222,1.161,307,0.832,322,1.858,327,1.314,354,1.172,433,2.368,460,1.392,461,1.568,462,2.901,463,2.355,464,2.663,465,1.668,466,1.668,467,1.568,468,1.668,469,1.392,470,1.858,471,1.668,472,1.568,473,1.392,474,1.478,475,2.093,476,1.392,477,1.241,478,1.392,479,1.392,480,2.226,481,2.093,482,1.392,483,1.392]],["title/classes/PostDoesNotHaveComments.html",[41,0.157,479,1.306]],["body/classes/PostDoesNotHaveComments.html",[3,0.271,4,0.242,5,0.186,7,0.331,18,0.023,27,0.663,40,0.493,41,0.325,46,0.015,47,0.015,96,0.932,97,1.106,125,1.476,126,1.045,133,1.968,222,1.142,307,0.83,322,2.089,327,1.312,354,1.562,433,2.368,460,1.39,461,1.566,462,2.9,463,2.09,464,2.663,465,1.666,466,1.666,467,1.566,468,1.666,469,1.39,470,1.39,471,1.666,472,1.566,473,1.39,474,1.476,475,2.09,476,1.39,477,1.239,478,1.39,479,1.856,480,2.224,481,2.09,482,1.39,483,1.39]],["title/classes/PostError.html",[41,0.157,464,1.306]],["body/classes/PostError.html",[3,0.262,4,0.234,5,0.181,7,0.432,18,0.023,19,0.904,27,0.787,40,0.491,41,0.324,46,0.015,47,0.015,92,1.84,96,1.219,97,1.446,98,1.722,99,1.135,100,0.715,101,1.615,125,1.751,126,1.013,133,1.43,222,1.153,243,1.722,307,0.805,322,1.818,327,1.272,354,1.135,433,2.361,460,1.348,461,1.519,462,2.92,463,2.048,464,2.661,465,2.178,466,1.615,467,1.519,468,1.615,469,1.348,470,1.348,471,1.615,472,1.519,473,1.348,474,1.446,475,2.317,476,1.348,477,1.201,478,1.348,479,1.348,480,2.178,481,2.048,482,1.348,483,1.348,666,2.516,669,3.683]],["title/classes/PostIdValidationError.html",[41,0.157,478,1.306]],["body/classes/PostIdValidationError.html",[3,0.27,4,0.241,5,0.186,7,0.33,18,0.023,27,0.663,40,0.493,41,0.325,46,0.015,47,0.015,96,0.931,97,1.104,125,1.475,126,1.043,133,1.472,222,1.16,307,0.829,322,1.854,327,1.31,354,1.168,433,2.367,460,1.388,461,1.563,462,2.899,463,2.088,464,2.663,465,1.663,466,1.663,467,1.563,468,1.663,469,1.388,470,1.388,471,1.663,472,1.563,473,1.388,474,1.66,475,2.351,476,1.388,477,1.652,478,1.854,479,1.388,480,2.221,481,2.088,482,1.388,483,1.388]],["title/classes/PostInsufficientPermissionsError.html",[41,0.157,482,1.306]],["body/classes/PostInsufficientPermissionsError.html",[3,0.271,4,0.242,5,0.186,7,0.331,18,0.023,27,0.663,40,0.493,41,0.325,46,0.015,47,0.015,96,0.932,97,1.106,125,1.476,126,1.045,133,1.475,222,1.161,307,0.83,322,1.856,327,1.312,354,1.17,433,2.368,460,1.39,461,1.566,462,2.9,463,2.09,464,2.663,465,1.666,466,1.666,467,1.566,468,1.666,469,1.39,470,1.39,471,1.666,472,1.566,473,1.39,474,1.476,475,2.09,476,1.39,477,1.239,478,1.39,479,1.39,480,2.503,481,2.353,482,1.856,483,1.39]],["title/modules/PostModule.html",[48,1.306,62,2.23]],["body/modules/PostModule.html",[2,2.972,3,0.347,4,0.31,5,0.239,18,0.022,32,1.031,33,1.591,40,0.347,41,0.215,46,0.018,47,0.018,48,2.35,50,2.436,51,2.436,52,3.049,53,3.049,54,2.612,55,3.703,56,3.049,62,4.357,64,3.719,65,3.049,66,2.814,68,2.612,69,3.685,70,2.28,99,1.503,176,2.011,306,1.894,386,4.063,436,3.049,670,4.159,671,4.159,672,4.357,673,4.877,674,5.473,675,4.877,676,4.877,677,4.159,678,4.877]],["title/classes/PostRelationConflict.html",[41,0.157,469,1.306]],["body/classes/PostRelationConflict.html",[3,0.271,4,0.242,5,0.186,7,0.331,18,0.023,27,0.663,40,0.493,41,0.325,46,0.015,47,0.015,96,0.932,97,1.106,125,1.476,126,1.045,133,1.475,222,1.161,307,0.83,322,1.856,327,1.312,354,1.17,433,2.368,460,1.39,461,1.566,462,2.9,463,2.09,464,2.663,465,1.666,466,1.666,467,2.09,468,2.224,469,1.856,470,1.39,471,1.666,472,1.566,473,1.39,474,1.476,475,2.09,476,1.39,477,1.239,478,1.39,479,1.39,480,2.224,481,2.09,482,1.39,483,1.39]],["title/injectables/PostService.html",[80,1.306,672,2.23]],["body/injectables/PostService.html",[3,0.079,4,0.164,5,0.054,7,0.446,14,0.202,15,1.654,18,0.023,19,1.257,21,3.867,24,0.594,26,2.481,27,0.87,32,0.748,33,0.362,40,0.079,41,0.155,44,2.245,46,0.006,47,0.006,70,0.518,80,0.709,81,0.594,83,1.037,92,0.554,96,0.758,98,2.323,99,1.531,100,0.965,101,2.18,102,2.334,118,1.463,126,1.581,127,4.058,128,3.331,135,3.06,139,1.211,145,2.223,162,1.28,167,4.046,190,1.131,191,1.199,192,1.209,194,3.467,202,1.865,204,2.11,205,3.867,208,2.732,220,1.654,221,0.946,222,1.225,243,1.801,245,0.693,248,1.323,263,1.463,299,4.184,306,1.001,310,2.182,318,1.444,319,0.798,320,1.654,322,1.758,323,2.223,324,1.211,325,0.594,326,0.946,327,1.814,328,2.023,329,0.594,335,3.119,344,0.967,350,2.573,352,1.761,354,1.975,370,1.543,383,0.905,400,1.818,411,0.693,412,4.966,426,0.594,429,2.748,436,0.693,443,0.64,444,1.117,448,2.11,460,0.709,464,0.709,467,1.445,469,0.943,470,1.819,473,0.709,476,0.709,477,2.286,478,1.609,479,0.709,482,0.709,483,0.709,484,2.884,487,2.11,494,1.211,508,2.884,527,1.947,528,1.947,529,1.323,536,3.535,537,2.989,552,3.87,556,1.463,557,4.095,643,4.731,672,2.591,679,0.946,680,1.463,681,1.937,682,1.937,683,1.937,684,1.937,685,1.937,686,1.937,687,1.937,688,3.089,689,1.937,690,1.937,691,1.937,692,1.937,693,1.937,694,1.109,695,3.535,696,1.109,697,1.937,698,2.578,699,1.937,700,1.109,701,1.937,702,5.119,703,1.937,704,2.911,705,1.109,706,4.364,707,4.478,708,1.109,709,1.937,710,1.109,711,2.578,712,1.937,713,3.853,714,1.109,715,2.633,716,3.089,717,4.478,718,3.089,719,1.651,720,1.937,721,1.937,722,1.109,723,2.633,724,1.109,725,3.285,726,1.937,727,1.109,728,1.323,729,1.937,730,1.109,731,1.937,732,1.109,733,1.937,734,2.989,735,1.109,736,1.651,737,3.132,738,3.089,739,1.937,740,1.937,741,1.109,742,0.946,743,1.109,744,0.946,745,1.937,746,1.109,747,1.109,748,1.109,749,1.109,750,1.109,751,0.838,752,0.838,753,1.109,754,1.109,755,1.109,756,1.109,757,1.937,758,3.506,759,1.937,760,1.109,761,1.937,762,1.109,763,1.109,764,2.578,765,1.109,766,1.109,767,1.109,768,1.109,769,1.109,770,5.252,771,1.109,772,1.109,773,1.109,774,1.937,775,1.937,776,1.937,777,1.937,778,0.838,779,1.109,780,1.109,781,1.109,782,3.089,783,5.371,784,3.506,785,2.198,786,4.146,787,4.095,788,2.578,789,1.109,790,1.109,791,1.937,792,1.109,793,2.578,794,1.109,795,0.946,796,1.109,797,1.109,798,1.109,799,1.109,800,1.109,801,2.578,802,4.396,803,1.109,804,1.109,805,3.089,806,1.651,807,1.109,808,1.109,809,1.937,810,1.109,811,1.109,812,1.937,813,1.109,814,1.109,815,1.109,816,1.109,817,1.109,818,1.109,819,0.946,820,0.758,821,1.937,822,1.109,823,1.937,824,1.937,825,1.109,826,1.937,827,1.109,828,1.109,829,1.109,830,1.109,831,1.109,832,1.109,833,1.937,834,1.109,835,2.578,836,2.578,837,1.937,838,1.109,839,1.109,840,1.109,841,1.109,842,1.109,843,1.937,844,1.937,845,1.109,846,1.109,847,1.109,848,1.109,849,1.109]],["title/classes/PostSlugValidationError.html",[41,0.157,476,1.306]],["body/classes/PostSlugValidationError.html",[3,0.27,4,0.241,5,0.186,7,0.33,18,0.023,27,0.663,40,0.493,41,0.325,46,0.015,47,0.015,96,0.931,97,1.104,125,1.475,126,1.043,133,1.472,222,1.16,307,0.829,322,1.854,327,1.749,354,1.168,433,2.367,460,1.388,461,1.563,462,2.899,463,2.088,464,2.663,465,1.663,466,1.663,467,1.563,468,1.663,469,1.388,470,1.388,471,1.663,472,1.563,473,1.388,474,1.66,475,2.351,476,1.854,477,1.237,478,1.388,479,1.388,480,2.221,481,2.088,482,1.388,483,1.388]],["title/classes/RegisterUserDto.html",[41,0.157,197,2.23]],["body/classes/RegisterUserDto.html",[3,0.212,4,0.189,5,0.146,7,0.574,13,1.661,14,0.543,17,2.006,18,0.022,19,1.346,27,0.883,32,0.644,37,1.226,40,0.212,41,0.221,46,0.013,47,0.013,99,1.92,100,1.064,123,2.685,125,1.857,127,4.388,132,1.877,162,1.964,165,3.423,190,1.089,191,1.155,192,0.818,193,1.859,197,3.133,202,2.42,203,3.68,210,2.504,257,3.247,296,4.316,307,0.65,317,1.396,342,3.036,346,3.967,400,1.877,442,1.716,452,4.273,490,3.427,491,3.423,494,2.675,503,3.162,504,3.351,505,1.486,506,3.111,507,2.923,551,3.427,552,2.031,630,3.233,645,2.031,646,3.233,653,4.273,663,3.648,664,3.648,665,3.648,778,3.233,820,4.876,850,4.952,851,4.279,852,2.974,853,2.974,854,5.012,855,4.273,856,2.536,857,2.974,858,6.676,859,5.808,860,6.496,861,6.048,862,5.157,863,5.157,864,2.974,865,2.974,866,5.482,867,2.974,868,2.974,869,2.974,870,2.974,871,2.974,872,2.536,873,4.279,874,2.974,875,4.279,876,2.974,877,2.974,878,4.279,879,2.974]],["title/classes/UpdateUserDto.html",[41,0.157,212,2.23]],["body/classes/UpdateUserDto.html",[3,0.322,4,0.287,5,0.221,7,0.566,13,1.753,14,0.824,17,1.653,18,0.022,19,1.109,27,0.811,32,0.853,37,1.862,40,0.322,41,0.274,46,0.017,47,0.017,99,2.139,100,0.876,132,2.488,162,1.894,190,1.653,191,1.753,192,1.242,208,2.763,210,2.833,212,3.877,257,3.041,264,4.286,307,0.987,317,1.85,342,2.651,346,3.085,400,2.488,490,2.823,491,4.236,494,2.823,503,3.272,504,3.272,505,2.256,506,3.038,507,3.874,551,2.823,630,4.286,645,3.085,646,4.286,680,3.412,704,4.286,856,3.851,872,3.851,880,4.836,881,4.836]],["title/modules/UserModule.html",[48,1.306,63,2.058]],["body/modules/UserModule.html",[3,0.346,4,0.309,5,0.238,18,0.022,32,1.004,33,1.584,40,0.346,41,0.214,46,0.018,47,0.018,48,2.345,50,2.426,51,2.426,52,3.036,53,3.036,54,2.601,55,3.697,56,4.005,63,4.068,64,3.709,65,3.036,66,2.802,68,2.601,69,3.67,70,2.27,99,1.497,176,2.002,227,2.13,228,2.601,229,3.636,376,4.141,459,4.053,677,4.141,882,4.141,883,4.141,884,4.141,885,4.857,886,4.857]],["title/injectables/UserService.html",[80,1.306,229,1.782]],["body/injectables/UserService.html",[3,0.13,4,0.116,5,0.09,7,0.491,13,1.651,14,0.333,15,1.579,18,0.023,19,1.34,26,2.563,27,0.861,32,0.821,33,0.596,40,0.13,41,0.13,44,2.452,46,0.009,47,0.009,70,0.854,80,1.079,81,0.979,84,2.227,92,0.913,96,0.724,97,0.858,98,2.552,99,1.961,100,1.059,101,2.394,102,2.227,116,2.514,126,1.592,128,2.498,135,3.061,145,2.877,162,2.103,164,1.378,165,2.904,166,2.658,167,4.141,168,2.014,169,2.514,171,3.027,176,1.215,182,1.248,185,4.556,190,2.243,191,1.936,192,1.372,193,2.658,194,3.744,195,3.586,196,2.514,197,3.413,202,2.536,203,3.479,204,2.904,205,3.213,207,2.514,208,2.386,209,2.514,212,3.618,217,3.625,220,1.579,227,1.625,228,0.979,229,2.621,234,2.8,243,1.378,244,2.227,245,1.142,247,2.514,248,1.248,254,2.014,255,3.625,264,2.227,287,4.259,296,4.165,299,4.042,311,2.014,339,0.913,344,1.473,370,2.124,377,3.15,385,1.985,416,2.904,431,2.658,455,3.625,474,0.858,477,1.627,628,2.514,643,3.524,695,4.473,706,3.625,707,3.625,719,2.514,742,1.558,785,3.159,795,4.252,887,1.558,888,2.227,889,2.948,890,2.948,891,2.948,892,2.948,893,2.948,894,1.827,895,1.827,896,3.706,897,3.706,898,3.706,899,2.948,900,5.247,901,1.827,902,2.948,903,4.252,904,3.625,905,4.252,906,2.514,907,2.514,908,2.948,909,2.514,910,2.948,911,1.827,912,4.987,913,2.948,914,1.827,915,2.948,916,1.827,917,1.827,918,2.948,919,2.227,920,2.948,921,1.827,922,2.948,923,1.827,924,2.948,925,2.514,926,2.948,927,2.514,928,1.827,929,1.827,930,1.827,931,1.827,932,2.948,933,3.706,934,1.827,935,1.827,936,1.827,937,1.827,938,1.827,939,1.827,940,1.827,941,2.948,942,4.252,943,1.827,944,1.827,945,2.948,946,3.706,947,1.827,948,1.827,949,2.948,950,1.827,951,1.827,952,1.827,953,1.827,954,1.827,955,1.827,956,1.827]],["title/coverage.html",[957,4.144]],["body/coverage.html",[0,3.057,1,2.223,5,0.16,6,2.774,18,0.022,31,2.034,34,1.877,41,0.315,46,0.014,47,0.014,54,1.743,80,2.28,82,2.774,100,1.108,158,2.223,159,2.774,171,1.877,197,2.034,208,1.342,212,2.034,214,1.877,227,1.427,229,1.625,231,1.877,236,2.223,243,1.521,273,1.877,285,2.774,306,1.263,308,3.568,329,1.743,339,1.625,352,2.223,372,2.223,386,2.223,391,4.707,410,3.597,416,2.223,423,2.459,425,2.631,426,1.743,428,3.597,443,1.877,450,3.899,457,2.459,459,2.223,460,1.191,461,2.771,464,1.191,469,1.191,470,1.191,473,1.191,476,1.191,478,1.191,479,1.191,482,1.191,483,1.191,484,2.034,485,3.757,486,2.774,508,2.034,509,2.774,525,2.459,526,2.774,553,2.459,554,2.774,555,2.774,566,2.223,567,2.774,609,2.774,610,2.774,621,2.774,644,2.774,645,3.597,661,2.459,672,2.034,674,2.774,679,2.774,751,2.459,752,2.459,850,2.774,880,2.774,887,2.774,957,2.774,958,3.254,959,7.417,960,6.397,961,4.561,962,6.01,963,2.774,964,7.236,965,6.01,966,2.774,967,2.774,968,6.23,969,2.774,970,2.774,971,2.774,972,3.254,973,4.561,974,3.254,975,3.889,976,5.267,977,2.774,978,3.254,979,2.774,980,2.774,981,3.254,982,3.254]],["title/dependencies.html",[51,2.142,983,2.543]],["body/dependencies.html",[18,0.022,33,1.611,37,2.037,41,0.265,46,0.018,47,0.018,51,2.467,70,2.309,72,3.732,188,3.088,276,3.732,370,2.467,371,4.212,435,3.088,505,2.467,586,3.732,607,4.212,613,3.732,618,3.732,744,4.212,927,4.212,984,5.995,985,6.455,986,4.94,987,5.995,988,4.94,989,4.94,990,4.94,991,4.94,992,4.94,993,4.94,994,4.212,995,4.94,996,4.94,997,4.94,998,4.94,999,4.94,1000,4.94,1001,4.94,1002,4.94,1003,4.94,1004,4.94,1005,4.94,1006,4.94,1007,4.94,1008,4.94]],["title/miscellaneous/functions.html",[1009,1.721,1010,3.656]],["body/miscellaneous/functions.html",[7,0.542,9,3.466,13,1.392,14,0.655,18,0.021,22,2.71,26,2.566,27,0.725,30,2.71,31,2.242,46,0.015,47,0.015,54,2.969,86,3.058,89,2.71,96,0.88,98,2.909,99,1.917,100,1.076,101,2.815,108,3.058,113,3.332,125,1.42,128,1.921,162,1.732,165,2.45,166,2.242,190,1.313,192,0.987,194,2.613,195,2.069,202,2.152,203,2.069,222,1.126,251,3.058,295,2.71,297,2.242,306,1.894,307,0.784,308,2.242,310,2.18,318,2.28,323,3.432,327,1.915,328,3.432,333,4.727,334,3.332,342,1.676,354,1.833,361,3.058,362,3.058,388,3.058,389,3.058,390,3.058,391,3.686,392,3.058,400,1.573,401,2.71,426,2.613,429,3.049,440,3.719,441,3.049,447,2.45,462,2.794,474,1.42,475,2.011,529,2.45,651,3.058,661,3.686,666,2.45,667,3.058,728,3.332,751,3.686,752,3.686,787,3.058,820,2.45,909,3.058,925,3.058,963,3.058,966,3.058,975,3.058,977,4.159,979,3.058,980,4.159,1009,2.069,1010,3.058,1011,3.586,1012,2.71,1013,3.586,1014,3.586,1015,4.878,1016,3.586,1017,3.586,1018,3.058,1019,3.586,1020,3.058,1021,3.058,1022,3.586,1023,3.586,1024,3.586,1025,4.159,1026,3.586,1027,3.586,1028,3.586,1029,5.544,1030,3.586,1031,3.058,1032,3.586,1033,3.586,1034,3.586,1035,2.71,1036,3.586,1037,3.586,1038,3.586,1039,3.586,1040,3.586,1041,3.586,1042,5.544,1043,3.058,1044,3.586,1045,3.586,1046,3.586,1047,3.586,1048,3.586,1049,3.586,1050,4.878,1051,4.878,1052,4.878,1053,3.586,1054,3.586,1055,3.586,1056,3.586,1057,4.878,1058,4.878,1059,4.159,1060,3.586,1061,3.586]],["title/index.html",[14,0.544,150,2.037,1062,2.253]],["body/index.html",[5,0.238,9,1.756,11,2.122,13,1.09,18,0.022,23,2.122,24,1.504,25,4.032,26,2.341,27,0.537,46,0.015,47,0.012,51,1.403,55,1.62,87,2.804,89,3.665,96,0.689,97,0.818,98,1.313,100,0.545,103,1.918,107,5.353,114,4.136,119,3.033,124,2.394,132,1.8,147,2.394,148,3.665,150,2.804,151,2.122,153,4.136,154,1.918,162,1.195,163,1.756,204,1.918,208,1.158,218,1.62,222,1.144,273,1.62,306,1.09,310,1.339,311,3.314,316,2.772,319,1.692,321,4.289,322,1.776,324,2.566,327,0.97,334,2.804,344,2.05,348,2.122,351,1.62,354,1.973,356,2.394,383,2.654,384,3.336,385,1.504,400,1.232,401,2.122,418,2.122,425,1.403,446,2.804,472,1.158,477,1.582,496,2.122,527,3.101,528,3.101,529,1.918,530,2.394,534,2.394,568,2.394,570,2.394,576,2.394,593,2.394,666,1.918,680,2.122,704,3.101,715,2.394,717,3.5,725,2.394,728,3.314,734,2.394,736,4.136,737,2.122,881,2.394,888,3.665,919,2.122,994,2.394,1018,3.5,1020,2.394,1025,4.55,1035,2.122,1043,2.394,1062,2.122,1063,3.5,1064,2.808,1065,6.596,1066,2.808,1067,2.808,1068,2.808,1069,4.105,1070,4.105,1071,2.394,1072,2.394,1073,4.851,1074,5.93,1075,6.279,1076,4.105,1077,2.808,1078,2.808,1079,4.105,1080,4.851,1081,2.808,1082,4.105,1083,4.105,1084,4.105,1085,4.105,1086,4.105,1087,5.337,1088,3.5,1089,2.808,1090,2.808,1091,2.808,1092,4.105,1093,4.105,1094,4.851,1095,2.808,1096,4.105,1097,4.105,1098,4.105,1099,2.394,1100,4.105,1101,2.808,1102,2.808,1103,2.808,1104,2.808,1105,2.808,1106,2.808,1107,2.808,1108,4.105,1109,4.105,1110,4.105,1111,2.122,1112,2.808,1113,4.105,1114,2.808,1115,4.105,1116,2.808,1117,2.808,1118,4.105,1119,2.808,1120,2.808,1121,2.808,1122,2.394,1123,2.808,1124,2.808,1125,2.808,1126,2.808,1127,2.808,1128,2.808,1129,2.808,1130,2.808,1131,2.808,1132,4.105,1133,2.808,1134,5.46,1135,4.48,1136,2.394,1137,2.808,1138,4.105,1139,2.808,1140,4.851,1141,2.808,1142,2.808,1143,2.808,1144,4.105,1145,2.808,1146,2.808,1147,2.808,1148,2.808,1149,2.394,1150,2.808,1151,2.808,1152,2.808,1153,2.808,1154,2.808,1155,2.808,1156,4.105,1157,2.808,1158,2.808,1159,2.808,1160,2.808,1161,4.105,1162,4.105,1163,2.808,1164,2.808,1165,2.808,1166,2.808,1167,2.394,1168,2.808,1169,2.808,1170,2.808,1171,2.808,1172,4.105,1173,2.808,1174,2.808,1175,2.808,1176,2.808,1177,2.808,1178,2.808,1179,2.808,1180,2.808,1181,2.808,1182,2.808,1183,2.394,1184,2.808,1185,2.808,1186,2.808,1187,2.808,1188,2.394,1189,2.394,1190,2.808,1191,3.314,1192,2.394,1193,2.394,1194,2.122,1195,2.122,1196,2.394]],["title/license.html",[150,2.037,1062,2.253,1191,2.037]],["body/license.html",[4,0.381,5,0.265,7,0.155,13,0.69,18,0.015,19,0.437,24,0.952,31,2.274,32,0.267,41,0.078,46,0.009,47,0.009,66,1.026,83,0.952,84,1.343,85,1.516,87,1.215,99,0.889,118,2.179,119,1.112,120,1.215,121,1.516,133,1.786,143,4.2,154,2.485,164,2.61,191,0.69,192,1.355,248,1.215,257,1.956,263,2.179,297,1.803,318,0.831,319,0.733,320,0.952,324,1.112,334,2.858,335,0.952,342,1.956,358,4.607,377,1.026,380,4.346,382,1.803,400,2.017,418,2.179,422,1.516,427,1.112,431,2.274,435,1.803,437,2.485,440,1.112,442,1.026,444,1.026,449,1.215,481,1.5,496,2.748,562,1.215,723,1.516,728,1.215,737,1.343,778,1.343,806,1.516,819,1.516,820,1.215,855,2.459,862,1.516,863,1.516,888,1.343,904,3.568,906,2.459,907,3.568,919,4.335,1021,1.516,1031,1.516,1035,2.748,1059,2.459,1071,1.516,1072,1.516,1088,3.102,1099,3.102,1111,1.343,1122,5.497,1134,2.459,1135,1.343,1136,1.516,1149,1.516,1167,1.516,1183,3.102,1188,1.516,1189,1.516,1191,4.748,1192,1.516,1193,4.761,1194,3.162,1195,2.748,1196,1.516,1197,1.778,1198,1.778,1199,1.778,1200,5.585,1201,6.086,1202,4.185,1203,4.6,1204,1.778,1205,6.254,1206,5.738,1207,1.778,1208,5.738,1209,5.985,1210,4.6,1211,5.738,1212,1.778,1213,4.6,1214,1.778,1215,1.778,1216,1.778,1217,4.185,1218,1.778,1219,1.778,1220,3.568,1221,2.884,1222,1.778,1223,3.638,1224,2.884,1225,2.884,1226,1.778,1227,2.884,1228,1.778,1229,2.884,1230,1.778,1231,1.778,1232,1.778,1233,1.778,1234,1.778,1235,1.778,1236,1.778,1237,3.638,1238,1.778,1239,2.884,1240,6.086,1241,1.778,1242,4.926,1243,4.185,1244,2.884,1245,3.638,1246,1.778,1247,1.778,1248,1.778,1249,1.778,1250,1.778,1251,1.778,1252,3.638,1253,1.778,1254,5.585,1255,1.778,1256,2.884,1257,1.778,1258,6.447,1259,6.5,1260,1.778,1261,1.778,1262,1.778,1263,1.778,1264,1.778,1265,1.778,1266,2.884,1267,2.884,1268,1.778,1269,1.778,1270,1.778,1271,1.778,1272,4.185,1273,4.6,1274,1.778,1275,2.884,1276,4.185,1277,2.884,1278,4.6,1279,2.884,1280,1.778,1281,1.778,1282,3.638,1283,1.778,1284,1.778,1285,1.778,1286,1.778,1287,2.884,1288,1.778,1289,1.778,1290,3.638,1291,1.778,1292,1.778,1293,1.778,1294,1.778,1295,1.778,1296,4.185,1297,5.738,1298,1.778,1299,1.778,1300,2.884,1301,3.638,1302,2.884,1303,2.884,1304,2.884,1305,2.884,1306,2.884,1307,2.884,1308,3.638,1309,2.884,1310,2.884,1311,2.884,1312,2.884,1313,1.778,1314,2.884,1315,1.778,1316,1.778,1317,4.6,1318,5.188,1319,3.638,1320,2.884,1321,1.778,1322,2.884,1323,2.884,1324,3.638,1325,2.884,1326,1.778,1327,1.778,1328,1.778,1329,3.638,1330,1.778,1331,1.778,1332,1.778,1333,2.884,1334,1.778,1335,1.778,1336,1.778,1337,1.778,1338,1.778,1339,1.778,1340,1.778,1341,2.884,1342,1.778,1343,1.778,1344,1.778,1345,1.778,1346,1.778,1347,1.778,1348,1.778,1349,1.778,1350,1.778,1351,1.778,1352,1.778,1353,1.778,1354,1.778,1355,5.404,1356,1.778,1357,1.778,1358,1.778,1359,1.778,1360,1.778,1361,4.185,1362,2.884,1363,4.185,1364,1.778,1365,1.778,1366,1.778,1367,1.778,1368,3.638,1369,1.778,1370,1.778,1371,2.884,1372,2.884,1373,1.778,1374,1.778,1375,1.778,1376,1.778,1377,2.884,1378,1.778,1379,1.778,1380,4.6,1381,1.778,1382,1.778,1383,1.778,1384,1.778,1385,1.778,1386,4.185,1387,1.778,1388,1.778,1389,1.778,1390,1.778,1391,1.778,1392,1.778,1393,1.778,1394,1.778,1395,1.778,1396,1.778,1397,1.778,1398,2.884,1399,1.778,1400,2.884,1401,1.778,1402,1.778,1403,1.778,1404,1.778,1405,1.778,1406,1.778,1407,1.778,1408,1.778,1409,4.185,1410,3.638,1411,3.638,1412,3.638,1413,2.884,1414,3.638,1415,2.884,1416,2.884,1417,2.884,1418,1.778,1419,1.778,1420,1.778,1421,1.778,1422,1.778,1423,1.778,1424,2.884,1425,1.778,1426,1.778,1427,1.778,1428,4.6,1429,1.778,1430,1.778,1431,1.778,1432,1.778,1433,1.778,1434,1.778,1435,1.778,1436,1.778,1437,1.778,1438,4.6,1439,1.778,1440,1.778,1441,1.778,1442,1.778,1443,1.778,1444,1.778,1445,1.778,1446,1.778,1447,1.778,1448,1.778,1449,1.778,1450,1.778,1451,1.778,1452,1.778,1453,3.638,1454,1.778,1455,1.778,1456,1.778,1457,2.884,1458,1.778,1459,1.778,1460,1.778,1461,1.778,1462,1.778,1463,1.778,1464,1.778,1465,1.778,1466,1.778,1467,1.778,1468,1.778,1469,1.778,1470,1.778,1471,1.778,1472,1.778,1473,2.884,1474,1.778,1475,1.778,1476,2.884,1477,2.884,1478,1.778,1479,1.778,1480,1.778,1481,1.778,1482,1.778,1483,1.778,1484,1.778,1485,1.778,1486,1.778,1487,1.778,1488,1.516,1489,1.516,1490,1.778,1491,1.778,1492,1.778,1493,1.778,1494,1.778,1495,1.778]],["title/modules.html",[50,2.428]],["body/modules.html",[18,0.019,46,0.019,47,0.019,49,3.714,50,2.716,60,3.4,61,3.4,62,3.4,63,3.137,1111,4.109,1135,5.234,1496,6.928,1497,6.928,1498,7.057,1499,5.438]],["title/overview.html",[1500,4.144]],["body/overview.html",[2,2.287,18,0.022,34,3.6,46,0.017,47,0.017,48,1.676,49,4.934,50,2.287,51,2.287,52,2.862,53,2.862,54,2.452,55,2.641,56,2.862,57,3.904,58,3.904,59,3.904,60,4.469,61,3.901,62,4.207,63,4.017,64,3.577,65,2.862,66,2.641,81,2.452,229,3.478,231,4.017,269,3.904,271,3.904,272,3.904,273,3.6,307,1.001,427,2.862,670,3.904,671,3.904,672,3.901,882,3.904,883,3.904,884,3.904,1500,3.904,1501,4.579,1502,4.579,1503,4.579,1504,4.579,1505,4.579]],["title/properties.html",[317,1.398,983,2.543]],["body/properties.html",[7,0.474,18,0.022,46,0.019,47,0.019,148,4.118,154,3.723,310,1.778,316,2.548,317,1.778,383,2.548,411,3.408,1063,4.648,1191,3.723,1194,4.118,1195,4.118,1488,4.648,1489,4.648,1506,5.451,1507,5.451,1508,5.451,1509,5.451,1510,5.451]],["title/miscellaneous/typealiases.html",[1009,1.721,1511,4.288]],["body/miscellaneous/typealiases.html",[14,0.917,18,0.018,46,0.018,47,0.018,100,1.378,132,2.852,162,1.463,222,0.861,227,2.204,306,1.951,308,3.141,310,1.639,314,4.065,316,3.04,329,2.692,335,2.692,339,3.026,352,4.138,369,4.442,370,3.026,377,3.986,378,4.442,379,4.442,380,4.065,381,4.442,410,3.432,423,4.577,450,3.432,1009,2.899,1012,3.797,1512,5.026,1513,4.285,1514,4.285]],["title/miscellaneous/variables.html",[103,2.929,1009,1.721]],["body/miscellaneous/variables.html",[14,0.759,18,0.022,46,0.016,47,0.016,48,1.522,68,2.228,96,1.321,103,2.841,131,4.573,132,2.936,162,1.567,168,2.841,176,2.847,190,1.97,192,1.481,208,2.219,222,1.082,227,2.36,306,1.615,308,2.6,310,1.756,313,2.689,314,3.73,316,2.789,318,1.944,319,2.219,325,2.228,329,2.228,335,2.883,370,3.265,372,3.676,382,3.73,383,2.789,384,3.73,385,3.196,386,3.676,387,3.546,410,2.841,411,2.6,424,3.546,450,2.841,457,4.067,458,4.589,459,3.676,484,3.365,485,3.365,491,2.841,497,3.546,507,2.841,508,3.365,512,3.546,513,3.546,514,3.546,515,3.546,516,3.546,517,3.546,518,3.546,519,3.546,521,3.546,522,3.546,562,3.676,967,4.589,969,4.589,970,4.589,971,4.589,1009,2.4,1012,3.143,1220,4.589,1513,3.546,1514,4.589,1515,5.383,1516,6.695,1517,5.383,1518,5.383,1519,5.383]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":793,"title":{},"body":{"injectables/PostService.html":{}}}],["0.14.1",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["0.5.15",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":723,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["1.0.0",{"_index":1506,"title":{},"body":{"properties.html":{}}}],["1.6.6",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":936,"title":{},"body":{"injectables/UserService.html":{}}}],["10/10",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":599,"title":{},"body":{"controllers/HealthController.html":{}}}],["11.0.0",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["11.0.11",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["11.0.6",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["128",{"_index":603,"title":{},"body":{"controllers/HealthController.html":{}}}],["13/13",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["1h",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["2.0",{"_index":1195,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["2/2",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1504,"title":{},"body":{"overview.html":{}}}],["2004",{"_index":1198,"title":{},"body":{"license.html":{}}}],["201",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["2024",{"_index":1487,"title":{},"body":{"license.html":{}}}],["3",{"_index":1505,"title":{},"body":{"overview.html":{}}}],["3/3",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":598,"title":{},"body":{"controllers/HealthController.html":{}}}],["3000",{"_index":110,"title":{},"body":{"injectables/AppService.html":{}}}],["4",{"_index":1502,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["401",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["409",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["5",{"_index":1501,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":965,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1232,"title":{},"body":{"license.html":{}}}],["5000",{"_index":596,"title":{},"body":{"controllers/HealthController.html":{}}}],["6",{"_index":1503,"title":{},"body":{"overview.html":{}}}],["60f6c2d3a8341c8f0a5865c4",{"_index":565,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["60f6c2d3a8341c8f0a5865c4'})@ismongoid({message",{"_index":561,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["60f72b2f9b1e8d001c8f4e80",{"_index":546,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["60f72b2f9b1e8d001c8f4e81",{"_index":541,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["64",{"_index":877,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["64)@matches(/(?=.*[a",{"_index":865,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["8.11.0",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["8.25.0",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":778,"title":{},"body":{"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"license.html":{}}}],["9/9",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["9]+)*$/.test(slug",{"_index":779,"title":{},"body":{"injectables/PostService.html":{}}}],["_",{"_index":941,"title":{},"body":{"injectables/UserService.html":{}}}],["__v",{"_index":784,"title":{},"body":{"injectables/PostService.html":{}}}],["__v\").exec",{"_index":772,"title":{},"body":{"injectables/PostService.html":{}}}],["_hasusernameoremail",{"_index":648,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["_id",{"_index":412,"title":{},"body":{"classes/BlogPostComment.html":{},"injectables/PostService.html":{}}}],["_id\").exec",{"_index":804,"title":{},"body":{"injectables/PostService.html":{}}}],["above",{"_index":1390,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":1455,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":1453,"title":{},"body":{"license.html":{}}}],["access",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accessors",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["accesstoken",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["account",{"_index":653,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["accounts",{"_index":1179,"title":{},"body":{"index.html":{}}}],["act",{"_index":1461,"title":{},"body":{"license.html":{}}}],["acting",{"_index":1215,"title":{},"body":{"license.html":{}}}],["actions",{"_index":1157,"title":{},"body":{"index.html":{}}}],["acts",{"_index":1436,"title":{},"body":{"license.html":{}}}],["add",{"_index":1134,"title":{},"body":{"index.html":{},"license.html":{}}}],["addcomment",{"_index":683,"title":{},"body":{"injectables/PostService.html":{}}}],["addcomment(postid",{"_index":699,"title":{},"body":{"injectables/PostService.html":{}}}],["added",{"_index":703,"title":{},"body":{"injectables/PostService.html":{}}}],["addendum",{"_index":1379,"title":{},"body":{"license.html":{}}}],["additional",{"_index":1380,"title":{},"body":{"license.html":{}}}],["additions",{"_index":1274,"title":{},"body":{"license.html":{}}}],["address",{"_index":452,"title":{},"body":{"classes/BlogPostUser.html":{},"classes/RegisterUserDto.html":{}}}],["adds",{"_index":701,"title":{},"body":{"injectables/PostService.html":{}}}],["adipiscing",{"_index":518,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["advised",{"_index":1451,"title":{},"body":{"license.html":{}}}],["against",{"_index":906,"title":{},"body":{"injectables/UserService.html":{},"license.html":{}}}],["agree",{"_index":1464,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":1412,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1395,"title":{},"body":{"license.html":{}}}],["alias",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1512,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":1338,"title":{},"body":{"license.html":{}}}],["allowing",{"_index":896,"title":{},"body":{"injectables/UserService.html":{}}}],["allows",{"_index":356,"title":{},"body":{"classes/BlogPost.html":{},"index.html":{}}}],["alone",{"_index":1330,"title":{},"body":{"license.html":{}}}],["along",{"_index":1369,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":1378,"title":{},"body":{"license.html":{}}}],["already",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["amet",{"_index":516,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["amount",{"_index":1055,"title":{},"body":{"miscellaneous/functions.html":{}}}],["and/or",{"_index":1458,"title":{},"body":{"license.html":{}}}],["annotations",{"_index":1263,"title":{},"body":{"license.html":{}}}],["apache",{"_index":1194,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["api.to",{"_index":149,"title":{},"body":{"injectables/AppService.html":{}}}],["api/v1",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/v1/posts",{"_index":1115,"title":{},"body":{"index.html":{}}}],["api/v1/posts/:id",{"_index":1118,"title":{},"body":{"index.html":{}}}],["api/v1/posts/:id/relations",{"_index":1119,"title":{},"body":{"index.html":{}}}],["api/v1/posts/relation/?sourcepostid&relationpostid",{"_index":1120,"title":{},"body":{"index.html":{}}}],["api/v1/posts?page&limit",{"_index":1116,"title":{},"body":{"index.html":{}}}],["api/v1/posts?slug=:slug",{"_index":1117,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":506,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":490,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiresponse",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{}}}],["apitags(\"authentication",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"health",{"_index":587,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"information",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["app.controller",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appear",{"_index":1374,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":1256,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":1410,"title":{},"body":{"license.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applies",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["apply",{"_index":1473,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":49,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1031,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["appropriateness",{"_index":1423,"title":{},"body":{"license.html":{}}}],["appservice",{"_index":34,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archives",{"_index":1486,"title":{},"body":{"license.html":{}}}],["arising",{"_index":1441,"title":{},"body":{"license.html":{}}}],["array",{"_index":333,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["ascending",{"_index":1129,"title":{},"body":{"index.html":{}}}],["asserted",{"_index":1470,"title":{},"body":{"license.html":{}}}],["associated",{"_index":320,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"license.html":{}}}],["assume",{"_index":1425,"title":{},"body":{"license.html":{}}}],["async",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["attach",{"_index":1474,"title":{},"body":{"license.html":{}}}],["attached",{"_index":1255,"title":{},"body":{"license.html":{}}}],["attempting",{"_index":718,"title":{},"body":{"injectables/PostService.html":{}}}],["attribution",{"_index":1361,"title":{},"body":{"license.html":{}}}],["auth",{"_index":1141,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":610,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/login",{"_index":930,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/dto/register",{"_index":928,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/dto/update",{"_index":929,"title":{},"body":{"injectables/UserService.html":{}}}],["auth0,oauth2",{"_index":1142,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":158,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":615,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/LoginUserDto.html":{}}}],["authenticated",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{}}}],["authenticates",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authenticating",{"_index":622,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authentication",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginUserDto.html":{},"index.html":{}}}],["authguard",{"_index":617,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":616,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":60,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":411,"title":{},"body":{"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"injectables/PostService.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorization",{"_index":626,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authorized",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostService.html":{},"license.html":{}}}],["authorship",{"_index":1252,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":231,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":414,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["automatically",{"_index":399,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["available",{"_index":1111,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["await",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["b",{"_index":1351,"title":{},"body":{"license.html":{}}}],["bad",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["based",{"_index":119,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/GetRelatedPostsDto.html":{},"index.html":{},"license.html":{}}}],["basic",{"_index":1507,"title":{},"body":{"properties.html":{}}}],["basis",{"_index":1413,"title":{},"body":{"license.html":{}}}],["bcrypt",{"_index":927,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":944,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(password",{"_index":935,"title":{},"body":{"injectables/UserService.html":{}}}],["behalf",{"_index":1278,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":1048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["being",{"_index":559,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["belongs",{"_index":1033,"title":{},"body":{"miscellaneous/functions.html":{}}}],["below",{"_index":1257,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":1236,"title":{},"body":{"license.html":{}}}],["better",{"_index":1172,"title":{},"body":{"index.html":{}}}],["between",{"_index":528,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{},"index.html":{}}}],["bind",{"_index":1271,"title":{},"body":{"license.html":{}}}],["blog",{"_index":310,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blogpost",{"_index":306,"title":{"classes/BlogPost.html":{}},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blogpost.createdby",{"_index":409,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpost.isnew",{"_index":407,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpost.name",{"_index":678,"title":{},"body":{"modules/PostModule.html":{}}}],["blogpost.slug",{"_index":405,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpost.updatedby",{"_index":408,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogpostcomment",{"_index":329,"title":{"classes/BlogPostComment.html":{}},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blogpostcommentdocument",{"_index":423,"title":{},"body":{"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostcommentschema",{"_index":372,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostdocument",{"_index":352,"title":{},"body":{"classes/BlogPost.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostmodel",{"_index":698,"title":{},"body":{"injectables/PostService.html":{}}}],["blogpostsanitizedresponse",{"_index":426,"title":{"interfaces/BlogPostSanitizedResponse.html":{}},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["blogpostschema",{"_index":386,"title":{},"body":{"classes/BlogPost.html":{},"modules/PostModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostschema.pre(\"save",{"_index":403,"title":{},"body":{"classes/BlogPost.html":{}}}],["blogposttitle",{"_index":388,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["blogpostuser",{"_index":227,"title":{"classes/BlogPostUser.html":{}},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostUser.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blogpostuser.name",{"_index":376,"title":{},"body":{"classes/BlogPost.html":{},"modules/UserModule.html":{}}}],["blogpostuserdocument",{"_index":339,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["blogpostuserschema",{"_index":459,"title":{},"body":{"classes/BlogPostUser.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogpostuser})@apiresponse({status",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["body",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostService.html":{}}}],["boilerplate",{"_index":1475,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/UserService.html":{}}}],["bootstrap",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1026,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstraps",{"_index":1017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["both",{"_index":532,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["brackets",{"_index":1477,"title":{},"body":{"license.html":{}}}],["browse",{"_index":1498,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1496,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1185,"title":{},"body":{"index.html":{}}}],["build",{"_index":1109,"title":{},"body":{"index.html":{}}}],["built",{"_index":1066,"title":{},"body":{"index.html":{}}}],["c",{"_index":1358,"title":{},"body":{"license.html":{}}}],["cant",{"_index":823,"title":{},"body":{"injectables/PostService.html":{}}}],["carry",{"_index":1353,"title":{},"body":{"license.html":{}}}],["cause",{"_index":1225,"title":{},"body":{"license.html":{}}}],["changed",{"_index":1357,"title":{},"body":{"license.html":{}}}],["character",{"_index":863,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["charge",{"_index":1308,"title":{},"body":{"license.html":{}}}],["check",{"_index":569,"title":{},"body":{"controllers/HealthController.html":{}}}],["checking",{"_index":924,"title":{},"body":{"injectables/UserService.html":{}}}],["checks",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"classes/CreateRelationshipDto.html":{},"controllers/HealthController.html":{},"miscellaneous/functions.html":{}}}],["choose",{"_index":1072,"title":{},"body":{"index.html":{},"license.html":{}}}],["circular",{"_index":471,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["claim",{"_index":1335,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1325,"title":{},"body":{"license.html":{}}}],["class",{"_index":41,"title":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":307,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["clone",{"_index":1083,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":670,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":671,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":882,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":883,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":884,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cms",{"_index":148,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"properties.html":{}}}],["code",{"_index":1035,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["combination",{"_index":1331,"title":{},"body":{"license.html":{}}}],["comment",{"_index":335,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreateCommentDto.html":{},"injectables/PostService.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["comment._id.tostring",{"_index":846,"title":{},"body":{"injectables/PostService.html":{}}}],["comment.dto",{"_index":749,"title":{},"body":{"injectables/PostService.html":{}}}],["comment.dto.stub.ts",{"_index":967,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":486,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:21",{"_index":495,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:33",{"_index":502,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.schema",{"_index":373,"title":{},"body":{"classes/BlogPost.html":{}}}],["commentdoesnotexist",{"_index":460,"title":{"classes/CommentDoesNotExist.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["commentdoesnotexist(`comment",{"_index":847,"title":{},"body":{"injectables/PostService.html":{}}}],["commentid",{"_index":713,"title":{},"body":{"injectables/PostService.html":{}}}],["commentindex",{"_index":844,"title":{},"body":{"injectables/PostService.html":{}}}],["commentinsufficientpermissionserror",{"_index":483,"title":{"classes/CommentInsufficientPermissionsError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["commentinsufficientpermissionserror(\"you",{"_index":848,"title":{},"body":{"injectables/PostService.html":{}}}],["comments",{"_index":322,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["commercial",{"_index":1448,"title":{},"body":{"license.html":{}}}],["common",{"_index":1219,"title":{},"body":{"license.html":{}}}],["communication",{"_index":1282,"title":{},"body":{"license.html":{}}}],["community",{"_index":1091,"title":{},"body":{"index.html":{}}}],["compare",{"_index":905,"title":{},"body":{"injectables/UserService.html":{}}}],["comparepassword",{"_index":889,"title":{},"body":{"injectables/UserService.html":{}}}],["comparepassword(password",{"_index":899,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":902,"title":{},"body":{"injectables/UserService.html":{}}}],["compiled",{"_index":1250,"title":{},"body":{"license.html":{}}}],["completed",{"_index":1161,"title":{},"body":{"index.html":{}}}],["compliance",{"_index":1490,"title":{},"body":{"license.html":{}}}],["complies",{"_index":1384,"title":{},"body":{"license.html":{}}}],["compose",{"_index":1108,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":1446,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":1201,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["configuration",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"license.html":{}}}],["conflictexception",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["conflictexception(\"user",{"_index":934,"title":{},"body":{"injectables/UserService.html":{}}}],["conflicts",{"_index":468,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["connection",{"_index":1097,"title":{},"body":{"index.html":{}}}],["consectetur",{"_index":517,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["consequential",{"_index":1440,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":1460,"title":{},"body":{"license.html":{}}}],["console.warn(`no",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["conspicuously",{"_index":1293,"title":{},"body":{"license.html":{}}}],["const",{"_index":135,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constitutes",{"_index":1339,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(@injectmodel(blogpost.name",{"_index":754,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(@injectmodel(blogpostuser.name",{"_index":931,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(blogpostmodel",{"_index":694,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(configservice",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(message",{"_index":465,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["constructor(private",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(usermodel",{"_index":894,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["constructs",{"_index":697,"title":{},"body":{"injectables/PostService.html":{}}}],["construed",{"_index":1381,"title":{},"body":{"license.html":{}}}],["contain",{"_index":858,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["contained",{"_index":1366,"title":{},"body":{"license.html":{}}}],["containers",{"_index":1110,"title":{},"body":{"index.html":{}}}],["containing",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["content",{"_index":319,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":1375,"title":{},"body":{"license.html":{}}}],["contract",{"_index":1227,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":1182,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":1273,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":1329,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":1183,"title":{},"body":{"index.html":{},"license.html":{}}}],["contributor",{"_index":1297,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":1340,"title":{},"body":{"license.html":{}}}],["control",{"_index":1217,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":1218,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["controller(\"/api/v1",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"health",{"_index":588,"title":{},"body":{"controllers/HealthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["conversions",{"_index":1251,"title":{},"body":{"license.html":{}}}],["copies",{"_index":1346,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1099,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":1209,"title":{},"body":{"license.html":{}}}],["correct",{"_index":925,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["correspond",{"_index":543,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["counterclaim",{"_index":1336,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":957,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":383,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"injectables/PostService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["createblogpost",{"_index":684,"title":{},"body":{"injectables/PostService.html":{}}}],["createblogpost(@body",{"_index":755,"title":{},"body":{"injectables/PostService.html":{}}}],["createblogpost(createpostdto",{"_index":705,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdto",{"_index":484,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createcommentdto.author",{"_index":840,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdto.content",{"_index":841,"title":{},"body":{"injectables/PostService.html":{}}}],["createcommentdtostub",{"_index":969,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":344,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["createdat",{"_index":799,"title":{},"body":{"injectables/PostService.html":{}}}],["createdblogpostresponse",{"_index":443,"title":{"interfaces/CreatedBlogPostResponse.html":{}},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createdby",{"_index":323,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["createpostdto",{"_index":508,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createpostdtostub",{"_index":971,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createrelation",{"_index":685,"title":{},"body":{"injectables/PostService.html":{}}}],["createrelation(sourcepostid",{"_index":709,"title":{},"body":{"injectables/PostService.html":{}}}],["createrelationshipdto",{"_index":525,"title":{"classes/CreateRelationshipDto.html":{}},"body":{"classes/CreateRelationshipDto.html":{},"coverage.html":{}}}],["creates",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["creating",{"_index":487,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{}}}],["creation",{"_index":445,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["creator",{"_index":402,"title":{},"body":{"classes/BlogPost.html":{}}}],["credentials",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["credentials.'})@apiresponse({status",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["cross",{"_index":1334,"title":{},"body":{"license.html":{}}}],["current",{"_index":348,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"index.html":{}}}],["custom",{"_index":666,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/PostError.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["customary",{"_index":1404,"title":{},"body":{"license.html":{}}}],["customize",{"_index":1047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["d",{"_index":1364,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1438,"title":{},"body":{"license.html":{}}}],["data",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":385,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":324,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["declarations",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":667,"title":{},"body":{"classes/LoginUserDto.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["decorators/hasusernameoremail.decorator",{"_index":662,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["default",{"_index":131,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["defend",{"_index":1466,"title":{},"body":{"license.html":{}}}],["define",{"_index":488,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["defined",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"license.html":{}}}],["defines",{"_index":312,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{}}}],["definition",{"_index":382,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["definitions",{"_index":1204,"title":{},"body":{"license.html":{}}}],["delete",{"_index":717,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["deletecomment",{"_index":686,"title":{},"body":{"injectables/PostService.html":{}}}],["deletecomment(postid",{"_index":712,"title":{},"body":{"injectables/PostService.html":{}}}],["deleted",{"_index":716,"title":{},"body":{"injectables/PostService.html":{}}}],["deletepost",{"_index":687,"title":{},"body":{"injectables/PostService.html":{}}}],["deletepost(id",{"_index":721,"title":{},"body":{"injectables/PostService.html":{}}}],["deletes",{"_index":715,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["deleting",{"_index":681,"title":{},"body":{"injectables/PostService.html":{}}}],["deletion",{"_index":807,"title":{},"body":{"injectables/PostService.html":{}}}],["deliberate",{"_index":1433,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":51,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployment",{"_index":1168,"title":{},"body":{"index.html":{}}}],["derivative",{"_index":1258,"title":{},"body":{"license.html":{}}}],["derived",{"_index":1260,"title":{},"body":{"license.html":{}}}],["describing",{"_index":1405,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":1295,"title":{},"body":{"license.html":{}}}],["desired",{"_index":1098,"title":{},"body":{"index.html":{}}}],["desk",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["details",{"_index":704,"title":{},"body":{"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["determining",{"_index":1422,"title":{},"body":{"license.html":{}}}],["developers",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["development",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["devinstructions",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["different",{"_index":1149,"title":{},"body":{"index.html":{},"license.html":{}}}],["direct",{"_index":1223,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1226,"title":{},"body":{"license.html":{}}}],["directly",{"_index":652,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["disclaimer",{"_index":1408,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":1291,"title":{},"body":{"license.html":{}}}],["discussions",{"_index":1070,"title":{},"body":{"index.html":{}}}],["disk",{"_index":577,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":583,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":855,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["distribute",{"_index":1317,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1368,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1203,"title":{},"body":{"license.html":{}}}],["docker",{"_index":1075,"title":{},"body":{"index.html":{}}}],["document",{"_index":377,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["documentation",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["documents",{"_index":314,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["doe",{"_index":507,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":856,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["doe'})@isstring({message",{"_index":492,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["doesn't",{"_index":787,"title":{},"body":{"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["dolor",{"_index":514,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["domain",{"_index":1029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["don't",{"_index":1480,"title":{},"body":{"license.html":{}}}],["download",{"_index":1090,"title":{},"body":{"index.html":{}}}],["dto",{"_index":646,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":745,"title":{},"body":{"injectables/PostService.html":{}}}],["dto/login",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["during",{"_index":851,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["e.g",{"_index":447,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"miscellaneous/functions.html":{}}}],["each",{"_index":334,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["easier",{"_index":1484,"title":{},"body":{"license.html":{}}}],["editorial",{"_index":1261,"title":{},"body":{"license.html":{}}}],["efficient",{"_index":1170,"title":{},"body":{"index.html":{}}}],["elaborations",{"_index":1264,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":1279,"title":{},"body":{"license.html":{}}}],["elit",{"_index":519,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPostUser.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["empty",{"_index":494,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["empty.'})@isstring({message",{"_index":539,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["enabling",{"_index":1067,"title":{},"body":{"index.html":{}}}],["enclosed",{"_index":1476,"title":{},"body":{"license.html":{}}}],["end",{"_index":1472,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":1123,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":570,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["engage",{"_index":1069,"title":{},"body":{"index.html":{}}}],["enjoy",{"_index":155,"title":{},"body":{"injectables/AppService.html":{}}}],["enjoyed",{"_index":499,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["ensure",{"_index":668,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["ensures",{"_index":558,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["ensuring",{"_index":533,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["entities",{"_index":1216,"title":{},"body":{"license.html":{}}}],["entity",{"_index":1211,"title":{},"body":{"license.html":{}}}],["env",{"_index":1094,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1093,"title":{},"body":{"index.html":{}}}],["environment",{"_index":86,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["eq",{"_index":781,"title":{},"body":{"injectables/PostService.html":{}}}],["error",{"_index":462,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{}}}],["errors",{"_index":475,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{}}}],["eslint/eslint",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["establish",{"_index":530,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"index.html":{}}}],["establishing",{"_index":545,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["etc",{"_index":1140,"title":{},"body":{"index.html":{}}}],["even",{"_index":1450,"title":{},"body":{"license.html":{}}}],["event",{"_index":1429,"title":{},"body":{"license.html":{}}}],["example",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"license.html":{}}}],["example:example",{"_index":1103,"title":{},"body":{"index.html":{}}}],["except",{"_index":1319,"title":{},"body":{"license.html":{}}}],["exceptions",{"_index":1032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["excluding",{"_index":431,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/UserService.html":{},"license.html":{}}}],["exclusive",{"_index":1307,"title":{},"body":{"license.html":{}}}],["exec",{"_index":785,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["executed",{"_index":1396,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":1427,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1238,"title":{},"body":{"license.html":{}}}],["exist",{"_index":770,"title":{},"body":{"injectables/PostService.html":{}}}],["existing",{"_index":463,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateRelationshipDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["existingpost",{"_index":757,"title":{},"body":{"injectables/PostService.html":{}}}],["existinguser",{"_index":932,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["experience",{"_index":157,"title":{},"body":{"injectables/AppService.html":{}}}],["expiresin",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1387,"title":{},"body":{"license.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exposed",{"_index":1056,"title":{},"body":{"miscellaneous/functions.html":{}}}],["express",{"_index":435,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"dependencies.html":{},"license.html":{}}}],["expressrequestwithblogpostuser",{"_index":214,"title":{"interfaces/ExpressRequestWithBlogPostUser.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"coverage.html":{}}}],["extends",{"_index":433,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["extractjwt",{"_index":636,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":639,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":625,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":808,"title":{},"body":{"injectables/PostService.html":{}}}],["failure",{"_index":449,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"license.html":{}}}],["false",{"_index":142,"title":{},"body":{"injectables/AppService.html":{},"injectables/JwtStrategy.html":{}}}],["faster",{"_index":1169,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1187,"title":{},"body":{"index.html":{}}}],["fee",{"_index":1454,"title":{},"body":{"license.html":{}}}],["field",{"_index":346,"title":{},"body":{"classes/BlogPost.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["fields",{"_index":440,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["fifty",{"_index":1230,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["filed",{"_index":1344,"title":{},"body":{"license.html":{}}}],["files",{"_index":1245,"title":{},"body":{"license.html":{}}}],["filtering",{"_index":1148,"title":{},"body":{"index.html":{}}}],["finalport",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["find",{"_index":795,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["findbyid",{"_index":890,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(userid",{"_index":910,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername",{"_index":891,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername(username",{"_index":913,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusernameoremail",{"_index":892,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusernameoremail(identifier",{"_index":915,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":780,"title":{},"body":{"injectables/PostService.html":{}}}],["finds",{"_index":912,"title":{},"body":{"injectables/UserService.html":{}}}],["fitness",{"_index":1419,"title":{},"body":{"license.html":{}}}],["following",{"_index":1088,"title":{},"body":{"index.html":{},"license.html":{}}}],["forbiddenexception",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["form",{"_index":1240,"title":{},"body":{"license.html":{}}}],["format",{"_index":442,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"classes/RegisterUserDto.html":{},"license.html":{}}}],["formatted",{"_index":390,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["found",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1175,"title":{},"body":{"index.html":{}}}],["free",{"_index":1310,"title":{},"body":{"license.html":{}}}],["friendly",{"_index":362,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["frontend",{"_index":1143,"title":{},"body":{"index.html":{}}}],["function",{"_index":391,"title":{},"body":{"classes/BlogPost.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1010,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1163,"title":{},"body":{"index.html":{}}}],["future",{"_index":1131,"title":{},"body":{"index.html":{}}}],["generate",{"_index":389,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["generated",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["generates",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["generateslug",{"_index":977,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(blogpost.title",{"_index":406,"title":{},"body":{"classes/BlogPost.html":{}}}],["generateslug(blogposttitle",{"_index":392,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["generating",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["generation",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":1037,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get()@healthcheck",{"_index":571,"title":{},"body":{"controllers/HealthController.html":{}}}],["getallposts",{"_index":688,"title":{},"body":{"injectables/PostService.html":{}}}],["getcomments",{"_index":689,"title":{},"body":{"injectables/PostService.html":{}}}],["getcomments(postid",{"_index":726,"title":{},"body":{"injectables/PostService.html":{}}}],["getdevinstructions",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getisdev",{"_index":111,"title":{},"body":{"injectables/AppService.html":{}}}],["getport",{"_index":104,"title":{},"body":{"injectables/AppService.html":{}}}],["getpostbyid",{"_index":690,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyid(id",{"_index":729,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyslug",{"_index":691,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyslug(slug",{"_index":731,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostsbypagination",{"_index":692,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostsbypagination(page",{"_index":733,"title":{},"body":{"injectables/PostService.html":{}}}],["getrelatedposts",{"_index":693,"title":{},"body":{"injectables/PostService.html":{}}}],["getrelatedposts(id",{"_index":740,"title":{},"body":{"injectables/PostService.html":{}}}],["getrelatedpostsdto",{"_index":553,"title":{"classes/GetRelatedPostsDto.html":{}},"body":{"classes/GetRelatedPostsDto.html":{},"coverage.html":{}}}],["gets",{"_index":106,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":1062,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["github",{"_index":1156,"title":{},"body":{"index.html":{}}}],["give",{"_index":1349,"title":{},"body":{"license.html":{}}}],["given",{"_index":557,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"injectables/PostService.html":{}}}],["global",{"_index":1022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["goodwill",{"_index":1444,"title":{},"body":{"license.html":{}}}],["governing",{"_index":1494,"title":{},"body":{"license.html":{}}}],["grant",{"_index":1301,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1239,"title":{},"body":{"license.html":{}}}],["granting",{"_index":1212,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1304,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1499,"title":{},"body":{"modules.html":{}}}],["great",{"_index":497,"title":{},"body":{"classes/CreateCommentDto.html":{},"miscellaneous/variables.html":{}}}],["grigoropoulos",{"_index":1489,"title":{},"body":{"license.html":{},"properties.html":{}}}],["grossly",{"_index":1434,"title":{},"body":{"license.html":{}}}],["guard",{"_index":611,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handle",{"_index":1039,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handledomainerrors",{"_index":980,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["handledomainerrors(error",{"_index":1027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handles",{"_index":1028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handling",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["harmless",{"_index":1468,"title":{},"body":{"license.html":{}}}],["hashed",{"_index":455,"title":{},"body":{"classes/BlogPostUser.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":900,"title":{},"body":{"injectables/UserService.html":{}}}],["hasusernameoremail",{"_index":661,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hasusernameoremail(validationoptions",{"_index":1041,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hasusernameoremail({message",{"_index":649,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["header",{"_index":627,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["headless",{"_index":1063,"title":{},"body":{"index.html":{},"properties.html":{}}}],["health",{"_index":568,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["health.controller",{"_index":608,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":580,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":585,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":578,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":566,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicatorresult",{"_index":584,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthmodule",{"_index":61,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heath",{"_index":1121,"title":{},"body":{"index.html":{}}}],["help",{"_index":1508,"title":{},"body":{"properties.html":{}}}],["here",{"_index":153,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["hereby",{"_index":1303,"title":{},"body":{"license.html":{}}}],["herein",{"_index":1392,"title":{},"body":{"license.html":{}}}],["higher",{"_index":1079,"title":{},"body":{"index.html":{}}}],["hold",{"_index":1467,"title":{},"body":{"license.html":{}}}],["hook",{"_index":398,"title":{},"body":{"classes/BlogPost.html":{}}}],["http",{"_index":441,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/HealthController.html":{},"miscellaneous/functions.html":{}}}],["http://localhost:3000",{"_index":1112,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":1199,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":1492,"title":{},"body":{"license.html":{}}}],["httpexception",{"_index":1034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httphealthindicator",{"_index":579,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":606,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://betterstack.com/better",{"_index":592,"title":{},"body":{"controllers/HealthController.html":{}}}],["hub",{"_index":1159,"title":{},"body":{"index.html":{}}}],["hydrated",{"_index":379,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{}}}],["hydrateddocument",{"_index":369,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":477,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"injectables/UserService.html":{},"index.html":{}}}],["identification",{"_index":1485,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":416,"title":{},"body":{"classes/BlogPostComment.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["identifiers",{"_index":531,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["identifying",{"_index":1479,"title":{},"body":{"license.html":{}}}],["ignoreexpiration",{"_index":640,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ii",{"_index":1228,"title":{},"body":{"license.html":{}}}],["iii",{"_index":1235,"title":{},"body":{"license.html":{}}}],["image",{"_index":351,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"index.html":{}}}],["imagepath",{"_index":325,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["images",{"_index":1138,"title":{},"body":{"index.html":{}}}],["images/my",{"_index":521,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["implement",{"_index":1144,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":1126,"title":{},"body":{"index.html":{}}}],["implied",{"_index":1416,"title":{},"body":{"license.html":{}}}],["import",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"license.html":{}}}],["imports",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/BlogPostUser.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["improvements",{"_index":1132,"title":{},"body":{"index.html":{}}}],["improving",{"_index":1292,"title":{},"body":{"license.html":{}}}],["inability",{"_index":1442,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":1439,"title":{},"body":{"license.html":{}}}],["include",{"_index":437,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"license.html":{}}}],["included",{"_index":1059,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["includes",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/CreateRelationshipDto.html":{},"license.html":{}}}],["including",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"controllers/HealthController.html":{},"injectables/UserService.html":{},"license.html":{}}}],["inclusion",{"_index":1277,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":1300,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":1469,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":1465,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":1456,"title":{},"body":{"license.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":1253,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":719,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["indicator",{"_index":589,"title":{},"body":{"controllers/HealthController.html":{}}}],["indirect",{"_index":1224,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1237,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["informational",{"_index":1376,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":1328,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1341,"title":{},"body":{"license.html":{}}}],["initializes",{"_index":1016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectable",{"_index":80,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":742,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["install",{"_index":1086,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1082,"title":{},"body":{"index.html":{}}}],["instance",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"injectables/UserService.html":{},"index.html":{}}}],["institute",{"_index":1332,"title":{},"body":{"license.html":{}}}],["instructions",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["insufficient",{"_index":480,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["intentionally",{"_index":1275,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":897,"title":{},"body":{"injectables/UserService.html":{}}}],["interface",{"_index":425,"title":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":427,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"license.html":{},"overview.html":{}}}],["interfaces/post.interface",{"_index":750,"title":{},"body":{"injectables/PostService.html":{}}}],["internal",{"_index":651,"title":{},"body":{"classes/LoginUserDto.html":{},"miscellaneous/functions.html":{}}}],["invalid",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/UserService.html":{}}}],["ipsum",{"_index":513,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["irrevocable",{"_index":1311,"title":{},"body":{"license.html":{}}}],["isdev",{"_index":90,"title":{},"body":{"injectables/AppService.html":{}}}],["isemail",{"_index":873,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["ismongoid",{"_index":564,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["isnotempty",{"_index":504,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring()@apiproperty({description",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty({message",{"_index":538,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["isoptional",{"_index":660,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isslugvalid",{"_index":775,"title":{},"body":{"injectables/PostService.html":{}}}],["isstring",{"_index":503,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["issue",{"_index":1188,"title":{},"body":{"index.html":{},"license.html":{}}}],["it.'})@isstring({message",{"_index":501,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["january",{"_index":1197,"title":{},"body":{"license.html":{}}}],["jest",{"_index":1153,"title":{},"body":{"index.html":{}}}],["john",{"_index":491,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["john_doe",{"_index":663,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":871,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":658,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["john_doe@example.com",{"_index":664,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["john_doe@example.com'})@isemail()@isnotempty",{"_index":852,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["john_doe@example.com'})@isstring()@isoptional",{"_index":654,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["json",{"_index":623,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.token.here",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt_secret=\"42",{"_index":1107,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":236,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":638,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":273,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keeping",{"_index":1051,"title":{},"body":{"miscellaneous/functions.html":{}}}],["keywords",{"_index":1510,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1415,"title":{},"body":{"license.html":{}}}],["known",{"_index":1036,"title":{},"body":{"miscellaneous/functions.html":{}}}],["language",{"_index":1493,"title":{},"body":{"license.html":{}}}],["languages",{"_index":1150,"title":{},"body":{"index.html":{}}}],["last",{"_index":366,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["law",{"_index":1411,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":1337,"title":{},"body":{"license.html":{}}}],["legal",{"_index":1213,"title":{},"body":{"license.html":{}}}],["legend",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":874,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["length(8",{"_index":876,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter",{"_index":860,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter'})@matches(/(?=.*[0",{"_index":868,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter'})@matches(/(?=.*[a",{"_index":867,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["level",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["liability",{"_index":1428,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1437,"title":{},"body":{"license.html":{}}}],["licensable",{"_index":1326,"title":{},"body":{"license.html":{}}}],["license",{"_index":1191,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1192,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":1342,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":1208,"title":{},"body":{"license.html":{}}}],["limit",{"_index":734,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["limit(limit",{"_index":797,"title":{},"body":{"injectables/PostService.html":{}}}],["limitation",{"_index":1417,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":1495,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1243,"title":{},"body":{"license.html":{}}}],["link",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"license.html":{}}}],["linked",{"_index":544,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["linking",{"_index":357,"title":{},"body":{"classes/BlogPost.html":{}}}],["list",{"_index":725,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["lists",{"_index":1286,"title":{},"body":{"license.html":{}}}],["literal",{"_index":633,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["litigation",{"_index":1333,"title":{},"body":{"license.html":{}}}],["local",{"_index":1085,"title":{},"body":{"index.html":{}}}],["locales",{"_index":1151,"title":{},"body":{"index.html":{}}}],["log",{"_index":1180,"title":{},"body":{"index.html":{}}}],["logged",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["logic",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{}}}],["login",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["login(@body",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginuserdto",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":171,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["loginuserdto.username",{"_index":948,"title":{},"body":{"injectables/UserService.html":{}}}],["logs",{"_index":130,"title":{},"body":{"injectables/AppService.html":{}}}],["lorem",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":1443,"title":{},"body":{"license.html":{}}}],["losses",{"_index":1449,"title":{},"body":{"license.html":{}}}],["lower",{"_index":394,"title":{},"body":{"classes/BlogPost.html":{}}}],["lowercase",{"_index":861,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["machine",{"_index":1074,"title":{},"body":{"index.html":{}}}],["made",{"_index":418,"title":{},"body":{"classes/BlogPostComment.html":{},"index.html":{},"license.html":{}}}],["mailing",{"_index":1285,"title":{},"body":{"license.html":{}}}],["main",{"_index":338,"title":{},"body":{"classes/BlogPost.html":{}}}],["make",{"_index":819,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["making",{"_index":1167,"title":{},"body":{"index.html":{},"license.html":{}}}],["malfunction",{"_index":1447,"title":{},"body":{"license.html":{}}}],["manage",{"_index":384,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":1289,"title":{},"body":{"license.html":{}}}],["management",{"_index":87,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"index.html":{},"license.html":{}}}],["manager",{"_index":1155,"title":{},"body":{"index.html":{}}}],["managing",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["maps",{"_index":1030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["marked",{"_index":1294,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1401,"title":{},"body":{"license.html":{}}}],["match",{"_index":909,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["matches",{"_index":875,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matches(/(?=.*[0",{"_index":879,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matches(/(?=.*[a",{"_index":878,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matching",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mean",{"_index":1206,"title":{},"body":{"license.html":{}}}],["means",{"_index":1221,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":1247,"title":{},"body":{"license.html":{}}}],["media",{"_index":1136,"title":{},"body":{"index.html":{},"license.html":{}}}],["medium",{"_index":1347,"title":{},"body":{"license.html":{}}}],["meet",{"_index":1348,"title":{},"body":{"license.html":{}}}],["memory",{"_index":576,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["memoryhealthindicator",{"_index":582,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":1418,"title":{},"body":{"license.html":{}}}],["merely",{"_index":1270,"title":{},"body":{"license.html":{}}}],["message",{"_index":125,"title":{},"body":{"injectables/AppService.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{}}}],["metadata",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{}}}],["methods",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["middlewares",{"_index":1023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":1009,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":115,"title":{},"body":{"injectables/AppService.html":{}}}],["model",{"_index":695,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["modifications",{"_index":1242,"title":{},"body":{"license.html":{}}}],["modified",{"_index":1352,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1377,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1382,"title":{},"body":{"license.html":{}}}],["modularity",{"_index":1177,"title":{},"body":{"index.html":{}}}],["module",{"_index":48,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/BlogPostUser.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":50,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":316,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mongodb_uri",{"_index":1102,"title":{},"body":{"index.html":{}}}],["mongodb_uri=\"mongodb://mongodb/test",{"_index":1104,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":370,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mongoose.types.objectid",{"_index":707,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["mongoose.types.objectid(userid",{"_index":762,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(id",{"_index":801,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(postid",{"_index":835,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(relationpostid",{"_index":817,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoose.types.objectid.isvalid(sourcepostid",{"_index":816,"title":{},"body":{"injectables/PostService.html":{}}}],["mongoosehealthindicator",{"_index":581,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":677,"title":{},"body":{"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.mongodb_uri",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["monitor",{"_index":1124,"title":{},"body":{"index.html":{}}}],["more",{"_index":888,"title":{},"body":{"injectables/UserService.html":{},"index.html":{},"license.html":{}}}],["multiple",{"_index":1181,"title":{},"body":{"index.html":{}}}],["name",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"injectables/JwtStrategy.html":{},"classes/PostError.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["names",{"_index":1400,"title":{},"body":{"license.html":{}}}],["natively",{"_index":1073,"title":{},"body":{"index.html":{}}}],["necessarily",{"_index":1327,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":534,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"index.html":{}}}],["need",{"_index":1076,"title":{},"body":{"index.html":{}}}],["needed",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{}}}],["negligence",{"_index":1432,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":1435,"title":{},"body":{"license.html":{}}}],["nest",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs",{"_index":1018,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs(express",{"_index":1509,"title":{},"body":{"properties.html":{}}}],["nestjs/axios",{"_index":607,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":618,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":586,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["never",{"_index":1040,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/CreatePostDto.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["newpost",{"_index":763,"title":{},"body":{"injectables/PostService.html":{}}}],["newpost.save",{"_index":766,"title":{},"body":{"injectables/PostService.html":{}}}],["newuser",{"_index":937,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":940,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":404,"title":{},"body":{"classes/BlogPost.html":{}}}],["nikolaos",{"_index":1488,"title":{},"body":{"license.html":{},"properties.html":{}}}],["node.js",{"_index":1077,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":140,"title":{},"body":{"injectables/AppService.html":{}}}],["non",{"_index":496,"title":{},"body":{"classes/CreateCommentDto.html":{},"index.html":{},"license.html":{}}}],["normally",{"_index":1373,"title":{},"body":{"license.html":{}}}],["note",{"_index":1125,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["notfoundexception(\"user",{"_index":946,"title":{},"body":{"injectables/UserService.html":{}}}],["nothing",{"_index":1391,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1254,"title":{},"body":{"license.html":{}}}],["notices",{"_index":1355,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":1389,"title":{},"body":{"license.html":{}}}],["npm",{"_index":1080,"title":{},"body":{"index.html":{}}}],["number",{"_index":127,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{}}}],["number'})@matches",{"_index":869,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["object",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["objectid",{"_index":340,"title":{},"body":{"classes/BlogPost.html":{},"classes/GetRelatedPostsDto.html":{}}}],["objectiduserid",{"_index":761,"title":{},"body":{"injectables/PostService.html":{}}}],["objects",{"_index":1052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obligations",{"_index":1457,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":1491,"title":{},"body":{"license.html":{}}}],["offer",{"_index":1322,"title":{},"body":{"license.html":{}}}],["omit",{"_index":434,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["omits",{"_index":439,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["once",{"_index":1114,"title":{},"body":{"index.html":{}}}],["one",{"_index":820,"title":{},"body":{"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["open",{"_index":1100,"title":{},"body":{"index.html":{}}}],["operating",{"_index":1089,"title":{},"body":{"index.html":{}}}],["operation",{"_index":720,"title":{},"body":{"injectables/PostService.html":{}}}],["operations",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["optimize",{"_index":1164,"title":{},"body":{"index.html":{}}}],["optional",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["order",{"_index":1130,"title":{},"body":{"index.html":{}}}],["orders",{"_index":1128,"title":{},"body":{"index.html":{}}}],["organization",{"_index":1176,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1406,"title":{},"body":{"license.html":{}}}],["original",{"_index":1267,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"license.html":{}}}],["out",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":1233,"title":{},"body":{"license.html":{}}}],["overview",{"_index":1500,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1210,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":1229,"title":{},"body":{"license.html":{}}}],["package",{"_index":983,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":737,"title":{},"body":{"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["pagination",{"_index":736,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["param",{"_index":126,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parchment",{"_index":147,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["part",{"_index":1363,"title":{},"body":{"license.html":{}}}],["partially",{"_index":1068,"title":{},"body":{"index.html":{}}}],["particular",{"_index":1420,"title":{},"body":{"license.html":{}}}],["party",{"_index":1372,"title":{},"body":{"license.html":{}}}],["passport",{"_index":613,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":635,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":629,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"classes/BlogPostUser.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["passwordmatches",{"_index":949,"title":{},"body":{"injectables/UserService.html":{}}}],["passwords",{"_index":908,"title":{},"body":{"injectables/UserService.html":{}}}],["patent",{"_index":1318,"title":{},"body":{"license.html":{}}}],["path",{"_index":350,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/HealthController.html":{},"injectables/PostService.html":{}}}],["payload",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["per",{"_index":739,"title":{},"body":{"injectables/PostService.html":{}}}],["percent",{"_index":1231,"title":{},"body":{"license.html":{}}}],["perform",{"_index":1315,"title":{},"body":{"license.html":{}}}],["performed",{"_index":535,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["performs",{"_index":573,"title":{},"body":{"controllers/HealthController.html":{}}}],["permission",{"_index":806,"title":{},"body":{"injectables/PostService.html":{},"license.html":{}}}],["permissions",{"_index":481,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"license.html":{}}}],["perpetual",{"_index":1305,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":1362,"title":{},"body":{"license.html":{}}}],["places",{"_index":1367,"title":{},"body":{"license.html":{}}}],["plain",{"_index":903,"title":{},"body":{"injectables/UserService.html":{}}}],["plaintoclass",{"_index":743,"title":{},"body":{"injectables/PostService.html":{}}}],["plaintoclass(blogpost",{"_index":756,"title":{},"body":{"injectables/PostService.html":{}}}],["please",{"_index":151,"title":{},"body":{"injectables/AppService.html":{},"classes/GetRelatedPostsDto.html":{},"index.html":{}}}],["plugin",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["populate",{"_index":782,"title":{},"body":{"injectables/PostService.html":{}}}],["port",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["port=\"3000",{"_index":1105,"title":{},"body":{"index.html":{}}}],["possibility",{"_index":1452,"title":{},"body":{"license.html":{}}}],["post",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["post's",{"_index":1061,"title":{},"body":{"miscellaneous/functions.html":{}}}],["post(\"login",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"register",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apiresponse({status",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.comments",{"_index":837,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.findindex(comment",{"_index":845,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.length",{"_index":838,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.push(comment",{"_index":842,"title":{},"body":{"injectables/PostService.html":{}}}],["post.comments.splice(commentindex",{"_index":849,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":676,"title":{},"body":{"modules/PostModule.html":{}}}],["post.createdby._id.equals(userid",{"_index":809,"title":{},"body":{"injectables/PostService.html":{}}}],["post.dto",{"_index":746,"title":{},"body":{"injectables/PostService.html":{}}}],["post.dto.stub.ts",{"_index":970,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["post.dto.ts",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:23",{"_index":524,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:37",{"_index":520,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:51",{"_index":523,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.errors",{"_index":748,"title":{},"body":{"injectables/PostService.html":{}}}],["post.jpg",{"_index":522,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["post.populate",{"_index":805,"title":{},"body":{"injectables/PostService.html":{}}}],["post.relatedposts",{"_index":814,"title":{},"body":{"injectables/PostService.html":{}}}],["post.save",{"_index":843,"title":{},"body":{"injectables/PostService.html":{}}}],["post.service",{"_index":675,"title":{},"body":{"modules/PostModule.html":{}}}],["post.title",{"_index":759,"title":{},"body":{"injectables/PostService.html":{}}}],["post.toobject",{"_index":774,"title":{},"body":{"injectables/PostService.html":{}}}],["post/interfaces/post.interface",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["post/post.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["postcircularrelationship",{"_index":473,"title":{"classes/PostCircularRelationship.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postcircularrelationship(\"can't",{"_index":818,"title":{},"body":{"injectables/PostService.html":{}}}],["postcontroller",{"_index":674,"title":{},"body":{"modules/PostModule.html":{},"coverage.html":{}}}],["postcount",{"_index":791,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist",{"_index":470,"title":{"classes/PostDoesNotExist.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postdoesnotexist(\"post",{"_index":822,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist(\"posts",{"_index":794,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist(\"relationship",{"_index":825,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnotexist(`post",{"_index":786,"title":{},"body":{"injectables/PostService.html":{}}}],["postdoesnothavecomments",{"_index":479,"title":{"classes/PostDoesNotHaveComments.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postdoesnothavecomments(`post",{"_index":839,"title":{},"body":{"injectables/PostService.html":{}}}],["posterror",{"_index":464,"title":{"classes/PostError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["posterror(`didn't",{"_index":813,"title":{},"body":{"injectables/PostService.html":{}}}],["postid",{"_index":702,"title":{},"body":{"injectables/PostService.html":{}}}],["postidvalidationerror",{"_index":478,"title":{"classes/PostIdValidationError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postidvalidationerror(\"provided",{"_index":802,"title":{},"body":{"injectables/PostService.html":{}}}],["postinsufficientpermissionserror",{"_index":482,"title":{"classes/PostInsufficientPermissionsError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postinsufficientpermissionserror(`you",{"_index":810,"title":{},"body":{"injectables/PostService.html":{}}}],["postmodule",{"_index":62,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrelationconflict",{"_index":469,"title":{"classes/PostRelationConflict.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postrelationconflict(\"relationship",{"_index":829,"title":{},"body":{"injectables/PostService.html":{}}}],["postrelationconflict(`post",{"_index":760,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":354,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["posts.dto.ts",{"_index":555,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"coverage.html":{}}}],["posts.dto.ts:23",{"_index":563,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["posts.length",{"_index":773,"title":{},"body":{"injectables/PostService.html":{}}}],["postservice",{"_index":672,"title":{"injectables/PostService.html":{}},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postslugvalidationerror",{"_index":476,"title":{"classes/PostSlugValidationError.html":{}},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["postslugvalidationerror(\"provided",{"_index":789,"title":{},"body":{"injectables/PostService.html":{}}}],["potential",{"_index":1133,"title":{},"body":{"index.html":{}}}],["power",{"_index":1222,"title":{},"body":{"license.html":{}}}],["pre",{"_index":396,"title":{},"body":{"classes/BlogPost.html":{}}}],["preferred",{"_index":1241,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{}}}],["prepare",{"_index":1313,"title":{},"body":{"license.html":{}}}],["printed",{"_index":1483,"title":{},"body":{"license.html":{}}}],["private",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":446,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"index.html":{}}}],["process.env.jwt_secret",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["product",{"_index":1402,"title":{},"body":{"license.html":{}}}],["production",{"_index":122,"title":{},"body":{"injectables/AppService.html":{}}}],["profile",{"_index":881,"title":{},"body":{"classes/UpdateUserDto.html":{},"index.html":{}}}],["project",{"_index":1065,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":1354,"title":{},"body":{"license.html":{}}}],["promise",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["prop",{"_index":367,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["prop({default",{"_index":420,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["prop({required",{"_index":336,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["prop({type",{"_index":330,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["prop({unique",{"_index":359,"title":{},"body":{"classes/BlogPost.html":{}}}],["properties",{"_index":317,"title":{"properties.html":{}},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"properties.html":{}}}],["property",{"_index":551,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["protecting",{"_index":619,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["provide",{"_index":562,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":400,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["providers",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostService.html":{},"license.html":{}}}],["providing",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["public",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["publicly",{"_index":1314,"title":{},"body":{"license.html":{}}}],["publish",{"_index":1158,"title":{},"body":{"index.html":{}}}],["pull",{"_index":1190,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1290,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1220,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["put",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["put(\"users/name",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["query",{"_index":1127,"title":{},"body":{"index.html":{}}}],["readable",{"_index":1365,"title":{},"body":{"license.html":{}}}],["reading",{"_index":500,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["readonly",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["real",{"_index":854,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["really",{"_index":498,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["reason",{"_index":1471,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1403,"title":{},"body":{"license.html":{}}}],["received",{"_index":1298,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":1350,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":1482,"title":{},"body":{"license.html":{}}}],["redistributing",{"_index":1424,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":1345,"title":{},"body":{"license.html":{}}}],["reduce",{"_index":1165,"title":{},"body":{"index.html":{}}}],["reducing",{"_index":1054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ref",{"_index":341,"title":{},"body":{"classes/BlogPost.html":{}}}],["refactor",{"_index":1174,"title":{},"body":{"index.html":{}}}],["refer",{"_index":152,"title":{},"body":{"injectables/AppService.html":{}}}],["reference",{"_index":549,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["referenced",{"_index":345,"title":{},"body":{"classes/BlogPost.html":{}}}],["references",{"_index":355,"title":{},"body":{"classes/BlogPost.html":{}}}],["reflect",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["regarding",{"_index":1397,"title":{},"body":{"license.html":{}}}],["register",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPostUser.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["register(@body",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["registered",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["registers",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["registeruserdto",{"_index":197,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["registration",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["registry",{"_index":1160,"title":{},"body":{"index.html":{}}}],["relate",{"_index":711,"title":{},"body":{"injectables/PostService.html":{}}}],["related",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["relatedpost._id.equals(relationpost._id",{"_index":828,"title":{},"body":{"injectables/PostService.html":{}}}],["relatedposts",{"_index":326,"title":{},"body":{"classes/BlogPost.html":{},"injectables/PostService.html":{}}}],["relation",{"_index":467,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{}}}],["relationexists",{"_index":826,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpost",{"_index":824,"title":{},"body":{"injectables/PostService.html":{}}}],["relationpostid",{"_index":536,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{}}}],["relationship",{"_index":527,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{},"index.html":{}}}],["relationship.dto.ts",{"_index":526,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"coverage.html":{}}}],["relationship.dto.ts:28",{"_index":547,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["relationship.dto.ts:45",{"_index":542,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["relationships",{"_index":472,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"index.html":{}}}],["remain",{"_index":1268,"title":{},"body":{"license.html":{}}}],["remarks",{"_index":550,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{}}}],["removed",{"_index":1053,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rename",{"_index":1092,"title":{},"body":{"index.html":{}}}],["replace",{"_index":1095,"title":{},"body":{"index.html":{}}}],["replaced",{"_index":1478,"title":{},"body":{"license.html":{}}}],["reports",{"_index":1186,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1084,"title":{},"body":{"index.html":{}}}],["represent",{"_index":1265,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":1284,"title":{},"body":{"license.html":{}}}],["represented",{"_index":438,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["representing",{"_index":378,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{}}}],["represents",{"_index":309,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["reproduce",{"_index":1312,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":1407,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":1202,"title":{},"body":{"license.html":{}}}],["req",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"index.html":{}}}],["request.'})@apiresponse({status",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["requested",{"_index":560,"title":{},"body":{"classes/GetRelatedPostsDto.html":{}}}],["requests",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"index.html":{}}}],["required",{"_index":342,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["requires",{"_index":647,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["reset",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["response",{"_index":430,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["responsibility",{"_index":1463,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["result",{"_index":444,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"controllers/HealthController.html":{},"injectables/PostService.html":{},"license.html":{}}}],["result.deletedcount",{"_index":812,"title":{},"body":{"injectables/PostService.html":{}}}],["resulting",{"_index":1246,"title":{},"body":{"license.html":{}}}],["results",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1359,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":738,"title":{},"body":{"injectables/PostService.html":{}}}],["retrieved",{"_index":381,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"miscellaneous/typealiases.html":{}}}],["retrieves",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{}}}],["retrieving",{"_index":556,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{}}}],["return",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["revisions",{"_index":1262,"title":{},"body":{"license.html":{}}}],["rewrite",{"_index":1171,"title":{},"body":{"index.html":{}}}],["rights",{"_index":1459,"title":{},"body":{"license.html":{}}}],["risks",{"_index":1426,"title":{},"body":{"license.html":{}}}],["robust",{"_index":1145,"title":{},"body":{"index.html":{}}}],["routes",{"_index":620,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["royalty",{"_index":1309,"title":{},"body":{"license.html":{}}}],["rules",{"_index":489,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{}}}],["run",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["running",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["safety",{"_index":1173,"title":{},"body":{"index.html":{}}}],["same",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["sanitize",{"_index":1057,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizeblogpost",{"_index":751,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizeblogpost(post",{"_index":1049,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizeblogpost(post.toobject",{"_index":788,"title":{},"body":{"injectables/PostService.html":{}}}],["sanitizeblogpost(updatedpost.toobject",{"_index":834,"title":{},"body":{"injectables/PostService.html":{}}}],["sanitizeblogposts",{"_index":752,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizeblogposts(posts",{"_index":1060,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizeblogposts(posts.map(post",{"_index":800,"title":{},"body":{"injectables/PostService.html":{}}}],["sanitized",{"_index":429,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["sanitizes",{"_index":1050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["save",{"_index":397,"title":{},"body":{"classes/BlogPost.html":{}}}],["savedpost",{"_index":765,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.content",{"_index":768,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.imagepath",{"_index":769,"title":{},"body":{"injectables/PostService.html":{}}}],["savedpost.title",{"_index":767,"title":{},"body":{"injectables/PostService.html":{}}}],["saveduser",{"_index":939,"title":{},"body":{"injectables/UserService.html":{}}}],["saveduser.toobject",{"_index":943,"title":{},"body":{"injectables/UserService.html":{}}}],["scenarios",{"_index":1044,"title":{},"body":{"miscellaneous/functions.html":{}}}],["schema",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":368,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["schemafactory.createforclass(blogpost",{"_index":387,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(blogpostcomment",{"_index":424,"title":{},"body":{"classes/BlogPostComment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(blogpostuser",{"_index":458,"title":{},"body":{"classes/BlogPostUser.html":{},"miscellaneous/variables.html":{}}}],["schemas/comment.schema",{"_index":747,"title":{},"body":{"injectables/PostService.html":{}}}],["schemas/post.schema",{"_index":436,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["schemas/user.schema",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["seamless",{"_index":156,"title":{},"body":{"injectables/AppService.html":{}}}],["secret",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":641,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":1321,"title":{},"body":{"license.html":{}}}],["sections",{"_index":1207,"title":{},"body":{"license.html":{}}}],["secure",{"_index":1178,"title":{},"body":{"index.html":{}}}],["see",{"_index":1196,"title":{},"body":{"index.html":{},"license.html":{}}}],["seed",{"_index":1106,"title":{},"body":{"index.html":{}}}],["select",{"_index":783,"title":{},"body":{"injectables/PostService.html":{}}}],["sell",{"_index":1323,"title":{},"body":{"license.html":{}}}],["sensitive",{"_index":432,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{}}}],["sent",{"_index":1283,"title":{},"body":{"license.html":{}}}],["seo",{"_index":361,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{}}}],["separable",{"_index":1269,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1394,"title":{},"body":{"license.html":{}}}],["server",{"_index":1025,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["serves",{"_index":548,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["service",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"license.html":{}}}],["services",{"_index":575,"title":{},"body":{"controllers/HealthController.html":{}}}],["set",{"_index":141,"title":{},"body":{"injectables/AppService.html":{},"classes/LoginUserDto.html":{}}}],["sets",{"_index":401,"title":{},"body":{"classes/BlogPost.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["shall",{"_index":1205,"title":{},"body":{"license.html":{}}}],["shares",{"_index":1234,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{}}}],["sit",{"_index":515,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":1166,"title":{},"body":{"index.html":{}}}],["skip",{"_index":790,"title":{},"body":{"injectables/PostService.html":{}}}],["skip(skip",{"_index":796,"title":{},"body":{"injectables/PostService.html":{}}}],["slug",{"_index":327,"title":{},"body":{"classes/BlogPost.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["slugify",{"_index":371,"title":{},"body":{"classes/BlogPost.html":{},"dependencies.html":{}}}],["slugify(blogposttitle",{"_index":393,"title":{},"body":{"classes/BlogPost.html":{}}}],["software",{"_index":1244,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1462,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1421,"title":{},"body":{"license.html":{}}}],["solution",{"_index":1146,"title":{},"body":{"index.html":{}}}],["sort",{"_index":798,"title":{},"body":{"injectables/PostService.html":{}}}],["sorting",{"_index":1147,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"modules/PostModule.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"license.html":{}}}],["sourcepost",{"_index":821,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.populate",{"_index":833,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.relatedposts.push(relationpost",{"_index":830,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.relatedposts.some(relatedpost",{"_index":827,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepost.save",{"_index":832,"title":{},"body":{"injectables/PostService.html":{}}}],["sourcepostid",{"_index":537,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{}}}],["special",{"_index":862,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["specific",{"_index":728,"title":{},"body":{"injectables/PostService.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["specification",{"_index":134,"title":{},"body":{"injectables/AppService.html":{}}}],["specified",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["specify",{"_index":1101,"title":{},"body":{"index.html":{}}}],["src/.../comment.schema.ts",{"_index":1513,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hasusernameoremail.decorator.ts",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post.schema.ts",{"_index":1012,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../post.utils.ts",{"_index":1015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":1514,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:19",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:24",{"_index":105,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:40",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:52",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:105",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:56",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:90",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/hasusernameoremail.decorator.ts",{"_index":963,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/dto/login",{"_index":644,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":850,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":880,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":609,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":621,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:15",{"_index":631,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:38",{"_index":634,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/health/health.controller.ts",{"_index":567,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:47",{"_index":572,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":604,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":966,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/dto/create",{"_index":485,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/post/dto/get",{"_index":554,"title":{},"body":{"classes/GetRelatedPostsDto.html":{},"coverage.html":{}}}],["src/post/interfaces/post.interface.ts",{"_index":428,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"coverage.html":{}}}],["src/post/post.controller.ts",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["src/post/post.errors.ts",{"_index":461,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"coverage.html":{}}}],["src/post/post.errors.ts:5",{"_index":669,"title":{},"body":{"classes/PostError.html":{}}}],["src/post/post.module.ts",{"_index":673,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":679,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:123",{"_index":735,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:150",{"_index":730,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:177",{"_index":722,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:205",{"_index":741,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:227",{"_index":710,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:272",{"_index":727,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:297",{"_index":700,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:33",{"_index":696,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:335",{"_index":714,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:49",{"_index":708,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:81",{"_index":724,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:97",{"_index":732,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/utils/post.utils.ts",{"_index":975,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/schemas/comment.schema.ts",{"_index":410,"title":{},"body":{"classes/BlogPostComment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/comment.schema.ts:18",{"_index":415,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:27",{"_index":417,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:36",{"_index":419,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/comment.schema.ts:45",{"_index":421,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["src/schemas/post.schema.ts",{"_index":308,"title":{},"body":{"classes/BlogPost.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/post.schema.ts:18",{"_index":364,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:22",{"_index":349,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:26",{"_index":337,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:30",{"_index":347,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:34",{"_index":360,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:41",{"_index":353,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:48",{"_index":332,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:55",{"_index":343,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/post.schema.ts:62",{"_index":365,"title":{},"body":{"classes/BlogPost.html":{}}}],["src/schemas/user.schema.ts",{"_index":450,"title":{},"body":{"classes/BlogPostUser.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/user.schema.ts:14",{"_index":456,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/schemas/user.schema.ts:18",{"_index":454,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/schemas/user.schema.ts:22",{"_index":451,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/schemas/user.schema.ts:26",{"_index":453,"title":{},"body":{"classes/BlogPostUser.html":{}}}],["src/user/user.module.ts",{"_index":885,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":887,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:110",{"_index":923,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:130",{"_index":921,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:17",{"_index":895,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":917,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":901,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":914,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:82",{"_index":916,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:93",{"_index":911,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/index.ts",{"_index":979,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":1087,"title":{},"body":{"index.html":{}}}],["started",{"_index":150,"title":{"index.html":{},"license.html":{}},"body":{"injectables/AppService.html":{},"index.html":{}}}],["starts",{"_index":1024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":1388,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1320,"title":{},"body":{"license.html":{}}}],["statement",{"_index":1383,"title":{},"body":{"license.html":{}}}],["statements",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":1356,"title":{},"body":{"license.html":{}}}],["status",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{}}}],["stoppage",{"_index":1445,"title":{},"body":{"license.html":{}}}],["stored",{"_index":315,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{}}}],["strategy",{"_index":614,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["strict",{"_index":395,"title":{},"body":{"classes/BlogPost.html":{}}}],["string",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"injectables/PostService.html":{},"classes/PostSlugValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["string.'})@apiproperty({description",{"_index":540,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["string.'})@isnotempty({message",{"_index":493,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["strongp@ssw0rd",{"_index":665,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["strongp@ssw0rd!'})@isstring()@isnotempty",{"_index":656,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["strongp@ssw0rd!'})@isstring()@isnotempty()@length(8",{"_index":864,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["structure",{"_index":313,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"miscellaneous/variables.html":{}}}],["stub",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["subject",{"_index":1302,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1316,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1385,"title":{},"body":{"license.html":{}}}],["submit",{"_index":1189,"title":{},"body":{"index.html":{},"license.html":{}}}],["submitted",{"_index":1276,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":1299,"title":{},"body":{"license.html":{}}}],["success",{"_index":448,"title":{},"body":{"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{}}}],["successful",{"_index":926,"title":{},"body":{"injectables/UserService.html":{}}}],["successfully",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["such",{"_index":1122,"title":{},"body":{"index.html":{},"license.html":{}}}],["suggestions",{"_index":1184,"title":{},"body":{"index.html":{}}}],["super",{"_index":637,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(message",{"_index":466,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{}}}],["supersede",{"_index":1393,"title":{},"body":{"license.html":{}}}],["support",{"_index":1135,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["svg",{"_index":1497,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["swc/helpers",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["syntax",{"_index":1481,"title":{},"body":{"license.html":{}}}],["system",{"_index":311,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostUser.html":{},"injectables/UserService.html":{},"index.html":{}}}],["systems",{"_index":1287,"title":{},"body":{"license.html":{}}}],["table",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["tasks",{"_index":1162,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":1343,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":605,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":1200,"title":{},"body":{"license.html":{}}}],["testing",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tests",{"_index":1154,"title":{},"body":{"index.html":{}}}],["text",{"_index":904,"title":{},"body":{"injectables/UserService.html":{},"license.html":{}}}],["theory",{"_index":1430,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":1272,"title":{},"body":{"license.html":{}}}],["third",{"_index":1371,"title":{},"body":{"license.html":{}}}],["this.appservice.devinstructions",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(loginuserdto",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.blogpostmodel",{"_index":764,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.countdocuments",{"_index":792,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.deleteone",{"_index":811,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.find().select",{"_index":771,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findbyid(id",{"_index":803,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findbyid(postid",{"_index":836,"title":{},"body":{"injectables/PostService.html":{}}}],["this.blogpostmodel.findone",{"_index":758,"title":{},"body":{"injectables/PostService.html":{}}}],["this.comparepassword(loginuserdto.password",{"_index":950,"title":{},"body":{"injectables/UserService.html":{}}}],["this.configservice.get(\"node_env",{"_index":144,"title":{},"body":{"injectables/AppService.html":{}}}],["this.configservice.get(\"port",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["this.disk.checkstorage(\"storage",{"_index":601,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.findbyusernameoremail(loginuserdto.email",{"_index":947,"title":{},"body":{"injectables/UserService.html":{}}}],["this.health.check",{"_index":590,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"uptime",{"_index":591,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.isdev",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["this.jwtservice.sign(payload",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.memory.checkheap(\"memory_heap",{"_index":600,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory_rss",{"_index":597,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.mongodb.pingcheck(\"mongodb",{"_index":594,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.usermodel",{"_index":938,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":945,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":933,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findbyusername(payload.username",{"_index":642,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.register(registeruserdto",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateusername(req.user._id",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.validateuser(loginuserdto",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["those",{"_index":1324,"title":{},"body":{"license.html":{}}}],["threshold",{"_index":602,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":1071,"title":{},"body":{"index.html":{},"license.html":{}}}],["throw",{"_index":643,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":1038,"title":{},"body":{"miscellaneous/functions.html":{}}}],["throws",{"_index":128,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["timeout",{"_index":595,"title":{},"body":{"controllers/HealthController.html":{}}}],["timestamps",{"_index":375,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["title",{"_index":318,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/CreatePostDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["tort",{"_index":1431,"title":{},"body":{"license.html":{}}}],["toy",{"_index":1064,"title":{},"body":{"index.html":{}}}],["tracking",{"_index":1288,"title":{},"body":{"license.html":{}}}],["trade",{"_index":1399,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":1360,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1398,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"license.html":{}}}],["transformation",{"_index":1248,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":744,"title":{},"body":{"injectables/PostService.html":{},"dependencies.html":{}}}],["translation",{"_index":1249,"title":{},"body":{"license.html":{}}}],["true",{"_index":139,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"injectables/PostService.html":{}}}],["trying",{"_index":815,"title":{},"body":{"injectables/PostService.html":{}}}],["two",{"_index":529,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["type",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PostError.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1511,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":422,"title":{},"body":{"classes/BlogPostComment.html":{},"license.html":{}}}],["types.objectid",{"_index":413,"title":{},"body":{"classes/BlogPostComment.html":{}}}],["typescript",{"_index":994,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":952,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":331,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{}}}],["undefined})@apiresponse({status",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["under",{"_index":1193,"title":{},"body":{"index.html":{},"license.html":{}}}],["union",{"_index":1214,"title":{},"body":{"license.html":{}}}],["unique",{"_index":123,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/RegisterUserDto.html":{}}}],["unless",{"_index":1386,"title":{},"body":{"license.html":{}}}],["up",{"_index":1020,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["updatedby",{"_index":328,"title":{},"body":{"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/PostService.html":{},"miscellaneous/functions.html":{}}}],["updatedpost",{"_index":831,"title":{},"body":{"injectables/PostService.html":{}}}],["updateduser",{"_index":954,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser.toobject",{"_index":956,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":212,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateusername",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["updateusername(@body",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusername(updateuserdto",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusername(userid",{"_index":920,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":680,"title":{},"body":{"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["uploads",{"_index":1137,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":859,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["uptime",{"_index":593,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["urls",{"_index":363,"title":{},"body":{"classes/BlogPost.html":{}}}],["usage",{"_index":1113,"title":{},"body":{"index.html":{}}}],["use",{"_index":919,"title":{},"body":{"injectables/UserService.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":132,"title":{},"body":{"injectables/AppService.html":{},"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"classes/CreateCommentDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1043,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["useguards",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@put('users/name",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BlogPost.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user._id",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":645,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:22",{"_index":872,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:23",{"_index":659,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:37",{"_index":655,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:42",{"_index":870,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:51",{"_index":657,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:56",{"_index":853,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:62",{"_index":650,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:70",{"_index":857,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.name",{"_index":953,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":951,"title":{},"body":{"injectables/UserService.html":{}}}],["user.save",{"_index":955,"title":{},"body":{"injectables/UserService.html":{}}}],["user.schema",{"_index":374,"title":{},"body":{"classes/BlogPost.html":{}}}],["user.service",{"_index":886,"title":{},"body":{"modules/UserModule.html":{}}}],["user.username",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userid",{"_index":706,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["usermodel",{"_index":898,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":63,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BlogPostSanitizedResponse.html":{},"classes/BlogPostUser.html":{},"interfaces/CreatedBlogPostResponse.html":{},"interfaces/ExpressRequestWithBlogPostUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["usernames",{"_index":1058,"title":{},"body":{"miscellaneous/functions.html":{}}}],["users",{"_index":321,"title":{},"body":{"classes/BlogPost.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["userschema",{"_index":457,"title":{},"body":{"classes/BlogPostUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":229,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutpassword",{"_index":942,"title":{},"body":{"injectables/UserService.html":{}}}],["uses",{"_index":612,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["using",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"index.html":{},"license.html":{}}}],["utils/post.utils",{"_index":753,"title":{},"body":{"injectables/PostService.html":{}}}],["v10.8.3",{"_index":1081,"title":{},"body":{"index.html":{}}}],["v22.9.0",{"_index":1078,"title":{},"body":{"index.html":{}}}],["valid",{"_index":552,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{}}}],["validate",{"_index":630,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["validate(payload",{"_index":632,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":628,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["validateuser",{"_index":893,"title":{},"body":{"injectables/UserService.html":{}}}],["validateuser(loginuserdto",{"_index":922,"title":{},"body":{"injectables/UserService.html":{}}}],["validating",{"_index":918,"title":{},"body":{"injectables/UserService.html":{}}}],["validation",{"_index":474,"title":{},"body":{"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["validationoptions",{"_index":1042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":505,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/GetRelatedPostsDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":1096,"title":{},"body":{"index.html":{}}}],["variable",{"_index":968,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":103,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/AppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":574,"title":{},"body":{"controllers/HealthController.html":{}}}],["verbal",{"_index":1280,"title":{},"body":{"license.html":{}}}],["verifying",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":154,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["videos",{"_index":1139,"title":{},"body":{"index.html":{}}}],["warning",{"_index":129,"title":{},"body":{"injectables/AppService.html":{}}}],["warranties",{"_index":1414,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1409,"title":{},"body":{"license.html":{}}}],["web",{"_index":624,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["welcome",{"_index":124,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["well",{"_index":682,"title":{},"body":{"injectables/PostService.html":{}}}],["wherever",{"_index":1370,"title":{},"body":{"license.html":{}}}],["whether",{"_index":907,"title":{},"body":{"injectables/UserService.html":{},"license.html":{}}}],["whole",{"_index":1266,"title":{},"body":{"license.html":{}}}],["within",{"_index":358,"title":{},"body":{"classes/BlogPost.html":{},"license.html":{}}}],["without",{"_index":133,"title":{},"body":{"injectables/AppService.html":{},"classes/CommentDoesNotExist.html":{},"classes/CommentInsufficientPermissionsError.html":{},"classes/PostCircularRelationship.html":{},"classes/PostDoesNotExist.html":{},"classes/PostDoesNotHaveComments.html":{},"classes/PostError.html":{},"classes/PostIdValidationError.html":{},"classes/PostInsufficientPermissionsError.html":{},"classes/PostRelationConflict.html":{},"classes/PostSlugValidationError.html":{},"license.html":{}}}],["work",{"_index":380,"title":{},"body":{"classes/BlogPost.html":{},"classes/BlogPostComment.html":{},"classes/BlogPostUser.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["works",{"_index":1259,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":1306,"title":{},"body":{"license.html":{}}}],["write",{"_index":1152,"title":{},"body":{"index.html":{}}}],["writing",{"_index":1296,"title":{},"body":{"license.html":{}}}],["written",{"_index":1281,"title":{},"body":{"license.html":{}}}],["yes",{"_index":1045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["z",{"_index":866,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["z0",{"_index":777,"title":{},"body":{"injectables/PostService.html":{}}}],["za",{"_index":776,"title":{},"body":{"injectables/PostService.html":{}}}],["zoom",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Controller for handling application-level requests and providing information.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getDevInstructions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDevInstructions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDevInstructions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:19\n                        \n                    \n\n\n            \n                \n                        Retrieves development instructions for using the API.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Instructions for developers on how to access the Swagger documentation.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { AppService } from \"./app.service\";\nimport { ApiTags } from \"@nestjs/swagger\";\n\n/**\n * Controller for handling application-level requests and providing information.\n */\n@ApiTags(\"Information Desk\")\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Retrieves development instructions for using the API.\n   *\n   * @returns {string} Instructions for developers on how to access the Swagger documentation.\n   */\n  @Get()\n  getDevInstructions(): string {\n    return this.appService.devInstructions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ConfigModule } from \"@nestjs/config\";\n\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { PostModule } from \"./post/post.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { UserModule } from \"./user/user.module\";\n\n@Module({\n  imports: [AuthModule, ConfigModule.forRoot(), MongooseModule.forRoot(process.env.MONGODB_URI), UserModule, PostModule, HealthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for application configuration and environment management.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    port\n                                \n                                \n                                    isDev\n                                \n                                \n                                    devInstructions\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:9\n                            \n                        \n\n                \n                    \n                            Creates an instance of AppService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service for managing environment variables.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        port\n                    \n                \n\n                \n                    \n                        getport()\n                    \n                \n                            \n                                \n                                    Defined in src/app.service.ts:24\n                                \n                            \n                    \n                        \n                                Gets the port the application will run on.\nIf not specified in the environment variables, defaults to \"3000\".\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isDev\n                    \n                \n\n                \n                    \n                        getisDev()\n                    \n                \n                            \n                                \n                                    Defined in src/app.service.ts:40\n                                \n                            \n                    \n                        \n                                Checks if the application is running in development mode.\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        devInstructions\n                    \n                \n\n                \n                    \n                        getdevInstructions()\n                    \n                \n                            \n                                \n                                    Defined in src/app.service.ts:52\n                                \n                            \n                    \n                        \n                                Provides instructions for using the API based on the environment.\nIn development, it includes a link to the Swagger documentation.\nIn production, it returns a unique welcome message.\nor a welcome message for production mode.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n/**\n * @class AppService\n * Service responsible for application configuration and environment management.\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Creates an instance of AppService.\n   *\n   * @param {ConfigService} configService - The configuration service for managing environment variables.\n   */\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Gets the port the application will run on.\n   * If not specified in the environment variables, defaults to \"3000\".\n   *\n   * @returns {string} The port number as a string.\n   * @throws {Warning} Logs a warning if the default port is used without specification in environment variables.\n   */\n  get port(): string {\n    const port = this.configService.get(\"PORT\");\n    const finalPort = port || \"3000\";\n\n    if (finalPort === \"3000\" && !port) {\n      console.warn(`No port specified in environment variables. Using default port ${finalPort}.`);\n    }\n\n    return finalPort;\n  }\n\n  /**\n   * Checks if the application is running in development mode.\n   *\n   * @returns {boolean} True if the NODE_ENV is set to \"development\", false otherwise.\n   */\n  get isDev(): boolean {\n    return this.configService.get(\"NODE_ENV\") === \"development\";\n  }\n\n  /**\n   * Provides instructions for using the API based on the environment.\n   * In development, it includes a link to the Swagger documentation.\n   * In production, it returns a unique welcome message.\n   *\n   * @returns {string} A string containing instructions for developers in development mode,\n   * or a welcome message for production mode.\n   */\n  get devInstructions(): string {\n    if (this.isDev) {\n      return `Welcome to Parchment CMS API.To get started, please refer to the Swagger Documentation here.`;\n    }\n    return `Welcome to the production version of Parchment CMS API. Enjoy the seamless experience!`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/\n            \n\n\n            \n                Description\n            \n            \n                Controller for user authentication and management, including registration and login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'User successfully logged in.', schema: undefined})@ApiResponse({status: 400, description: 'Bad Request.'})@ApiResponse({status: 401, description: 'Invalid credentials.'})@ApiResponse({status: 404, description: 'User not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:90\n                        \n                    \n\n\n            \n                \n                        Authenticates a user and returns a JWT token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing login credentials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing the access token.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'User successfully registered.', type: BlogPostUser})@ApiResponse({status: 400, description: 'Bad Request.'})@ApiResponse({status: 409, description: 'User with this username or email already exists.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:56\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing registration information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A promise that resolves to the newly registered user's data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserName(updateUserDto: UpdateUserDto, req: ExpressRequestWithBlogPostUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('users/name')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:105\n                        \n                    \n\n\n            \n                \n                        Updates the user's name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing the new username information.\n\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithBlogPostUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object, which includes the authenticated user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A promise that resolves to the updated user's data.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards, Request, Put } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { BlogPostUser } from \"@/schemas/user.schema\";\nimport { UserService } from \"@/user/user.service\";\nimport { AuthService } from \"./auth.service\";\nimport { LoginUserDto } from \"./dto/login-user.dto\";\nimport { RegisterUserDto } from \"./dto/register-user.dto\";\nimport { JwtAuthGuard } from \"./jwt-auth.guard\";\nimport { ExpressRequestWithBlogPostUser } from \"@/post/interfaces/post.interface\";\nimport { UpdateUserDto } from \"./dto/update-user.dto\";\n\n/**\n * Controller for user authentication and management, including registration and login.\n *\n * @class AuthController\n */\n@ApiBearerAuth()\n@ApiTags(\"Authentication\")\n@Controller(\"/api/v1/\")\nexport class AuthController {\n  /**\n   * Creates an instance of AuthController.\n   *\n   * @param {AuthService} authService - Service for handling authentication logic.\n   * @param {UserService} userService - Service for user-related operations.\n   */\n  constructor(\n    private authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Registers a new user.\n   *\n   * @param {RegisterUserDto} registerUserDto - Data transfer object containing registration information.\n   * @returns {Promise>} A promise that resolves to the newly registered user's data.\n   * @throws {BadRequestException} When the request data is invalid.\n   * @throws {ConflictException} When a user with the same username or email already exists.\n   * @method register\n   */\n  @Post(\"register\")\n  @ApiResponse({\n    status: 201,\n    description: \"User successfully registered.\",\n    type: BlogPostUser,\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Bad Request.\",\n  })\n  @ApiResponse({\n    status: 409,\n    description: \"User with this username or email already exists.\",\n  })\n  async register(@Body() registerUserDto: RegisterUserDto): Promise> {\n    return this.userService.register(registerUserDto);\n  }\n\n  /**\n   * Authenticates a user and returns a JWT token.\n   *\n   * @param {LoginUserDto} loginUserDto - Data transfer object containing login credentials.\n   * @returns {Promise} A promise that resolves to an object containing the access token.\n   * @throws {BadRequestException} When the request data is invalid.\n   * @throws {UnauthorizedException} When the credentials are invalid.\n   * @throws {NotFoundException} When the user is not found.\n   * @method login\n   */\n  @Post(\"login\")\n  @ApiResponse({\n    status: 201,\n    description: \"User successfully logged in.\",\n    schema: {\n      example: { accessToken: \"jwt.token.here\" },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Bad Request.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Invalid credentials.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"User not found.\",\n  })\n  async login(@Body() loginUserDto: LoginUserDto): Promise {\n    return this.authService.login(loginUserDto);\n  }\n\n  /**\n   * Updates the user's name.\n   *\n   * @param {UpdateUserDto} updateUserDto - Data transfer object containing the new username information.\n   * @param {ExpressRequestWithBlogPostUser} req - The request object, which includes the authenticated user data.\n   * @returns {Promise>} A promise that resolves to the updated user's data.\n   * @throws {ForbiddenException} When the user is not authorized to update the name.\n   * @method updateUserName\n   */\n  @UseGuards(JwtAuthGuard)\n  @Put(\"users/name\")\n  async updateUserName(@Body() updateUserDto: UpdateUserDto, @Request() req: ExpressRequestWithBlogPostUser): Promise> {\n    return this.userService.updateUserName(req.user._id, updateUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { UserModule } from \"@/user/user.module\";\nimport { AuthService } from \"./auth.service\";\nimport { AuthController } from \"./auth.controller\";\n\n@Module({\n  imports: [\n    UserModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: \"1h\" },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling user authentication, including login and token generation.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for user-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for generating and verifying JWT tokens.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Authenticates a user based on login credentials and generates a JWT access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing the user's login credentials (username and password).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing the generated JWT access token.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\n\nimport { UserService } from \"../user/user.service\";\nimport { LoginUserDto } from \"./dto/login-user.dto\";\n\n/**\n * Service for handling user authentication, including login and token generation.\n *\n * @class AuthService\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Creates an instance of AuthService.\n   *\n   * @param {UserService} userService - Service for user-related operations.\n   * @param {JwtService} jwtService - Service for generating and verifying JWT tokens.\n   */\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Authenticates a user based on login credentials and generates a JWT access token.\n   *\n   * @param {LoginUserDto} loginUserDto - Data transfer object containing the user's login credentials (username and password).\n   * @returns {Promise} A promise that resolves to an object containing the generated JWT access token.\n   * @throws {UnauthorizedException} When the credentials are invalid or the user cannot be validated.\n   * @method login\n   */\n  public async login(loginUserDto: LoginUserDto): Promise {\n    const user = await this.userService.validateUser(loginUserDto);\n    const payload = { username: user.username, sub: user._id };\n    const accessToken = this.jwtService.sign(payload);\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPost.html":{"url":"classes/BlogPost.html","title":"class - BlogPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/post.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post in the system.\nThe BlogPost schema defines the structure of blog post documents stored in MongoDB,\nincluding properties for title, content, associated users, and comments.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                date\n                            \n                            \n                                    \n                                imagePath\n                            \n                            \n                                    \n                                relatedPosts\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BlogPostComment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:48\n                        \n                    \n\n            \n                \n                    An array of comments associated with the blog post.\nEach comment is defined by the BlogPostComment schema.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:26\n                        \n                    \n\n            \n                \n                    The main content of the blog post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPostUserDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'ObjectId', ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:55\n                        \n                    \n\n            \n                \n                    The user who created the blog post, referenced by their ObjectId.\nThis field is required.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:30\n                        \n                    \n\n            \n                \n                    The date the blog post was created or updated. Defaults to the current date.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imagePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:22\n                        \n                    \n\n            \n                \n                    The path to the image associated with the blog post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relatedPosts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPostDocument[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:41\n                        \n                    \n\n            \n                \n                    An array of related blog posts by their ObjectId references.\nThis allows linking to other blog posts within the content.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:34\n                        \n                    \n\n            \n                \n                    The unique slug for the blog post, used for SEO-friendly URLs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:18\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BlogPostUserDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'ObjectId', ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:62\n                        \n                    \n\n            \n                \n                    The user who last updated the blog post, referenced by their ObjectId.\nThis field is optional.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\nimport slugify from \"slugify\";\n\nimport { BlogPostComment, BlogPostCommentSchema } from \"./comment.schema\";\nimport { BlogPostUser, BlogPostUserDocument } from \"./user.schema\";\n\n/**\n * Represents a blog post in the system.\n *\n * The BlogPost schema defines the structure of blog post documents stored in MongoDB,\n * including properties for title, content, associated users, and comments.\n */\n@Schema({ timestamps: true })\nexport class BlogPost {\n  /** The title of the blog post. */\n  @Prop({ required: true })\n  title: string;\n\n  /** The path to the image associated with the blog post. */\n  @Prop({ required: true })\n  imagePath: string;\n\n  /** The main content of the blog post. */\n  @Prop({ required: true })\n  content: string;\n\n  /** The date the blog post was created or updated. Defaults to the current date. */\n  @Prop({ required: true, default: () => new Date() })\n  date: Date;\n\n  /** The unique slug for the blog post, used for SEO-friendly URLs. */\n  @Prop({ unique: true, index: true })\n  slug: string;\n\n  /**\n   * An array of related blog posts by their ObjectId references.\n   * This allows linking to other blog posts within the content.\n   */\n  @Prop({ type: [{ type: \"ObjectId\", ref: \"BlogPost\" }] })\n  relatedPosts: BlogPostDocument[];\n\n  /**\n   * An array of comments associated with the blog post.\n   * Each comment is defined by the BlogPostComment schema.\n   */\n  @Prop({ type: [BlogPostCommentSchema], default: [] })\n  comments: BlogPostComment[];\n\n  /**\n   * The user who created the blog post, referenced by their ObjectId.\n   * This field is required.\n   */\n  @Prop({ type: \"ObjectId\", ref: BlogPostUser.name, required: true })\n  createdBy: BlogPostUserDocument;\n\n  /**\n   * The user who last updated the blog post, referenced by their ObjectId.\n   * This field is optional.\n   */\n  @Prop({ type: \"ObjectId\", ref: BlogPostUser.name })\n  updatedBy: BlogPostUserDocument;\n}\n\n/**\n * The Mongoose document type for BlogPost, representing a hydrated document.\n * This type is used to work with blog post documents retrieved from MongoDB.\n */\nexport type BlogPostDocument = HydratedDocument;\n\n/**\n * The Mongoose schema definition for BlogPost.\n * This schema is used to create and manage blog post documents in the MongoDB database.\n */\nexport const BlogPostSchema = SchemaFactory.createForClass(BlogPost);\n\n/**\n * Generates a slug from the blog post title.\n *\n * @param {string} blogPostTitle - The title of the blog post to generate a slug from.\n * @returns {string} - The generated slug, formatted to be SEO-friendly.\n */\nfunction generateSlug(blogPostTitle: string): string {\n  return slugify(blogPostTitle, { lower: true, strict: true });\n}\n\n/**\n * Mongoose pre-save hook for the BlogPost schema.\n * Automatically generates a slug from the title if not provided,\n * and sets the updatedBy field to the creator when the post is new.\n */\nBlogPostSchema.pre(\"save\", function (next) {\n  const blogPost = this as BlogPostDocument;\n\n  if (!blogPost.slug) {\n    blogPost.slug = generateSlug(blogPost.title);\n  }\n\n  if (blogPost.isNew) {\n    blogPost.updatedBy = blogPost.createdBy;\n  }\n\n  next();\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPostComment.html":{"url":"classes/BlogPostComment.html","title":"class - BlogPostComment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPostComment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/comment.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a comment on a blog post.\nThe BlogPostComment schema defines the structure of comment documents stored in MongoDB,\nincluding properties for the author, content, and date of the comment.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                date\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:18\n                        \n                    \n\n            \n                \n                    The unique identifier for the comment, automatically generated by MongoDB.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:27\n                        \n                    \n\n            \n                \n                    The name of the author who made the comment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:36\n                        \n                    \n\n            \n                \n                    The content of the comment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/comment.schema.ts:45\n                        \n                    \n\n            \n                \n                    The date when the comment was created.\nDefaults to the current date if not provided.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument, Types } from \"mongoose\";\n\n/**\n * Represents a comment on a blog post.\n *\n * The BlogPostComment schema defines the structure of comment documents stored in MongoDB,\n * including properties for the author, content, and date of the comment.\n */\n@Schema({ timestamps: true })\nexport class BlogPostComment {\n  /**\n   * The unique identifier for the comment, automatically generated by MongoDB.\n   *\n   * @type {Types.ObjectId}\n   */\n  @Prop({ type: Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  /**\n   * The name of the author who made the comment.\n   *\n   * @type {string}\n   * @required\n   */\n  @Prop({ required: true })\n  author: string;\n\n  /**\n   * The content of the comment.\n   *\n   * @type {string}\n   * @required\n   */\n  @Prop({ required: true })\n  content: string;\n\n  /**\n   * The date when the comment was created.\n   * Defaults to the current date if not provided.\n   *\n   * @type {Date}\n   */\n  @Prop({ default: () => new Date() })\n  date: Date;\n}\n\n/**\n * The Mongoose document type for BlogPostComment, representing a hydrated document.\n * This type is used to work with comment documents retrieved from MongoDB.\n */\nexport type BlogPostCommentDocument = HydratedDocument;\n\n/**\n * The Mongoose schema definition for BlogPostComment.\n * This schema is used to create and manage comment documents in the MongoDB database.\n */\nexport const BlogPostCommentSchema = SchemaFactory.createForClass(BlogPostComment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BlogPostSanitizedResponse.html":{"url":"interfaces/BlogPostSanitizedResponse.html","title":"interface - BlogPostSanitizedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BlogPostSanitizedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/interfaces/post.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a sanitized response for a blog post, excluding sensitive user information.\n\n            \n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                        \n                                            updatedBy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The username of the user who created the blog post.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The username of the user who last updated the blog post.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from \"express\";\nimport { BlogPostUserDocument } from \"@/schemas/user.schema\";\nimport { BlogPost } from \"@/schemas/post.schema\";\n\n/**\n * Extends the Express Request object to include the authenticated user's information.\n *\n * @interface ExpressRequestWithBlogPostUser\n */\nexport interface ExpressRequestWithBlogPostUser extends Request {\n  /**\n   * The user associated with the request, represented as a BlogPostUserDocument.\n   *\n   * @type {BlogPostUserDocument}\n   */\n  user: BlogPostUserDocument;\n}\n\n/**\n * Represents a sanitized response for a blog post, excluding sensitive user information.\n *\n * @interface BlogPostSanitizedResponse\n * @extends {BlogPost} - This type extends the BlogPost schema but omits the createdBy and updatedBy fields.\n */\nexport interface BlogPostSanitizedResponse extends Omit {\n  /**\n   * The username of the user who created the blog post.\n   *\n   * @type {string}\n   */\n  createdBy: string;\n\n  /**\n   * The username of the user who last updated the blog post.\n   *\n   * @type {string}\n   */\n  updatedBy: string;\n}\n\n/**\n * Represents the HTTP response format for a created blog post.\n *\n * @interface CreatedBlogPostResponse\n */\nexport interface CreatedBlogPostResponse {\n  /**\n   * The result of the creation process (e.g., success or failure).\n   *\n   * @type {string}\n   */\n  result: string;\n\n  /**\n   * The title of the created blog post.\n   *\n   * @type {string}\n   */\n  title: string;\n\n  /**\n   * The content of the created blog post.\n   *\n   * @type {string}\n   */\n  content: string;\n\n  /**\n   * The path to the image associated with the blog post.\n   *\n   * @type {string}\n   */\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogPostUser.html":{"url":"classes/BlogPostUser.html","title":"class - BlogPostUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogPostUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/user.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a user in the blog post system.\nThe BlogPostUser schema defines the structure of the user documents stored in MongoDB,\nincluding properties for username, password, email, and name.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:22\n                        \n                    \n\n            \n                \n                    The unique email address for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:26\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The hashed password for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:14\n                        \n                    \n\n            \n                \n                    The unique username for the user.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\n\n/**\n * Represents a user in the blog post system.\n *\n * The BlogPostUser schema defines the structure of the user documents stored in MongoDB,\n * including properties for username, password, email, and name.\n */\n@Schema()\nexport class BlogPostUser {\n  /** The unique username for the user. */\n  @Prop({ required: true, unique: true })\n  username: string;\n\n  /** The hashed password for the user. */\n  @Prop({ required: true })\n  password: string;\n\n  /** The unique email address for the user. */\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  /** The name of the user. */\n  @Prop({ required: true })\n  name: string;\n}\n\n/**\n * The Mongoose schema for the BlogPostUser.\n * This schema is used to create and manage user documents in the MongoDB database.\n */\nexport const UserSchema = SchemaFactory.createForClass(BlogPostUser);\n\n/**\n * The type representing a hydrated BlogPostUser document.\n * This type is used to work with user documents retrieved from MongoDB.\n */\nexport type BlogPostUserDocument = HydratedDocument;\n\n/**\n * The Mongoose schema definition for BlogPostUser.\n * This can be used in module imports to register the user schema with Mongoose.\n */\nexport const BlogPostUserSchema = SchemaFactory.createForClass(BlogPostUser);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentDoesNotExist.html":{"url":"classes/CommentDoesNotExist.html","title":"class - CommentDoesNotExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentDoesNotExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for comments not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentInsufficientPermissionsError.html":{"url":"classes/CommentInsufficientPermissionsError.html","title":"class - CommentInsufficientPermissionsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentInsufficientPermissionsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post insufficient permissions.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-comment.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a comment.\nThis class is used to define the structure of the data\nrequired to create a comment, including validation rules.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the author of the comment.', example: 'John Doe'})@IsString({message: 'Author must be a string.'})@IsNotEmpty({message: 'Author cannot be empty.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-comment.dto.ts:21\n                        \n                    \n\n            \n                \n                    The name of the author of the comment.\nMust be a non-empty string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The content of the comment.', example: 'Great post! Really enjoyed reading it.'})@IsString({message: 'Content must be a string.'})@IsNotEmpty({message: 'Content cannot be empty.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-comment.dto.ts:33\n                        \n                    \n\n            \n                \n                    The content of the comment.\nMust be a non-empty string.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * Data Transfer Object for creating a comment.\n *\n * This class is used to define the structure of the data\n * required to create a comment, including validation rules.\n */\nexport class CreateCommentDto {\n  /**\n   * The name of the author of the comment.\n   * Must be a non-empty string.\n   */\n  @ApiProperty({\n    description: \"The name of the author of the comment.\",\n    example: \"John Doe\",\n  })\n  @IsString({ message: \"Author must be a string.\" })\n  @IsNotEmpty({ message: \"Author cannot be empty.\" })\n  author: string;\n\n  /**\n   * The content of the comment.\n   * Must be a non-empty string.\n   */\n  @ApiProperty({\n    description: \"The content of the comment.\",\n    example: \"Great post! Really enjoyed reading it.\",\n  })\n  @IsString({ message: \"Content must be a string.\" })\n  @IsNotEmpty({ message: \"Content cannot be empty.\" })\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new blog post.\nThis class defines the structure and validation rules for the\ndata needed to create a new blog post in the application.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                imagePath\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'The content of the blog post', example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:37\n                        \n                    \n\n            \n                \n                    The content of the blog post.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        imagePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'The image path for the blog post', example: '/images/my-new-post.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:51\n                        \n                    \n\n            \n                \n                    The image path for the blog post.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'The title of the blog post', example: 'My new blog post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:23\n                        \n                    \n\n            \n                \n                    The title of the blog post.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * Data Transfer Object for creating a new blog post.\n *\n * This class defines the structure and validation rules for the\n * data needed to create a new blog post in the application.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   *\n   * @type {string}\n   * @example \"My new blog post\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: \"The title of the blog post\",\n    example: \"My new blog post\",\n  })\n  title: string;\n\n  /**\n   * The content of the blog post.\n   *\n   * @type {string}\n   * @example \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: \"The content of the blog post\",\n    example: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  })\n  content: string;\n\n  /**\n   * The image path for the blog post.\n   *\n   * @type {string}\n   * @example \"/images/my-new-post.jpg\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: \"The image path for the blog post\",\n    example: \"/images/my-new-post.jpg\",\n  })\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRelationshipDto.html":{"url":"classes/CreateRelationshipDto.html","title":"class - CreateRelationshipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRelationshipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-relationship.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a relationship between two blog posts.\nThis class defines the structure and validation rules for the data needed\nto establish a relationship between a source post and a related post.\nIt includes the unique identifiers for both posts, ensuring that the\nnecessary validation checks are performed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                relationPostId\n                            \n                            \n                                    \n                                    \n                                    \n                                sourcePostId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        relationPostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Related post ID must not be empty.'})@IsString({message: 'Related post ID must be a string.'})@ApiProperty({description: 'The ID of the related blog post.', example: '60f72b2f9b1e8d001c8f4e81'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-relationship.dto.ts:45\n                        \n                    \n\n            \n                \n                    The ID of the related blog post.\nThis ID should correspond to an existing blog post that will be\nlinked to the source post, establishing a relationship between the two.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sourcePostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Source post ID must not be empty.'})@IsString({message: 'Source post ID must be a string.'})@ApiProperty({description: 'The ID of the source blog post.', example: '60f72b2f9b1e8d001c8f4e80'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-relationship.dto.ts:28\n                        \n                    \n\n            \n                \n                    The ID of the source blog post.\nThis ID should correspond to an existing blog post that serves\nas the reference for the relationship.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * Data Transfer Object for creating a relationship between two blog posts.\n *\n * This class defines the structure and validation rules for the data needed\n * to establish a relationship between a source post and a related post.\n * It includes the unique identifiers for both posts, ensuring that the\n * necessary validation checks are performed.\n */\nexport class CreateRelationshipDto {\n  /**\n   * The ID of the source blog post.\n   *\n   * This ID should correspond to an existing blog post that serves\n   * as the reference for the relationship.\n   *\n   * @example \"60f72b2f9b1e8d001c8f4e80\"\n   * @remarks This property must not be empty and must be a valid string.\n   */\n  @IsNotEmpty({ message: \"Source post ID must not be empty.\" })\n  @IsString({ message: \"Source post ID must be a string.\" })\n  @ApiProperty({\n    description: \"The ID of the source blog post.\",\n    example: \"60f72b2f9b1e8d001c8f4e80\",\n  })\n  sourcePostId: string;\n\n  /**\n   * The ID of the related blog post.\n   *\n   * This ID should correspond to an existing blog post that will be\n   * linked to the source post, establishing a relationship between the two.\n   *\n   * @example \"60f72b2f9b1e8d001c8f4e81\"\n   * @remarks This property must not be empty and must be a valid string.\n   */\n  @IsNotEmpty({ message: \"Related post ID must not be empty.\" })\n  @IsString({ message: \"Related post ID must be a string.\" })\n  @ApiProperty({\n    description: \"The ID of the related blog post.\",\n    example: \"60f72b2f9b1e8d001c8f4e81\",\n  })\n  relationPostId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreatedBlogPostResponse.html":{"url":"interfaces/CreatedBlogPostResponse.html","title":"interface - CreatedBlogPostResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreatedBlogPostResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/interfaces/post.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the HTTP response format for a created blog post.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            imagePath\n                                        \n                                \n                                \n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The content of the created blog post.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path to the image associated with the blog post.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The result of the creation process (e.g., success or failure).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The title of the created blog post.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from \"express\";\nimport { BlogPostUserDocument } from \"@/schemas/user.schema\";\nimport { BlogPost } from \"@/schemas/post.schema\";\n\n/**\n * Extends the Express Request object to include the authenticated user's information.\n *\n * @interface ExpressRequestWithBlogPostUser\n */\nexport interface ExpressRequestWithBlogPostUser extends Request {\n  /**\n   * The user associated with the request, represented as a BlogPostUserDocument.\n   *\n   * @type {BlogPostUserDocument}\n   */\n  user: BlogPostUserDocument;\n}\n\n/**\n * Represents a sanitized response for a blog post, excluding sensitive user information.\n *\n * @interface BlogPostSanitizedResponse\n * @extends {BlogPost} - This type extends the BlogPost schema but omits the createdBy and updatedBy fields.\n */\nexport interface BlogPostSanitizedResponse extends Omit {\n  /**\n   * The username of the user who created the blog post.\n   *\n   * @type {string}\n   */\n  createdBy: string;\n\n  /**\n   * The username of the user who last updated the blog post.\n   *\n   * @type {string}\n   */\n  updatedBy: string;\n}\n\n/**\n * Represents the HTTP response format for a created blog post.\n *\n * @interface CreatedBlogPostResponse\n */\nexport interface CreatedBlogPostResponse {\n  /**\n   * The result of the creation process (e.g., success or failure).\n   *\n   * @type {string}\n   */\n  result: string;\n\n  /**\n   * The title of the created blog post.\n   *\n   * @type {string}\n   */\n  title: string;\n\n  /**\n   * The content of the created blog post.\n   *\n   * @type {string}\n   */\n  content: string;\n\n  /**\n   * The path to the image associated with the blog post.\n   *\n   * @type {string}\n   */\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExpressRequestWithBlogPostUser.html":{"url":"interfaces/ExpressRequestWithBlogPostUser.html","title":"interface - ExpressRequestWithBlogPostUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExpressRequestWithBlogPostUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/interfaces/post.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extends the Express Request object to include the authenticated user's information.\n\n            \n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         BlogPostUserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BlogPostUserDocument\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The user associated with the request, represented as a BlogPostUserDocument.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from \"express\";\nimport { BlogPostUserDocument } from \"@/schemas/user.schema\";\nimport { BlogPost } from \"@/schemas/post.schema\";\n\n/**\n * Extends the Express Request object to include the authenticated user's information.\n *\n * @interface ExpressRequestWithBlogPostUser\n */\nexport interface ExpressRequestWithBlogPostUser extends Request {\n  /**\n   * The user associated with the request, represented as a BlogPostUserDocument.\n   *\n   * @type {BlogPostUserDocument}\n   */\n  user: BlogPostUserDocument;\n}\n\n/**\n * Represents a sanitized response for a blog post, excluding sensitive user information.\n *\n * @interface BlogPostSanitizedResponse\n * @extends {BlogPost} - This type extends the BlogPost schema but omits the createdBy and updatedBy fields.\n */\nexport interface BlogPostSanitizedResponse extends Omit {\n  /**\n   * The username of the user who created the blog post.\n   *\n   * @type {string}\n   */\n  createdBy: string;\n\n  /**\n   * The username of the user who last updated the blog post.\n   *\n   * @type {string}\n   */\n  updatedBy: string;\n}\n\n/**\n * Represents the HTTP response format for a created blog post.\n *\n * @interface CreatedBlogPostResponse\n */\nexport interface CreatedBlogPostResponse {\n  /**\n   * The result of the creation process (e.g., success or failure).\n   *\n   * @type {string}\n   */\n  result: string;\n\n  /**\n   * The title of the created blog post.\n   *\n   * @type {string}\n   */\n  title: string;\n\n  /**\n   * The content of the created blog post.\n   *\n   * @type {string}\n   */\n  content: string;\n\n  /**\n   * The path to the image associated with the blog post.\n   *\n   * @type {string}\n   */\n  imagePath: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetRelatedPostsDto.html":{"url":"classes/GetRelatedPostsDto.html","title":"class - GetRelatedPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetRelatedPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/get-related-posts.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for retrieving related posts.\nThis class defines the structure and validation rules for the request\nto get related blog posts based on a given blog post ID. It ensures\nthat the provided ID is a valid MongoDB ObjectId.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the blog post for which related posts are being requested.', example: '60f6c2d3a8341c8f0a5865c4'})@IsMongoId({message: 'Invalid MongoDB ID format. Please provide a valid ObjectId.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/get-related-posts.dto.ts:23\n                        \n                    \n\n            \n                \n                    The unique identifier of the blog post for which related posts are being requested.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsMongoId } from \"class-validator\";\n\n/**\n * Data Transfer Object for retrieving related posts.\n *\n * This class defines the structure and validation rules for the request\n * to get related blog posts based on a given blog post ID. It ensures\n * that the provided ID is a valid MongoDB ObjectId.\n */\nexport class GetRelatedPostsDto {\n  /**\n   * The unique identifier of the blog post for which related posts are being requested.\n   *\n   * @example \"60f6c2d3a8341c8f0a5865c4\"\n   * @remarks This property must be a valid MongoDB ObjectId format.\n   */\n  @ApiProperty({\n    description: \"The unique identifier of the blog post for which related posts are being requested.\",\n    example: \"60f6c2d3a8341c8f0a5865c4\",\n  })\n  @IsMongoId({ message: \"Invalid MongoDB ID format. Please provide a valid ObjectId.\" })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                Controller for health check endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Performs health checks for various services including HTTP, MongoDB, memory, and disk.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the health check result.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  MongooseHealthIndicator,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n  HealthIndicatorResult,\n  HealthCheckResult,\n} from \"@nestjs/terminus\";\n\n/**\n * Controller for health check endpoints.\n *\n * @class HealthController\n */\n@ApiTags(\"hEaLtH\")\n@Controller(\"health\")\nexport class HealthController {\n  /**\n   * Creates an instance of HealthController.\n   *\n   * @param {HealthCheckService} health - Service for health checks.\n   * @param {HttpHealthIndicator} http - Indicator for HTTP health checks.\n   * @param {MongooseHealthIndicator} mongoDb - Indicator for MongoDB health checks.\n   * @param {MemoryHealthIndicator} memory - Indicator for memory health checks.\n   * @param {DiskHealthIndicator} disk - Indicator for disk health checks.\n   */\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private mongoDb: MongooseHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n  ) {}\n\n  /**\n   * Performs health checks for various services including HTTP, MongoDB, memory, and disk.\n   *\n   * @returns {Promise} A promise that resolves to the health check result.\n   * @method check\n   */\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    return this.health.check([\n      (): Promise => this.http.pingCheck(\"uptime\", \"https://betterstack.com/better-uptime\"),\n      (): Promise => this.mongoDb.pingCheck(\"mongodb\", { timeout: 5000 }),\n      (): Promise => this.memory.checkRSS(\"memory_rss\", 300 * 1024 * 1024),\n      (): Promise => this.memory.checkHeap(\"memory_heap\", 300 * 1024 * 1024),\n      (): Promise =>\n        this.disk.checkStorage(\"storage\", {\n          path: \"/\",\n          threshold: 128 * 1024 * 1024 * 1024,\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HttpModule } from \"@nestjs/axios\";\n\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                This guard uses the Passport JWT strategy to authenticate requests.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard(\"JWT Strategy\")\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * @class JwtAuthGuard\n * @extends AuthGuard\n * @description Guard for protecting routes using JWT authentication.\n * This guard uses the Passport JWT strategy to authenticate requests.\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"JWT Strategy\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Strategy for authenticating users using JSON Web Tokens (JWT).\nThis strategy extracts the JWT from the authorization header and validates it.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"JWT Strategy\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of JwtStrategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for retrieving user information from the database.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:38\n                        \n                    \n\n\n            \n                \n                        Validates the JWT payload and retrieves the associated user from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT payload containing the user's information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the authenticated user object.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BlogPostUser } from \"@/schemas/user.schema\";\nimport { UserService } from \"@/user/user.service\";\nimport { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\n\n/**\n * Strategy for authenticating users using JSON Web Tokens (JWT).\n * This strategy extracts the JWT from the authorization header and validates it.\n *\n * @class JwtStrategy\n * @extends PassportStrategy\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"JWT Strategy\") {\n  /**\n   * Creates an instance of JwtStrategy.\n   *\n   * @constructor\n   * @param {UserService} userService - Service for retrieving user information from the database.\n   */\n  constructor(private readonly userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  /**\n   * Validates the JWT payload and retrieves the associated user from the database.\n   *\n   * @method validate\n   * @param {{ sub: string; username: string }} payload - The JWT payload containing the user's information.\n   * @returns {Promise} A promise that resolves to the authenticated user object.\n   * @throws {UnauthorizedException} When the user associated with the JWT is not found.\n   */\n  public async validate(payload: { sub: string; username: string }): Promise {\n    const user = await this.userService.findByUsername(payload.username);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This DTO requires either a username or an email and a password to authenticate a user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                _hasUsernameOrEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        _hasUsernameOrEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @hasUsernameOrEmail({message: 'Either username or email must be provided.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:62\n                        \n                    \n\n            \n                \n                    This is an internal property for validation logic and should not be set directly by the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email for the user account. Provide either username or email.', example: 'john_doe@example.com'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:37\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for the user account', example: 'StrongP@ssw0rd!'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:51\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for the user account. Provide either username or email.', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:23\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\nimport { hasUsernameOrEmail } from \"../decorators/hasUsernameOrEmail.decorator\";\n\n/**\n * @class LoginUserDto\n * @description Data transfer object for user login credentials.\n * This DTO requires either a username or an email and a password to authenticate a user.\n */\nexport class LoginUserDto {\n  /**\n   * @property {string} [username]\n   * @description Username for the user account. Provide either username or email.\n   * @example \"john_doe\"\n   * @optional\n   */\n  @ApiProperty({\n    description: \"Username for the user account. Provide either username or email.\",\n    example: \"john_doe\",\n  })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  /**\n   * @property {string} [email]\n   * @description Email for the user account. Provide either username or email.\n   * @example \"john_doe@example.com\"\n   * @optional\n   */\n  @ApiProperty({\n    description: \"Email for the user account. Provide either username or email.\",\n    example: \"john_doe@example.com\",\n  })\n  @IsString()\n  @IsOptional()\n  email?: string;\n\n  /**\n   * @property {string} password\n   * @description Password for the user account. This field is required for authentication.\n   * @example \"StrongP@ssw0rd!\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Password for the user account\",\n    example: \"StrongP@ssw0rd!\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  /**\n   * @property {string} [_hasUsernameOrEmail]\n   * @description Custom validation decorator to ensure either username or email must be provided.\n   * This is an internal property for validation logic and should not be set directly by the user.\n   * @optional\n   */\n  @hasUsernameOrEmail({\n    message: \"Either username or email must be provided.\",\n  })\n  _hasUsernameOrEmail?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostCircularRelationship.html":{"url":"classes/PostCircularRelationship.html","title":"class - PostCircularRelationship","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostCircularRelationship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for circular post relationships.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDoesNotExist.html":{"url":"classes/PostDoesNotExist.html","title":"class - PostDoesNotExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDoesNotExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDoesNotHaveComments.html":{"url":"classes/PostDoesNotHaveComments.html","title":"class - PostDoesNotHaveComments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDoesNotHaveComments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for posts without comments.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostError.html":{"url":"classes/PostError.html","title":"class - PostError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom error class for post-related errors.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.errors.ts:5\n                            \n                        \n\n                \n                    \n                            Creates an instance of PostError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostIdValidationError.html":{"url":"classes/PostIdValidationError.html","title":"class - PostIdValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostIdValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post ID validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostInsufficientPermissionsError.html":{"url":"classes/PostInsufficientPermissionsError.html","title":"class - PostInsufficientPermissionsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostInsufficientPermissionsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post insufficient permissions.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPostService\n\nPostService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\nimport { PostService } from \"./post.service\";\nimport { PostController } from \"./post.controller\";\nimport { BlogPost, BlogPostSchema } from \"../schemas/post.schema\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: BlogPost.name, schema: BlogPostSchema }])],\n  controllers: [PostController],\n  providers: [PostService],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostRelationConflict.html":{"url":"classes/PostRelationConflict.html","title":"class - PostRelationConflict","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostRelationConflict\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post relation conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing blog posts.\nThe PostService class provides methods for creating, retrieving, updating,\nand deleting blog posts, as well as managing comments associated with the posts.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createBlogPost\n                            \n                            \n                                    Async\n                                createRelation\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getComments\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostBySlug\n                            \n                            \n                                    Async\n                                getPostsByPagination\n                            \n                            \n                                    Async\n                                getRelatedPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blogPostModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:33\n                            \n                        \n\n                \n                    \n                            Constructs a new PostService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        blogPostModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Mongoose model for BlogPost.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    addComment(postId: string, createCommentDto: CreateCommentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:297\n                        \n                    \n\n\n            \n                \n                        Adds a comment to a blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to which the comment will be added.\n\n\n                                            \n                                        \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the comment details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated blog post with the new comment.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createBlogPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBlogPost(createPostDto: CreatePostDto, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Creates a new blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the post details.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user creating the post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created blog post details.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRelation(sourcePostId: string, relationPostId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:227\n                        \n                    \n\n\n            \n                \n                        Creates a relation between two blog posts.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sourcePostId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the source post.\n\n\n                                            \n                                        \n                                        \n                                                relationPostId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to relate to.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated blog post with the new relation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(postId: string, commentId: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:335\n                        \n                    \n\n\n            \n                \n                        Deletes a comment from a blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post from which the comment will be deleted.\n\n\n                                            \n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the comment to delete.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user attempting to delete the comment.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nAn object indicating the success of the operation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Deletes a blog post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the blog post to delete.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user attempting to delete the post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe number of deleted posts (should be 1).\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Retrieves all blog posts.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA list of sanitized blog posts.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComments(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:272\n                        \n                    \n\n\n            \n                \n                        Retrieves comments for a specific blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA list of comments associated with the post.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Retrieves a blog post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the blog post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe sanitized blog post.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostBySlug\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostBySlug(slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Retrieves a blog post by its slug.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe slug of the blog post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe sanitized blog post.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostsByPagination\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostsByPagination(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:123\n                        \n                    \n\n\n            \n                \n                        Retrieves posts with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of posts per page.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA list of sanitized blog posts.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRelatedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRelatedPosts(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:205\n                        \n                    \n\n\n            \n                \n                        Retrieves related posts for a given post ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post for which to retrieve related posts.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nAn object containing related posts.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\nimport { plainToClass } from \"class-transformer\";\n\nimport { CreatePostDto } from \"./dto/create-post.dto\";\nimport { BlogPost, BlogPostDocument } from \"@/schemas/post.schema\";\nimport { BlogPostComment } from \"@/schemas/comment.schema\";\nimport {\n  PostRelationConflict,\n  PostDoesNotExist,\n  PostError,\n  PostCircularRelationship,\n  PostSlugValidationError,\n  PostIdValidationError,\n  CommentDoesNotExist,\n  PostDoesNotHaveComments,\n  PostInsufficientPermissionsError,\n  CommentInsufficientPermissionsError,\n} from \"./post.errors\";\nimport { CreateCommentDto } from \"./dto/create-comment.dto\";\nimport { BlogPostSanitizedResponse, CreatedBlogPostResponse } from \"./interfaces/post.interface\";\nimport { sanitizeBlogPost, sanitizeBlogPosts } from \"./utils/post.utils\";\n\n/**\n * @class PostService\n * Service for managing blog posts.\n *\n * The PostService class provides methods for creating, retrieving, updating,\n * and deleting blog posts, as well as managing comments associated with the posts.\n */\n@Injectable()\nexport class PostService {\n  /**\n   * Constructs a new PostService.\n   *\n   * @param {Model} blogPostModel - The Mongoose model for BlogPost.\n   */\n  constructor(@InjectModel(BlogPost.name) private blogPostModel: Model) {}\n\n  /**\n   * Creates a new blog post.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the post details.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user creating the post.\n   * @returns {Promise} - The created blog post details.\n   * @throws {PostRelationConflict} - If a post with the same title already exists.\n   */\n  async createBlogPost(@Body() createPostDto: CreatePostDto, userId: mongoose.Types.ObjectId): Promise {\n    const post = plainToClass(BlogPost, createPostDto);\n    const existingPost = await this.blogPostModel.findOne({\n      title: post.title,\n    });\n    if (existingPost) {\n      throw new PostRelationConflict(`Post with title \\\"${post.title}\\\" already exists.`);\n    }\n\n    const objectIdUserId = new mongoose.Types.ObjectId(userId);\n\n    const newPost = new this.blogPostModel({\n      ...post,\n      createdBy: objectIdUserId,\n    });\n\n    const savedPost = await newPost.save();\n\n    return {\n      result: \"success\",\n      title: savedPost.title,\n      content: savedPost.content,\n      imagePath: savedPost.imagePath,\n    };\n  }\n\n  /**\n   * Retrieves all blog posts.\n   *\n   * @returns {Promise} - A list of sanitized blog posts.\n   * @throws {PostDoesNotExist} - If no posts exist.\n   */\n  async getAllPosts(): Promise {\n    const posts = await this.blogPostModel.find().select(\"-__v\").exec();\n    if (posts.length  post.toObject()));\n  }\n\n  /**\n   * Retrieves a blog post by its slug.\n   *\n   * @param {string} slug - The slug of the blog post.\n   * @returns {Promise} - The sanitized blog post.\n   * @throws {PostDoesNotExist} - If no post with the given slug exists.\n   * @throws {PostSlugValidationError} - If the provided slug is not valid.\n   */\n  async getPostBySlug(slug: string): Promise {\n    const isSlugValid = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/.test(slug);\n    if (isSlugValid === true) {\n      const post = await this.blogPostModel\n        .findOne({ slug: { $eq: slug } })\n        .populate({ path: \"createdBy\", select: \"username -_id\" })\n        .populate({ path: \"updatedBy\", select: \"username -_id\" })\n        .select(\"-__v -_id\")\n        .exec();\n      if (!post) {\n        throw new PostDoesNotExist(`Post with slug \\\"${slug}\\\" doesn't exist.`);\n      }\n      return sanitizeBlogPost(post.toObject());\n    } else {\n      throw new PostSlugValidationError(\"Provided slug is not valid\");\n    }\n  }\n\n  /**\n   * Retrieves posts with pagination.\n   *\n   * @param {number} page - The page number to retrieve.\n   * @param {number} limit - The number of posts per page.\n   * @returns {Promise} - A list of sanitized blog posts.\n   * @throws {PostDoesNotExist} - If no posts exist.\n   */\n  async getPostsByPagination(page: number, limit: number): Promise {\n    const skip = page * limit;\n    const postCount = await this.blogPostModel.countDocuments();\n    if (postCount === 0) {\n      throw new PostDoesNotExist(\"Posts are empty!\");\n    }\n\n    const posts = await this.blogPostModel\n      .find()\n      .skip(skip)\n      .limit(limit)\n      .sort(\"-createdAt\")\n      .populate({ path: \"createdBy\", select: \"username -_id\" })\n      .populate({ path: \"updatedBy\", select: \"username -_id\" })\n      .select(\"-__v\")\n      .exec();\n    return sanitizeBlogPosts(posts.map(post => post.toObject()));\n  }\n\n  /**\n   * Retrieves a blog post by its ID.\n   *\n   * @param {string} id - The ID of the blog post.\n   * @returns {Promise} - The sanitized blog post.\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   */\n  async getPostById(id: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new PostIdValidationError(\"Provided id is not valid\");\n    }\n    const post = await this.blogPostModel.findById(id, \"-__v -_id\").exec();\n\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \"${id}\" doesn't exist.`);\n    }\n\n    await post.populate({ path: \"createdBy\", select: \"username -_id\" });\n    await post.populate({ path: \"updatedBy\", select: \"username -_id\" });\n\n    return sanitizeBlogPost(post.toObject());\n  }\n\n  /**\n   * Deletes a blog post by its ID.\n   *\n   * @param {string} id - The ID of the blog post to delete.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user attempting to delete the post.\n   * @returns {Promise} - The number of deleted posts (should be 1).\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   * @throws {PostInsufficientPermissionsError} - If the user does not have permission to delete the post.\n   * @throws {PostError} - If the deletion failed.\n   */\n  async deletePost(id: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new PostIdValidationError(\"Provided id is not valid\");\n    }\n    const post = await this.blogPostModel.findOne({ _id: id }).select(\"-__v -_id\");\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    }\n\n    if (!post.createdBy._id.equals(userId)) {\n      throw new PostInsufficientPermissionsError(`You are not authorized to delete this post.`);\n    }\n\n    const result = await this.blogPostModel.deleteOne({ _id: id }).exec();\n    if (result.deletedCount === 0) {\n      throw new PostError(`Didn't delete post with \\\"${id}\\\" .`);\n    }\n    return result.deletedCount;\n  }\n\n  /**\n   * Retrieves related posts for a given post ID.\n   *\n   * @param {string} id - The ID of the post for which to retrieve related posts.\n   * @returns {Promise} - An object containing related posts.\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   */\n  async getRelatedPosts(id: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new PostIdValidationError(\"Provided id is not valid\");\n    }\n    const post = await this.blogPostModel.findOne({ _id: id }).select(\"-__v -_id\");\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${id}\\\" doesn't exist.`);\n    }\n    return { relatedPosts: post.relatedPosts };\n  }\n\n  /**\n   * Creates a relation between two blog posts.\n   *\n   * @param {string} sourcePostId - The ID of the source post.\n   * @param {string} relationPostId - The ID of the post to relate to.\n   * @returns {Promise} - The updated blog post with the new relation.\n   * @throws {PostIdValidationError} - If either ID is not valid.\n   * @throws {PostCircularRelationship} - If trying to relate the same post.\n   * @throws {PostDoesNotExist} - If either post does not exist.\n   * @throws {PostRelationConflict} - If the relationship already exists.\n   */\n  async createRelation(sourcePostId: string, relationPostId: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(sourcePostId)) {\n      throw new PostIdValidationError(\"Provided sourcePostId is not valid\");\n    }\n    if (!mongoose.Types.ObjectId.isValid(relationPostId)) {\n      throw new PostIdValidationError(\"Provided relationPostId is not valid\");\n    }\n    if (sourcePostId === relationPostId) {\n      throw new PostCircularRelationship(\"Can't make a relation using only one post\");\n    }\n\n    const sourcePost: BlogPostDocument = await this.blogPostModel.findOne({\n      _id: sourcePostId,\n    });\n    if (!sourcePost) {\n      throw new PostDoesNotExist(\"Post doesn't exist cant create a relationship with other Post\");\n    }\n\n    const relationPost: BlogPostDocument = await this.blogPostModel.findOne({\n      _id: relationPostId,\n    });\n    if (!relationPost) {\n      throw new PostDoesNotExist(\"Relationship Post doesn't exist cant create a relationship with Post.\");\n    }\n    const relationExists = sourcePost.relatedPosts.some(relatedPost => relatedPost._id.equals(relationPost._id));\n\n    if (relationExists) {\n      throw new PostRelationConflict(\"Relationship between posts already exists!\");\n    }\n    sourcePost.relatedPosts.push(relationPost);\n    const updatedPost = await sourcePost.save();\n    await sourcePost.populate({ path: \"createdBy\", select: \"username -_id\" });\n    await sourcePost.populate({ path: \"updatedBy\", select: \"username -_id\" });\n    return sanitizeBlogPost(updatedPost.toObject());\n  }\n\n  /**\n   * Retrieves comments for a specific blog post.\n   *\n   * @param {string} postId - The ID of the post.\n   * @returns {Promise} - A list of comments associated with the post.\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   * @throws {PostDoesNotHaveComments} - If the post has no comments.\n   */\n  async getComments(postId: string): Promise {\n    if (!mongoose.Types.ObjectId.isValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.blogPostModel.findById(postId, \"comments\");\n\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \"${postId}\" doesn't exist.`);\n    }\n    if (!post.comments || post.comments.length === 0) {\n      throw new PostDoesNotHaveComments(`Post comments are empty!`);\n    }\n    return post.comments;\n  }\n\n  /**\n   * Adds a comment to a blog post.\n   *\n   * @param {string} postId - The ID of the post to which the comment will be added.\n   * @param {CreateCommentDto} createCommentDto - The data transfer object containing the comment details.\n   * @returns {Promise} - The updated blog post with the new comment.\n   * @throws {PostIdValidationError} - If the provided ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   */\n  async addComment(postId: string, createCommentDto: CreateCommentDto): Promise {\n    if (!mongoose.Types.ObjectId.isValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.blogPostModel.findById(postId);\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${postId}\\\" doesn't exist.`);\n    }\n\n    const comment = {\n      _id: new mongoose.Types.ObjectId(),\n      author: createCommentDto.author,\n      content: createCommentDto.content,\n      date: new Date(),\n    };\n\n    post.comments.push(comment);\n    await post.save();\n\n    await post.populate({ path: \"createdBy\", select: \"username -_id\" });\n    await post.populate({ path: \"updatedBy\", select: \"username -_id\" });\n\n    return sanitizeBlogPost(post.toObject());\n  }\n\n  /**\n   * Deletes a comment from a blog post.\n   *\n   * @param {string} postId - The ID of the post from which the comment will be deleted.\n   * @param {string} commentId - The ID of the comment to delete.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user attempting to delete the comment.\n   * @returns {Promise} - An object indicating the success of the operation.\n   * @throws {PostIdValidationError} - If the provided post ID is not valid.\n   * @throws {PostDoesNotExist} - If no post with the given ID exists.\n   * @throws {CommentDoesNotExist} - If no comment with the given ID exists.\n   * @throws {CommentInsufficientPermissionsError} - If the user does not have permission to delete the comment.\n   */\n  async deleteComment(postId: string, commentId: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!mongoose.Types.ObjectId.isValid(postId)) {\n      throw new PostIdValidationError(\"Provided postId is not valid\");\n    }\n\n    const post = await this.blogPostModel.findById(postId);\n    if (!post) {\n      throw new PostDoesNotExist(`Post with id \\\"${postId}\\\" doesn't exist.`);\n    }\n\n    const commentIndex = post.comments.findIndex(comment => comment._id.toString() === commentId);\n    if (commentIndex === -1) {\n      throw new CommentDoesNotExist(`Comment with id \\\"${commentId}\\\" doesn't exist.`);\n    }\n    if (post.createdBy._id.equals(userId)) {\n      throw new CommentInsufficientPermissionsError(\"You are not authorized to delete comments on this post.\");\n    }\n\n    post.comments.splice(commentIndex, 1);\n    await post.save();\n\n    return { success: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostSlugValidationError.html":{"url":"classes/PostSlugValidationError.html","title":"class - PostSlugValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostSlugValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for post slug validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            PostError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PostError extends Error {\n  /**\n   * Creates an instance of PostError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for post relation conflicts.\n * @class\n * @extends PostError\n */\nexport class PostRelationConflict extends PostError {}\n\n/**\n * Error class for post not existing.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotExist extends PostError {}\n\n/**\n * Error class for circular post relationships.\n * @class\n * @extends PostError\n */\nexport class PostCircularRelationship extends PostError {}\n\n/**\n * Error class for post slug validation errors.\n * @class\n * @extends PostError\n */\nexport class PostSlugValidationError extends PostError {}\n\n/**\n * Error class for post ID validation errors.\n * @class\n * @extends PostError\n */\nexport class PostIdValidationError extends PostError {}\n\n/**\n * Error class for posts without comments.\n * @class\n * @extends PostError\n */\nexport class PostDoesNotHaveComments extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class PostInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for post insufficient permissions.\n * @class\n * @extends PostError\n */\nexport class CommentInsufficientPermissionsError extends PostError {}\n\n/**\n * Error class for comments not existing.\n * @class\n * @extends PostError\n */\nexport class CommentDoesNotExist extends PostError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This DTO is used to validate the information provided during user registration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the user', example: 'john_doe@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:56\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's real or display name', example: 'John Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:70\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for the user account, must contain at least one uppercase letter, one lowercase letter, one number, and one special character', example: 'StrongP@ssw0rd!'})@IsString()@IsNotEmpty()@Length(8, 64)@Matches(/(?=.*[a-z])/, {message: 'Password must contain at least one lowercase letter'})@Matches(/(?=.*[A-Z])/, {message: 'Password must contain at least one uppercase letter'})@Matches(/(?=.*[0-9])/, {message: 'Password must contain at least one number'})@Matches(/(?=.*[!@#$%^&*])/, {message: 'Password must contain at least one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:42\n                        \n                    \n\n            \n                \n                    one lowercase letter, one number, and one special character. This field is required.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique username for the user', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:22\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsString, Length, Matches } from \"class-validator\";\n\n/**\n * @class RegisterUserDto\n * @description Data transfer object for user registration credentials.\n * This DTO is used to validate the information provided during user registration.\n */\nexport class RegisterUserDto {\n  /**\n   * @property {string} username\n   * @description Unique username for the user. This field is required and cannot be empty.\n   * @example \"john_doe\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Unique username for the user\",\n    example: \"john_doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * @property {string} password\n   * @description Password for the user account. Must contain at least one uppercase letter,\n   * one lowercase letter, one number, and one special character. This field is required.\n   * @example \"StrongP@ssw0rd!\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Password for the user account, must contain at least one uppercase letter, one lowercase letter, one number, and one special character\",\n    example: \"StrongP@ssw0rd!\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(8, 64)\n  @Matches(/(?=.*[a-z])/, { message: \"Password must contain at least one lowercase letter\" })\n  @Matches(/(?=.*[A-Z])/, { message: \"Password must contain at least one uppercase letter\" })\n  @Matches(/(?=.*[0-9])/, { message: \"Password must contain at least one number\" })\n  @Matches(/(?=.*[!@#$%^&*])/, { message: \"Password must contain at least one special character\" })\n  password: string;\n\n  /**\n   * @property {string} email\n   * @description Email address of the user. This field is required and must be a valid email format.\n   * @example \"john_doe@example.com\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Email address of the user\",\n    example: \"john_doe@example.com\",\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * @property {string} name\n   * @description The user's real or display name. This field is required and cannot be empty.\n   * @example \"John Doe\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"The user's real or display name\",\n    example: \"John Doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This DTO is used to validate the new details provided for a user's profile update.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new name of the user', example: 'John Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * @class UpdateUserDto\n * @description Data transfer object for updating user information.\n * This DTO is used to validate the new details provided for a user's profile update.\n */\nexport class UpdateUserDto {\n  /**\n   * @property {string} name\n   * @description The new name of the user. This field is required and cannot be empty.\n   * @example \"John Doe\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"The new name of the user\",\n    example: \"John Doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\nimport { BlogPostUserSchema, BlogPostUser } from \"../schemas/user.schema\";\nimport { UserService } from \"./user.service\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: BlogPostUser.name, schema: BlogPostUserSchema }])],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UserService is responsible for managing user-related operations,\nincluding registration, user information updates and more.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findByUsernameOrEmail\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserName\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            Creates an instance of the UserService.\nallowing interaction with the user data in the database.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Mongoose model for the BlogPostUser schema,\nallowing interaction with the user data in the database.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(password: string, hashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Compares a plain text password with a hashed password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to compare.\n\n\n                                            \n                                        \n                                        \n                                                hashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hashed password to compare against.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves to a boolean indicating whether the passwords match.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Finds a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Finds a user by their username.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsernameOrEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsernameOrEmail(identifier: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Finds a user by their username or email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                identifier\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username or email of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Registers a new user in the system after validating that\nthe username and email are not already in use.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing user registration information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \nA promise that resolves to the newly created user data, excluding the password.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserName(userId: mongoose.Types.ObjectId, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:130\n                        \n                    \n\n\n            \n                \n                        Updates the name of a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the new user name.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \nA promise that resolves to the updated user data, excluding the password.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Validates a user by their login credentials, checking if the user exists and\nif the password is correct.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the login credentials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if validation is successful.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, ConflictException, UnauthorizedException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\nimport * as bcrypt from \"bcrypt\";\n\nimport { BlogPostUser, BlogPostUserDocument } from \"../schemas/user.schema\";\nimport { RegisterUserDto } from \"@/auth/dto/register-user.dto\";\nimport { UpdateUserDto } from \"../auth/dto/update-user.dto\";\nimport { LoginUserDto } from \"@/auth/dto/login-user.dto\";\n\n/**\n * @class UserService\n * UserService is responsible for managing user-related operations,\n * including registration, user information updates and more.\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Creates an instance of the UserService.\n   *\n   * @param {Model} userModel - The Mongoose model for the BlogPostUser schema,\n   * allowing interaction with the user data in the database.\n   */\n  constructor(@InjectModel(BlogPostUser.name) private userModel: Model) {}\n\n  /**\n   * Registers a new user in the system after validating that\n   * the username and email are not already in use.\n   *\n   * @param {RegisterUserDto} registerUserDto - The data transfer object containing user registration information.\n   * @returns {Promise>} - A promise that resolves to the newly created user data, excluding the password.\n   * @throws {ConflictException} - If a user with the same username or email already exists.\n   */\n  public async register(registerUserDto: RegisterUserDto): Promise> {\n    const { username, password, email, name } = registerUserDto;\n    const existingUser = await this.userModel.findOne({ $or: [{ username }, { email }] }).exec();\n    if (existingUser) {\n      throw new ConflictException(\"User with this username or email already exists.\");\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const newUser = new this.userModel({\n      username,\n      password: hashedPassword,\n      email,\n      name,\n    });\n    const savedUser = await newUser.save();\n\n    const { password: _, ...userWithoutPassword } = savedUser.toObject();\n    return userWithoutPassword;\n  }\n\n  /**\n   * Compares a plain text password with a hashed password.\n   *\n   * @param {string} password - The plain text password to compare.\n   * @param {string} hashedPassword - The hashed password to compare against.\n   * @returns {Promise} - A promise that resolves to a boolean indicating whether the passwords match.\n   */\n  public async comparePassword(password: string, hashedPassword: string): Promise {\n    return await bcrypt.compare(password, hashedPassword);\n  }\n\n  /**\n   * Finds a user by their username.\n   *\n   * @param {string} username - The username of the user to find.\n   * @returns {Promise} - A promise that resolves to the user document if found.\n   */\n  async findByUsername(username: string): Promise {\n    return await this.userModel.findOne({ username }).exec();\n  }\n\n  /**\n   * Finds a user by their username or email.\n   *\n   * @param {string} identifier - The username or email of the user to find.\n   * @returns {Promise} - A promise that resolves to the user document if found.\n   */\n  async findByUsernameOrEmail(identifier: string): Promise {\n    return await this.userModel.findOne({ $or: [{ username: identifier }, { email: identifier }] }).exec();\n  }\n\n  /**\n   * Finds a user by their ID.\n   *\n   * @param {string} userId - The ID of the user to find.\n   * @returns {Promise} - A promise that resolves to the user document if found.\n   * @throws {NotFoundException} - If the user is not found.\n   */\n  async findById(userId: string): Promise {\n    const user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n    return user;\n  }\n\n  /**\n   * Validates a user by their login credentials, checking if the user exists and\n   * if the password is correct.\n   *\n   * @param {LoginUserDto} loginUserDto - The data transfer object containing the login credentials.\n   * @returns {Promise} - A promise that resolves to the user document if validation is successful.\n   * @throws {NotFoundException} - If the user is not found.\n   * @throws {UnauthorizedException} - If the password is invalid.\n   */\n  async validateUser(loginUserDto: LoginUserDto): Promise {\n    const user = await this.findByUsernameOrEmail(loginUserDto.email ?? loginUserDto.username);\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n    const passwordMatches = await this.comparePassword(loginUserDto.password, user.password);\n    if (!passwordMatches) {\n      throw new UnauthorizedException(\"Invalid password\");\n    }\n    return user;\n  }\n\n  /**\n   * Updates the name of a user.\n   *\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - The data transfer object containing the new user name.\n   * @returns {Promise>} - A promise that resolves to the updated user data, excluding the password.\n   * @throws {NotFoundException} - If the user is not found.\n   */\n  public async updateUserName(userId: mongoose.Types.ObjectId, updateUserDto: UpdateUserDto): Promise> {\n    const { name } = updateUserDto;\n\n    const user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n\n    user.name = name;\n    const updatedUser = await user.save();\n\n    const { password: _, ...userWithoutPassword } = updatedUser.toObject();\n    return userWithoutPassword;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/auth/decorators/hasUsernameOrEmail.decorator.ts\n            \n            function\n            hasUsernameOrEmail\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/dto/create-comment.dto.stub.ts\n            \n            variable\n            CreateCommentDtoStub\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/post/dto/create-post.dto.stub.ts\n            \n            variable\n            CreatePostDtoStub\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/post/dto/create-relationship.dto.ts\n            \n            class\n            CreateRelationshipDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/post/dto/get-related-posts.dto.ts\n            \n            class\n            GetRelatedPostsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/post/interfaces/post.interface.ts\n            \n            interface\n            BlogPostSanitizedResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/post/interfaces/post.interface.ts\n            \n            interface\n            CreatedBlogPostResponse\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/post/interfaces/post.interface.ts\n            \n            interface\n            ExpressRequestWithBlogPostUser\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            CommentDoesNotExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            CommentInsufficientPermissionsError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostCircularRelationship\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostDoesNotExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostDoesNotHaveComments\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostIdValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostInsufficientPermissionsError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostRelationConflict\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.errors.ts\n            \n            class\n            PostSlugValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        src/post/utils/post.utils.ts\n            \n            function\n            sanitizeBlogPost\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/post/utils/post.utils.ts\n            \n            function\n            sanitizeBlogPosts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/comment.schema.ts\n            \n            class\n            BlogPostComment\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/schemas/comment.schema.ts\n            \n            variable\n            BlogPostCommentSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/comment.schema.ts\n            \n            type alias\n            BlogPostCommentDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/post.schema.ts\n            \n            class\n            BlogPost\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            function\n            generateSlug\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            variable\n            BlogPostSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/post.schema.ts\n            \n            type alias\n            BlogPostDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            class\n            BlogPostUser\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            variable\n            BlogPostUserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            type alias\n            BlogPostUserDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        src/utils/index.ts\n            \n            function\n            handleDomainErrors\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.0.11\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^11.0.11\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mongoose : ^11.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.11\n        \n            @nestjs/swagger : ^11.0.6\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @swc/helpers : ^0.5.15\n        \n            @typescript-eslint/eslint-plugin : ^8.25.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.8.0\n        \n            mongoose : ^8.11.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            slugify : ^1.6.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateSlug   (src/.../post.schema.ts)\n                        \n                        \n                            handleDomainErrors   (src/.../index.ts)\n                        \n                        \n                            hasUsernameOrEmail   (src/.../hasUsernameOrEmail.decorator.ts)\n                        \n                        \n                            sanitizeBlogPost   (src/.../post.utils.ts)\n                        \n                        \n                            sanitizeBlogPosts   (src/.../post.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Initializes and bootstraps the NestJS application.\nThis function creates the Nest application, sets up Swagger documentation\nif the environment is development, applies global middlewares, and starts\nthe server on the specified port.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the application is bootstrapped.\n\n                            \n                \n            \n        \n    \n    src/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(blogPostTitle: string)\n                \n            \n\n\n\n\n            \n                \n                        Generates a slug from the blog post title.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                blogPostTitle\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe title of the blog post to generate a slug from.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe generated slug, formatted to be SEO-friendly.\n\n\n                            \n                \n            \n        \n    \n    src/utils/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleDomainErrors\n                        \n                    \n                \n            \n            \n                \nhandleDomainErrors(error)\n                \n            \n\n\n\n\n            \n                \n                        Handles domain-specific errors and maps them to appropriate HTTP exceptions.\nThis function checks if the error belongs to specific domain error classes (e.g., Post errors) and\nthrows an HttpException with the correct HTTP status code and error message. If the error doesn't match any\nknown domain error, a generic internal server error is thrown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object to handle.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     never\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/auth/decorators/hasUsernameOrEmail.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hasUsernameOrEmail\n                        \n                    \n                \n            \n            \n                \nhasUsernameOrEmail(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        A custom validation decorator that checks if either a username or an email is provided.\nThis is useful for scenarios where one of the two fields is required for user login or registration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional validation options to customize the error message and behavior.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/post/utils/post.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sanitizeBlogPost\n                        \n                    \n                \n            \n            \n                \nsanitizeBlogPost(post: BlogPost)\n                \n            \n\n\n\n\n            \n                \n                        Sanitizes a blog post by keeping only the username fields from the createdBy\nand updatedBy user objects. All other data in these fields is removed, reducing\nthe amount of exposed user information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                post\n                                            \n                                                            BlogPost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe blog post to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BlogPostSanitizedResponse\n\n                        \n                            \n                                \nThe sanitized blog post, with only createdBy\nand updatedBy usernames included.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sanitizeBlogPosts\n                        \n                    \n                \n            \n            \n                \nsanitizeBlogPosts(posts)\n                \n            \n\n\n\n\n            \n                \n                        Sanitizes an array of blog posts by keeping only the username fields\nfrom each post's createdBy and updatedBy user objects.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                posts\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of blog posts to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BlogPostSanitizedResponse[]\n\n                        \n                            \n                                \nArray of sanitized blog posts, each with\nonly createdBy and updatedBy usernames included.\n\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n    \n      \n    \n  \n  Parchment CMS\n  A Headless Content Management System\n  \n    This is a toy project for a headless CMS built with \n    NestJS and MongoDB, enabling users to \n    create, delete, and partially manage their posts, \n    establish relationships between them, and engage in discussions through comments.\n  \n  \n   \n  \n\n\n🚀 Getting Started\nTo get started with this project, you can choose to either run the project natively on your machine, or with Docker.\n🏠 Running natively\nTo run the project natively, you will need to have Node.js v22.9.0 or higher and npm v10.8.3 or higher installed on your machine.\n\n🍴 Clone this repository to your local machine.\n💻 Run npm install to install the necessary dependencies.\n🚀 Start a MongoDB instance on your machine by following the instructions provided by MongoDB for your specific operating system. You can download the MongoDB Community Server from here.\n📝 Rename .env.example to .env and replace the values with your own MongoDB connection details and desired api port.\n🚀 Run npm start to start the server.\n\n🐳 Running with Docker\nTo run the project with Docker, you will need to have Docker installed on your machine.\n\n🍴 Clone this repository to your local machine.\n📝 Copy the .env.example file and rename it to .env. Open the .env file and specify the desired values for MONGODB_URI and PORT variables.\nFor example:Example :# The MongoDB connection string for the BlogPost database\nMONGODB_URI=\"mongodb://mongodb/test\"\n# The port on which the Blog CMS API will run\nPORT=\"3000\"\n# The seed string to be used for the JwtStrategy\nJWT_SECRET=\"42\"\n🐳 Run docker compose build to build the containers.\n🐳 Run docker compose up to start the containers.\n🌍 The API will be available at http://localhost:3000/.\n\n📖 Usage\nOnce the server is running, you can use the following endpoints to manage your blog posts:\n\nGET /api/v1/posts: Returns a list of all posts.\nPOST /api/v1/posts: Creates a new post.\nGET /api/v1/posts?page&limit: Get Posts with pagination based on created date.\nGET /api/v1/posts?slug=:slug: Returns a specific post by slug.\nGET /api/v1/posts/:id: Returns a specific post by post ID.\nDELETE /api/v1/posts/:id: Deletes a post by post ID.\nGET /api/v1/posts/:id/relations: Returns relationship posts by post ID\nPOST /api/v1/posts/relation/?sourcePostId&relationPostId: Sets a relationship between two posts.\nGET /heath: Returns useful system information, such as server uptime and memory usage. This endpoint can be used to monitor the health of the application.\n\nNote: The current pagination implementation is based on the page and limit query parameters and orders the results based on created date in ascending order.\n🚀 Future Improvements\nHere are some potential improvements that could be made to this project:\n\n Add support for updating post content\n Add support for media uploads (images, videos, etc.).\n Add support for more auth providers (Auth0,OAuth2 etc)\n Create a frontend interface for post management.\n Implement a more robust pagination solution that allows for custom sorting and filtering.\n Add support for different languages and locales.\n Write jest tests\n Add a process manager\n Add Github Actions to publish image to Docker Hub, Github Registry etc.\n\n✅ Completed Tasks\nHere are the tasks that have already been completed in this project:\n\n✅ Further optimize the Docker images to reduce size, making the deployment process faster and more efficient.\n✅ Rewrite the project in TypeScript for better type safety.\n✅ Refactor the project using the NestJs framework for better code organization and modularity.\n✅ Add support for comments in each post: Users and non-users can add comments to posts and engage in discussions.\n✅ Implement authentication to secure the API.\n✅ Add support for user: Users can create accounts, log in, and manage their profile.\n✅ Have multiple users create their own posts: Each user can create their own posts and manage them.\n\n🤝 Contributing\nContributions to this project are welcome! If you have any suggestions, bug reports, or feature requests, please open an issue or submit a pull request.\n📝 License\nThis project is licensed under the Apache License, Version 2.0. See the LICENSE file for details.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright 2024 Nikolaos Grigoropoulos\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : A basic headless CMS to create your own blog with the help of mongodb and nestjs(express).\n        \n            Keywords : \n        \n            License : Apache-2.0\n        \n            Author : Nikolaos Grigoropoulos\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogPostCommentDocument   (src/.../comment.schema.ts)\n                        \n                        \n                            BlogPostDocument   (src/.../post.schema.ts)\n                        \n                        \n                            BlogPostUserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/comment.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostCommentDocument\n                \n            \n            \n                \n                    The Mongoose document type for BlogPostComment, representing a hydrated document.\nThis type is used to work with comment documents retrieved from MongoDB.\n\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/schemas/post.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostDocument\n                \n            \n            \n                \n                    The Mongoose document type for BlogPost, representing a hydrated document.\nThis type is used to work with blog post documents retrieved from MongoDB.\n\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    BlogPostUserDocument\n                \n            \n            \n                \n                    The type representing a hydrated BlogPostUser document.\nThis type is used to work with user documents retrieved from MongoDB.\n\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogPostCommentSchema   (src/.../comment.schema.ts)\n                        \n                        \n                            BlogPostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            BlogPostUserSchema   (src/.../user.schema.ts)\n                        \n                        \n                            CreateCommentDtoStub   (src/.../create-comment.dto.stub.ts)\n                        \n                        \n                            CreatePostDtoStub   (src/.../create-post.dto.stub.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/comment.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostCommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostComment)\n                    \n                \n\n            \n                \n                    The Mongoose schema definition for BlogPostComment.\nThis schema is used to create and manage comment documents in the MongoDB database.\n\n                \n            \n\n        \n    \n\n    src/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPost)\n                    \n                \n\n            \n                \n                    The Mongoose schema definition for BlogPost.\nThis schema is used to create and manage blog post documents in the MongoDB database.\n\n                \n            \n\n        \n    \n\n    src/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogPostUserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostUser)\n                    \n                \n\n            \n                \n                    The Mongoose schema definition for BlogPostUser.\nThis can be used in module imports to register the user schema with Mongoose.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogPostUser)\n                    \n                \n\n            \n                \n                    The Mongoose schema for the BlogPostUser.\nThis schema is used to create and manage user documents in the MongoDB database.\n\n                \n            \n\n        \n    \n\n    src/post/dto/create-comment.dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CreateCommentDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CreateCommentDto => ({\n  author: \"John Doe\",\n  content: \"Great Post!\",\n})\n                    \n                \n\n            \n                \n                    Creates a stub for the CreateCommentDto object.\nThis is used for testing purposes to provide a mock comment data structure.\n\n                \n            \n\n        \n    \n\n    src/post/dto/create-post.dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CreatePostDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CreatePostDto => ({\n  title: \"My new blog post\",\n  content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  imagePath: \"/images/my-new-post.jpg\",\n})\n                    \n                \n\n            \n                \n                    Creates a stub for the CreatePostDto object.\nThis is used for testing purposes to provide a mock post data structure.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

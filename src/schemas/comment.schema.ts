import { Prop, Schema, SchemaFactory } from "@nestjs/mongoose";
import { HydratedDocument, Types } from "mongoose";

/**
 * Represents a comment on a blog post.
 *
 * The BlogPostComment schema defines the structure of comment documents stored in MongoDB,
 * including properties for the author, content, and date of the comment.
 */
@Schema({ timestamps: true })
export class BlogPostComment {
  /**
   * The unique identifier for the comment, automatically generated by MongoDB.
   *
   * @type {Types.ObjectId}
   */
  @Prop({ type: Types.ObjectId, auto: true })
  _id: Types.ObjectId;

  /**
   * The name of the author who made the comment.
   *
   * @type {string}
   * @required
   */
  @Prop({ required: true })
  author: string;

  /**
   * The content of the comment.
   *
   * @type {string}
   * @required
   */
  @Prop({ required: true })
  content: string;

  /**
   * The date when the comment was created.
   * Defaults to the current date if not provided.
   *
   * @type {Date}
   */
  @Prop({ default: () => new Date() })
  date: Date;
}

/**
 * The Mongoose document type for BlogPostComment, representing a hydrated document.
 * This type is used to work with comment documents retrieved from MongoDB.
 */
export type BlogPostCommentDocument = HydratedDocument<BlogPostComment>;

/**
 * The Mongoose schema definition for BlogPostComment.
 * This schema is used to create and manage comment documents in the MongoDB database.
 */
export const BlogPostCommentSchema = SchemaFactory.createForClass(BlogPostComment);

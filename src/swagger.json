{
	"openapi": "3.0.3",
	"info": {
		"title": "Posts Creation",
		"description": "OpenAPI specification for Posts",
		"contact": {
			"name": "Nikolaos Grigoropoulos",
			"email": "nikos.gr.17@gmail.com"
		},
		"version": "1.0"
	},
	"servers": [
		{
			"url": "/",
			"description": "Access to Swagger API calls"
		},
		{
			"url": "/proxy",
			"description": "Access to Swagger API calls behind proxy"
		}
	],
	"paths": {
		"/api/v1/posts/": {
			"get": {
				"summary": "Get All Posts",
				"description": "Get All Posts",
				"security": [],
				"tags": [
					"Posts"
				],
				"operationId": "getPosts",
				"responses": {
					"200": {
						"description": "Indicates, the request was successful."
					},
					"204": {
						"description": "Indicates, that there are no posts."
					},
					"500": {
						"description": "Indicates, the request failed."
					}
				}
			},
			"post": {
				"summary": "Create a post",
				"description": "Create a post",
				"tags": [
					"Posts"
				],
				"requestBody": {
					"content": {
					  "application/json": {
						"schema": {
						  "type": "object",
						  "properties": {
							"name": {
							  "description": "Name(title) of the blog post",
							  "type": "string",
							  "default": "How to configure Swagger 101"
							},
							"content":{
								"description": "Content of the blog post",
								"type": "string",
								"default": "How to configure Swagger 101"
							},
							"imagePath": { 
								"description": "Url of the image of the blog post",
								"type": "string",
								"default": "https://static1.smartbear.co/swagger/media/assets/images/swagger_logo.svg"
							}
						  },
						  "required": ["status"] 
						}
					  }
					}
				},
				"operationId": "setPost",
				"responses": {
					"200": {
						"description": "Indicates, the request was successful."
					},
					"409": {
						"description": "Indicates, the post already exists."
					},
					"500": {
						"description": "Indicates, the request failed."
					}
				}
			}
		},
		"/api/v1/posts/{id}": {
			"get": {
				"summary": "Get a Post",
				"description": "Get a post based on id",
				"parameters": [{
					"in": "path",
					"name": "id",
					"required": true,
					"schema": [{
						"type": "string"
					}],
					"description": "The id of the post"
				}],
				"operationId": "getPost",
				"security": [],
				"tags": [
					"Posts"
				],
				"responses": {
					"200": {
						"description": "Indicates, the request was successful."
					},
					"204": {
						"description": "Indicates, the post doesnt exist."
					},
					"500": {
						"description": "Indicates, the request failed."
					}
				}
			},
			"delete": {
				"summary": "Delete a post",
				"description": "Deletes a post based on the id",
				"operationId": "deletePost",
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "ID of post to delete",
					"required": true,
					"schema": [{
						"type": "string"
					}]
				}],
				"tags": [
					"Posts"
				],
				"responses": {
					"200": {
						"description": "Indicates, the request was successful."
					},
					"204": {
						"description": "Indicates, the post doesnt exist."
					},
					"500": {
						"description": "Indicates, the request failed."
					}
				}
			}
		},
		"/api/v1/posts/?page&limit": {
			"get": {
				"summary": "Get Posts with pagination based on created date (ASC).",
				"parameters": [{
						"in": "query",
						"name": "page",
						"required": true,
						"default": 0,
						"schema": [{
							"type": "integer"
						}],
						"description": "The number of page to return"
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"default": 0,
						"schema": [{
							"type": "integer"
						}],
						"description": "The numbers of post to return"
					}
				],
				"description": "Get Posts",
				"security": [],
				"tags": [
					"Posts"
				],
				"responses": {
					"200": {
						"description": "Indicates, the request was successful."
					},
					"204": {
						"description": "Indicates, that with that pagination no posts are available"
					},
					"500": {
						"description": "Indicates, the request failed."
					}
				}
			}
		},
		"/api/v1/posts/?slug": {
			"get": {
				"summary": "Get Post By Slug ",
				"parameters": [{
					"in": "query",
					"name": "slug",
					"required": true,
					"default": "name-101-tutorial",
					"schema": [{
						"type": "string"
					}]
				}],
				"description": "Get Post By Slug",
				"security": [],
				"tags": [
					"Posts"
				],
				"responses": {
					"200": {
						"description": "Indicates, the request was successful."
					},
					"204": {
						"description": "Indicates, the post doesnt exist."
					},
					"500": {
						"description": "Indicates, the request failed."
					}
				}
			}
		},
		"/api/v1/posts/relation/?sourcePostId&relationPostId": {
			"post": {
				"summary": "Set Relationship between two posts",
				"parameters": [{
						"in": "query",
						"name": "sourcePostId",
						"default": "",
						"required": true,
						"schema": [{
							"type": "string"
						}],
						"description": "sourcePostId to use"
					},
					{
						"in": "query",
						"name": "relationPostId",
						"default": "",
						"required": true,
						"schema": [{
							"type": "string"
						}],
						"description": "relationPostId to use"
					}
				],
				"description": "Get Post By Slug",
				"security": [],
				"tags": [
					"Posts"
				],
				"responses": {
					"200": {
						"description": "Indicates, the request was successful."
					},
					"204": {
						"description": "Indicates, the post doesnt exist."
					},
					"400": {
						"description": "Indicates, the request failed."
					},
					"409": {
						"description": "Indicates, the relationship already exists."
					}
				}
			}
		}
	}
}